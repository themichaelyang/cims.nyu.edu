{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/three/build/three.module.js","webpack:///./node_modules/simplex-noise/simplex-noise.js","webpack:///./node_modules/ndarray/ndarray.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/dup/dup.js","webpack:///./node_modules/bit-twiddle/twiddle.js","webpack:///./node_modules/typedarray-pool/pool.js","webpack:///./node_modules/uniq/uniq.js","webpack:///./node_modules/cwise-compiler/compiler.js","webpack:///./node_modules/ndarray-ops/ndarray-ops.js","webpack:///./src/three-pointerlock.js","webpack:///./node_modules/ndarray-gaussian-filter/gauss.js","webpack:///./src/colorTerrainFace.js","webpack:///./src/exponential-perlin.js","webpack:///./src/constants.js","webpack:///./src/terraingen.js","webpack:///./src/genTriangleStripGeometry.js","webpack:///./src/waterMesh.js","webpack:///./src/genTerrain.js","webpack:///./src/index.js","webpack:///./node_modules/three-addons/build/three-addons.min.js","webpack:///./node_modules/esprima/esprima.js","webpack:///./node_modules/cwise-parser/index.js","webpack:///./node_modules/cwise/lib/cwise-esprima.js","webpack:///./node_modules/ndarray-fft/lib/fft-matrix.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/ndarray-fft/fft.js","webpack:///./node_modules/cwise-compiler/lib/compile.js","webpack:///./node_modules/cwise-compiler/lib/thunk.js","webpack:///./node_modules/next-pow-2/np2.js","webpack:///./node_modules/is-buffer/index.js","webpack:///./node_modules/iota-array/iota.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","EventDispatcher","undefined","Number","EPSILON","Math","pow","isInteger","isFinite","floor","sign","x","Function","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","min","max","vector","matrix","y","z","v1","quaternion","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","lut","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Matrix4","elements","console","error","Quaternion","w","_x","_y","_z","_w","Vector3","Matrix3","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","warn","addVectors","addScalar","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","cos","sin","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","te","identity","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","euler","isEuler","f","order","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","q","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","lookAt","eye","up","crossVectors","multiplyMatrices","premultiply","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","count","getZ","applyMatrix4","setXYZ","determinant","transpose","tmp","setPosition","getInverse","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","axis","tx","ty","makeScale","makeShear","compose","position","decompose","sx","sy","sz","invSX","invSY","invSZ","setFromRotationMatrix","makePerspective","left","right","top","bottom","near","far","makeOrthographic","h","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","onChangeCallback","setFromEuler","update","c1","c2","c3","s1","s2","s3","setFromAxisAngle","halfAngle","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","onChange","callback","isVector3","setZ","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","projectionMatrix","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromCylindrical","setFromMatrixPosition","setFromMatrixScale","isMatrix3","setFromMatrix4","g","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","rotation","cx","cy","rotate","translate","points","closestPoint","box","p1","p2","sphere","textureId","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","DataTexture","data","Box3","Infinity","Sphere","Plane","constant","Frustum","p0","p3","p4","p5","planes","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","canvas","HTMLCanvasElement","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","getDataURL","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isWebGLRenderTarget","setSize","isWebGLRenderTargetCube","isDataTexture","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","scope","traverse","node","geometry","isGeometry","vertices","isBufferGeometry","attributes","updateMatrixWorld","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","clampPoint","intersectsPlane","plane","intersectsTriangle","v0","f0","f1","f2","testAxis","extents","triangleNormal","satForAxes","axes","j","triangle","distanceToPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","direction","delta","denominator","start","intersectsLine","startSign","endSign","end","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","referencePoint","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","hsl","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_pars_maps","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","UniformsUtils","merge","uniforms","merged","u","uniforms_src","uniforms_dst","parameter_src","isColor","Array","isArray","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Color","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","handleAlpha","string","parseFloat","exec","color","components","parseInt","charAt","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","UniformsLib","diffuse","opacity","map","uvTransform","alphaMap","specularmap","specularMap","envmap","envMap","flipEnvMap","reflectivity","refractionRatio","maxMipLevel","aomap","aoMap","aoMapIntensity","lightmap","lightMap","lightMapIntensity","emissivemap","emissiveMap","bumpmap","bumpMap","bumpScale","normalmap","normalMap","normalScale","displacementmap","displacementMap","displacementScale","displacementBias","roughnessmap","roughnessMap","metalnessmap","metalnessMap","gradientmap","gradientMap","fog","fogDensity","fogNear","fogFar","fogColor","lights","ambientLightColor","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","distance","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","vertexShader","fragmentShader","lambert","emissive","phong","specular","shininess","standard","roughness","metalness","envMapIntensity","dashed","dashSize","totalSize","depth","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","remove","deleteBuffer","buffer","delete","bufferType","usage","dynamic","DYNAMIC_DRAW","STATIC_DRAW","createBuffer","bindBuffer","bufferData","onUploadCallback","FLOAT","Float32Array","Float64Array","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateRange","bufferSubData","subarray","updateBuffer","Euler","_order","DefaultOrder","Layers","mask","physical","clearCoat","clearCoatRoughness","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","toggle","disable","test","layers","q1","object3DId","Object3D","parent","children","DefaultUp","modelViewMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Camera","matrixWorldInverse","OrthographicCamera","zoom","view","updateProjectionMatrix","Face3","materialIndex","vertexNormals","vertexColors","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverseVisible","traverseAncestors","force","geometries","materials","shapes","serialize","library","element","JSON","stringify","parameters","shape","material","uuids","extractFromCache","cache","values","key","recursive","parse","child","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","zoomW","zoomH","scaleW","scaleH","obj","geometryId","Geometry","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","normals","uvs","uvs2","groups","arrayMax","face","jl","computeBoundingBox","fromBufferGeometry","indices","positions","uv2","tempNormals","tempUVs","tempUVs2","addFace","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","isMesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","hash","k","kl","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","bufferGeometryId","BufferGeometry","morphAttributes","drawRange","BoxGeometry","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","addGroup","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","getIndex","getAttribute","removeAttribute","clearGroups","setDrawRange","needsUpdate","isPoints","isLine","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","morphAttribute","segCenter","segDir","startP","startEnd","materialId","Material","blending","side","flatShading","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","overdraw","MeshBasicMaterial","combine","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","setValues","ShaderMaterial","defines","linewidth","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Ray","origin","Line3","Triangle","Mesh","drawMode","updateMorphTargets","absNumericalSort","CubeTexture","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","emissiveIntensity","sizeAttenuation","gapSize","srcPlanes","dstPlanes","isMeshBasicMaterial","isShaderMaterial","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","edgeList","projectedPoint","minDistance","setDrawMode","morphTargetInfluences","morphTargetDictionary","ml","keys","String","inverseMatrix","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","raycaster","checkBufferGeometryIntersection","intersection","faceIndex","intersects","fvA","fvB","fvC","isMultiMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","isCubeTexture","emptyTexture","emptyCubeTexture","UniformContainer","seq","arrayCacheF32","arrayCacheI32","mat4array","mat3array","flatten","nBlocks","blockSize","firstElem","allocTexUnits","renderer","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","setValueT6","setTextureCube","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","WebGLShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","VERTEX_SHADER","lines","split","join","addLineNumbers","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","parseIncludes","include","unrollLoops","snippet","unroll","WebGLProgram","code","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","FRAGMENT_SHADER","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","trim","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","getUniforms","getAttributes","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","currentRenderTarget","getRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","painterSortStable","reversePainterSortStable","WebGLRenderLists","lists","scene","list","renderItems","renderItemsIndex","opaque","init","renderItem","intersectPoint","worldPosition","worldScale","matrixPosition","offsetMatrix","identityMatrix","WebGLLights","light","halfWidth","halfHeight","state","ambient","vector3","matrix42","setup","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","viewMatrix","intensity","isAmbientLight","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderStates","renderStates","renderState","lightsArray","shadowsArray","spritesArray","setupLights","pushLight","pushShadow","shadowLight","pushSprite","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_projScreenMatrix","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","useMorphing","useSkinning","depthMaterial","distanceMaterial","getDepthMaterial","lightPositionWorld","result","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","groupMaterial","renderBufferDirect","autoUpdate","render","faceCount","_gl","_state","BLEND","setClear","setTest","setScissorTest","vpWidth","vpHeight","pars","isSpotLightShadow","shadowMatrix","setRenderTarget","clear","vpDimensions","CanvasTexture","WebGLSpriteRenderer","vertexBuffer","elementBuffer","spritePosition","spriteRotation","spriteScale","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","uvOffset","uvScale","fogType","fogDepth","fillStyle","fillRect","sprites","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","CULL_FACE","vertexAttribPointer","activeTexture","TEXTURE0","oldFogType","sceneFogType","isFog","density","setBlending","setMask","drawElements","TRIANGLES","reset","WebGLTextures","utils","_canvas","_isWebGL2","WebGL2RenderingContext","_videoTextures","clampToMaxSize","maxSize","textureNeedsGenerateMipmaps","generateMipmap","__maxMipLevel","LOG2E","filterFallback","NEAREST","LINEAR","onTextureDispose","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTarget","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","slot","frame","updateVideoTexture","__version","complete","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","textureNeedsPowerOfTwo","HTMLImageElement","ImageBitmap","makePowerOfTwo","isPowerOfTwoImage","glFormat","convert","glType","setTextureParameters","mipmap","isDepthTexture","internalFormat","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_STENCIL","texImage2D","isCompressedTexture","getCompressedTextureFormats","compressedTexImage2D","uploadTexture","textureType","extension","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","TEXTURE_CUBE_MAP","isCompressed","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGLUtils","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","ArrayCamera","cameras","WebVRManager","device","frameData","poseTarget","standingMatrix","standingMatrixInverse","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","cameraL","bounds","cameraR","currentSize","currentPixelRatio","cameraVR","isPresenting","eyeParameters","getEyeParameters","renderWidth","renderHeight","getPixelRatio","setDrawingBufferSize","userHeight","getDevice","setDevice","setPoseTarget","getCamera","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","poseObject","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebGLRenderer","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","background","morphtargets","bufferRenderer","indexedBufferRenderer","spriteRenderer","_this","_isContextLost","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_usedTextureUnits","_width","_height","_pixelRatio","_viewport","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_vector3","getTargetPixelRatio","contextAttributes","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","clearColor","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentProgram","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","blendEquationSeparate","blendFuncSeparate","blendFunc","setFlipSided","frontFace","CW","CCW","setCullFace","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","webglSlot","enableVertexAttribArray","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","setMaterial","frontFaceCW","setLineWidth","lineWidth","SCISSOR_TEST","webglType","boundTexture","apply","calls","triangles","autoReset","mode","instanceCount","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","LINE_STRIP","LINE_LOOP","POINTS","wireframeAttributes","onGeometryDispose","buffergeometry","_bufferGeometry","geometryAttributes","getWireframeAttribute","geometryIndex","updateList","influencesList","objectInfluences","influences","planeCamera","planeMesh","boxMesh","clearAlpha","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","setMode","drawArrays","renderInstances","drawArraysInstancedANGLE","maxInstancedCount","drawElementsInstancedANGLE","vr","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","getContextAttributes","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","pixelRatio","getCurrentViewport","setScissor","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","stopAnimation","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","isMeshPhongMaterial","isMeshStandardMaterial","isMeshNormalMaterial","normalArray","nx","ny","nz","uvArray","colorArray","setProgram","geometryProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","compile","isLight","initMaterial","warned","isAnimating","onAnimationFrame","requestAnimationLoopFrame","requestAnimationFrame","animationLoop","time","renderObjects","overrideMaterial","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","programChange","lightsHash","numSupportedMorphTargets","numSupportedMorphNormals","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isMeshLambertMaterial","boneTexture","boneMatrices","boneTextureSize","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isShadowMaterial","ltc_1","LTC_1","ltc_2","LTC_2","uvScaleMap","animate","projectObject","isSprite","opaqueObjects","transparentObjects","textureUnit","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","pixels","texSubImage2D","FogExp2","Fog","Scene","SpriteMaterial","Sprite","LOD","levels","Skeleton","boneInverses","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","Group","VideoTexture","video","CompressedTexture","DepthTexture","WireframeGeometry","ol","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","detail","PolyhedronBufferGeometry","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","appplyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","isSpriteMaterial","guessSizeSq","addLevel","getObjectForDistance","bone","isBone","getBoneByName","gbone","pos","rotq","scl","sw","vec","skinWeight","computeLineDistances","positionAttribute","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","step","nbVertices","threshold","params","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","distanceToRay","isGroup","readyState","HAVE_CURRENT_DATA","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","prev","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","extrudePts","splineTube","binormal","position2","ahole","hl","placeholder","curveSegments","steps","amount","bevelEnabled","bevelThickness","bevelSize","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","Materials","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","transform","DefaultLoadingManager","loading","FileLoader","manager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","load","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","status","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loader","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","crossOrigin","substr","src","setCrossOrigin","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","fromJSON","json","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","StringKeyframeTrack","times","interpolation","KeyframeTrack","BooleanKeyframeTrack","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","QuaternionLinearInterpolant","QuaternionKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","ValueTypeName","ValueBufferType","DefaultInterpolation","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","getValueSize","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","TimeBufferType","setInterpolation","validate","optimize","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","trackType","_getTrackTypeForValueTypeName","track","getInterpolation","typeName","InterpolantFactoryMethodDiscrete","factoryMethod","createInterpolant","shift","timeOffset","timeScale","startTime","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","jsonTracks","frameTime","fps","clip","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","shading","typedArray","TYPED_ARRAYS","drawcalls","offsets","BlendingMode","textureLoader","materialLoader","Loader","Handlers","handlers","regex","onLoadStart","onLoadProgress","onLoadComplete","initMaterials","texturePath","createMaterial","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","JSONLoader","ObjectLoader","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","morphAnimationClips","parseAnimations","substring","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","details","geometryShapes","loadImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","FontLoader","setOptions","then","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","instance","eyeSep","eyeRight","eyeLeft","AudioContext","webkitAudioContext","setContext","AudioLoader","StereoCamera","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","AudioListener","gain","createGain","connect","destination","Audio","getInput","autoplay","loop","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","decodeAudioData","audioBuffer","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","setValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setBuffer","play","createBufferSource","onended","onEnded","pause","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","wordChar","wordCharOrDot","directoryRe","nodeRe","objectRe","propertyRe","trackRe","supportedObjectNames","reservedRe","lineGeometry","coneGeometry","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","PointCloud","ascSort","intersectObject","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","Box2","ImmediateRenderObject","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","BoxHelper","Box3Helper","PlaneHelper","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","Face4","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","RegExp","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","isInterleavedBuffer","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","setPoint","setColor","LineStrip","LinePieces","MeshFaceMaterial","MultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","wrapRGB","metal","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","shadowMapCullFace","renderReverseSided","renderSingleSided","standing","getData","updateCubeMap","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","SceneUtils","createMultiMaterialObject","detach","attach","LensFlare","F2","G2","G3","F4","G4","SimplexNoise","randomOrSeed","mash","alea","buildPermutationTable","perm","permMod12","aux","grad3","grad4","noise2D","xin","yin","j1","n0","ii","jj","gi0","gi1","gi2","noise3D","zin","n3","k1","j2","k2","y3","z3","kk","t3","gi3","noise4D","n4","l1","l2","i3","j3","k3","l3","rankx","ranky","rankz","rankw","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","__WEBPACK_AMD_DEFINE_RESULT__","iota","isBuffer","hasTypedArrays","compare1st","terms","compileConstructor","dtype","dimension","className","useGetters","procedure","CACHED_CONSTRUCTORS","args","index_str","shapeArg","strideArg","a_vars","c_vars","tShape","tStride","float32","float64","int8","int16","int32","uint8","uint16","uint32","uint8_clamped","generic","ctor","arrayDType","ctor_list","eval","dupe_number","dupe_array","countTrailingZeros","INT_BITS","INT_MAX","INT_MIN","isPow2","log2","log10","popCount","nextPow2","prevPow2","parity","REVERSE_TABLE","tab","interleave2","deinterleave2","interleave3","deinterleave3","nextCombination","dup","global","__TYPEDARRAY_POOL","UINT8","UINT16","UINT32","INT8","INT16","INT32","DOUBLE","DATA","UINT8C","BUFFER","hasUint8C","POOL","freeArrayBuffer","byteLength","log_n","mallocArrayBuffer","mallocUint8","mallocUint16","mallocUint32","mallocInt8","mallocInt16","mallocInt32","mallocFloat","mallocDouble","mallocUint8Clamped","mallocDataView","mallocBuffer","Buffer","free","freeUint8","freeUint16","freeUint32","freeInt8","freeInt16","freeInt32","freeFloat32","freeFloat","freeFloat64","freeDouble","freeUint8Clamped","freeDataView","freeBuffer","malloc","mallocFloat32","mallocFloat64","clearCache","compare","sorted","ptr","unique_pred","unique_eq","createThunk","user_args","proc","argTypes","shimArgs","arrayArgs","arrayBlockIndices","scalarArgs","offsetArgs","offsetArgIndex","indexArgs","shapeArgs","funcName","pre","body","post","debug","proc_args","arg_type","blockIndices","lvalue","printCode","EmptyProc","thisVars","localVars","fixup","rvalue","makeOp","wrapper","pcompile","assign_ops","mul","div","mod","band","bor","bxor","lshift","rshift","rrshift","op","unary_ops","not","bnot","neg","recip","binary_ops","and","or","eq","neq","lt","gt","leq","geq","math_unary","math_comm","math_noncomm","any","all","prod","norm2squared","norm2","norminf","norm1","sup","inf","argmin","argmax","assigns","THREE","pitchObject","yawObject","moveForward","moveBackward","moveLeft","moveRight","isOnObject","canJump","velocity","PI_2","movementX","mozMovementX","webkitMovementX","movementY","mozMovementY","webkitMovementY","keyCode","getObject","getDirection","arr","sigma","padded","nsize","re","ndarray","pool","re_top","hi","im","ops","fft","gaussFilter","cwise","exp","colorTerrainFace","[object Object]","level_3","level_4","isUnder","r1","r2","r3","grass","grassSand","sand","waterSand","water","BM","FM_SQRT2","s_curve","at2","rx","ry","_g2","get_g2","set_g2","randomflt","noise2","bx0","bx1","by0","by1","rx0","rx1","ry0","ry1","b00","b10","b01","PerlinNoise2D","newi","temp","TerrainTypes","NONE","DEEP_WATER","SHALLOW_WATER","LOW_LAND","HIGH_LAND","SAND","DRY_LAND","MEDIUM_LAND","TerrainColors","Perturb","rgb","terraingen_noise","simplex_noise_default","octaves","it","persist","maxAmp","amp","freq","out","genTriangleStripGeometry","noise","constantmode","three_module","_buildVertices","_genFace1","_genFace2","_buildFaces","_setcol","types","maxtype","maxcount","col","simplex","waterNoise","ratio","waterColor","waterMaterial","createWaterMesh","waterGeometry","waterMesh","genTerrain","makeTerrain","humidity1","rainfall","humidity2","INDEX","X","dropped","gauss","typefunc","MakeTerrain","terrainGeometry","terrainColor","terrainMaterial","terrainMesh","terrain","reposition","getElementById","content","pointerlockchange","pointerLockElement","mozPointerLockElement","webkitPointerLockElement","controlsEnabled","controls","display","pointerlockerror","requestPointerLock","mozRequestPointerLock","webkitRequestPointerLock","innerWidth","innerHeight","three_pointerlock_default","moveDown","moveUp","terrainWidth","terrainHeight","src_scale","src_waterMesh","src_waterGeometry","waterHeight","waterWidth","waterScale","waterRatio","src_offset","directionalLight","devicePixelRatio","appendChild","frameCount","default","Xo","Wo","Ya","$a","go","io","Oo","Ja","Ga","Zo","Jo","M","Qo","E","Ko","S","qo","Yo","A","L","C","D","U","I","O","F","G","H","R","V","W","$o","Y","Z","J","renderType","occlusionMap","screenPosition","TEXTURE1","positionScreen","customUpdateCallback","updateLensFlares","lensFlares","K","Q","$","as","ra","Jn","$n","ga","ya","ca","Aa","ee","jo","ie","ne","oe","se","Qn","Kn","ko","Yn","ue","he","os","pe","fe","ve","ge","ss","ye","xe","_e","we","Me","Ee","Se","Te","Ae","Le","Ce","Re","Pe","De","Ue","Ie","Ne","Oe","Da","Fe","ze","Be","Ge","Uo","Ve","ns","He","je","We","Xe","qe","Je","Ke","Qe","tt","et","Fo","Bo","Go","Vo","Ho","zo","rt","ut","ht","rs","dt","Zn","Va","Wa","Xa","Ha","ja","ka","Ua","Ia","ot","st","Na","Oa","Fa","za","Ba","nt","ct","ft","mt","Ka","Qa","co","lo","_o","ao","so","bo","fo","vo","xt","_t","wt","Et","MaxIndex","Za","eo","uo","po","ro","no","oo","mo","yo","xo","la","ua","pa","fa","ma","va","xa","_a","ba","wa","Ma","wo","Mo","Eo","So","To","Ao","Lo","Co","Ro","da","ia","sa","na","aa","oa","kn","Wn","Xn","Ea","Sa","Ta","La","Ca","Ra","Pa","ke","is","offsetRepeat","ltcMat","ts","LTC_MAT_TEXTURE","ltcMag","LTC_MAG_TEXTURE","Hn","Io","No","isLensFlare","qn","St","Tt","At","Lt","Ct","Rt","Pt","Dt","Ut","It","Nt","Ot","Ft","zt","Bt","Gt","Vt","Ht","jt","kt","Wt","Xt","qt","Yt","Zt","Jt","Kt","Qt","$t","ei","ti","ri","ni","ai","oi","si","ci","li","ui","di","pi","mi","vi","gi","yi","xi","_i","bi","ls","wi","Mi","Ei","Si","Ti","Ai","Li","Ci","Ri","Pi","Di","Ui","Ii","Ni","Oi","Fi","zi","Bi","ps","Gi","Hi","ki","Wi","Xi","qi","Yi","Zi","Ji","Ki","Qi","$i","er","tr","ir","rr","nr","ar","fs","sr","cr","lr","ur","hr","dr","pr","fr","mr","gr","yr","_r","Er","br","wr","Mr","Cr","Sr","Tr","Ar","Lr","Rr","Pr","Dr","Ur","Ir","Nr","Or","Fr","zr","Br","Gr","Hr","kr","Wr","ws","Xr","qr","Yr","Zr","Jr","Kr","$r","Do","Po","tn","rn","nn","on","sn","ln","un","dn","fn","mn","vn","yn","gn","ta","xn","_n","bn","wn","Mn","En","Sn","Tn","ea","An","Ln","Cn","Rn","Ms","Es","Pn","Dn","Un","In","Nn","On","Fn","Gn","Vn","jn","es","lights_pars","lights_template","normal_fragment","wantedRotation","triangulate","arrays","extrudeMaterial","us","hs","ds","ms","vs","gs","ys","xs","_s","Ss","Ts","As","Ls","AdaptiveToneMappingPass","needsInit","adaptive","luminanceRT","previousLuminanceRT","currentLuminanceRT","CopyShader","copyUniforms","_46","materialCopy","_35","_9","LuminosityShader","materialLuminance","adaptLuminanceShader","MIP_LEVEL_1X1","toFixed","lastLum","currentLum","tau","materialAdaptiveLum","ToneMapShader","materialToneMap","needsSwap","_14","_31","quad","_3","_17","tDiffuse","_22","_53","ADAPTED_LUMINANCE","luminanceMap","_4","setAdaptive","setAdaptionRate","setMaxLuminance","maxLuminance","setAverageLuminance","averageLuminance","setMiddleGrey","middleGrey","BasicShader","BleachBypassShader","BlendShader","tDiffuse1","tDiffuse2","mixRatio","BloomPass","renderTargetX","renderTargetY","ConvolutionShader","convolutionUniforms","uImageIncrement","blurX","cKernel","buildKernel","materialConvolution","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","blurY","_48","BokehPass","aperture","maxblur","renderTargetColor","renderTargetDepth","materialDepth","_5","BokehShader","tDepth","materialBokeh","renderToScreen","scene2","quad2","tColor","textureWidth","textureHeight","focalDepth","fstop","showFocus","manualdof","vignetting","depthblur","fringe","znear","zfar","pentagon","shaderFocus","focusCoords","BrightnessContrastShader","brightness","contrast","ColorCorrectionShader","powRGB","_49","mulRGB","addRGB","ColorifyShader","DDSLoader","_25","_20","_21","_24","_19","DOFMipMapShader","DigitalGlitch","tDisp","byp","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","DotScreenPass","DotScreenShader","tSize","EdgeShader","EdgeShader2","EffectComposer","renderTarget1","renderTarget2","writeBuffer","readBuffer","passes","copyPass","ShaderPass","swapBuffers","addPass","insertPass","MaskPass","ClearMaskPass","FXAAShader","_41","FilmPass","FilmShader","grayscale","nIntensity","sIntensity","sCount","FocusShader","screenWidth","screenHeight","sampleDistance","waveFactor","FresnelShader","mRefractionRatio","mFresnelBias","mFresnelPower","mFresnelScale","GammaCorrectionShader","_33","GlitchPass","generateHeightmap","goWild","curF","generateTrigger","randX","_2","HorizontalBlurShader","HorizontalTiltShiftShader","HueSaturationShader","KaleidoShader","sides","MTLLoader","_54","setBaseUrl","baseUrl","setMaterialOptions","materialOptions","MaterialCreator","setManager","setMaterials","materialsInfo","materialsArray","nameLookup","_27","normalizeRGB","ignoreZeroRGBs","preload","getAsArray","createMaterial_","_7","_42","MarchingCubes","enableUvs","enableColors","isolation","size2","size3","halfsize","yd","zd","field","normal_cache","vlist","nlist","maxCount","VIntX","VIntY","VIntZ","compNorm","polygonize","edgeTable","triTable","posnormtriv","begin","addBall","addPlaneX","addPlaneY","addPlaneZ","generateGeometry","REPLACE","KEEP","MirrorShader","NormalMapShader","heightMap","OBJLoader","_12","_6","timeEnd","_34","ocean_sim_vertex","varying","vUV","ocean_subtransform","u_input","u_transformSize","u_subtransformSize","ocean_initial_spectrum","u_wind","u_resolution","u_size","ocean_phase","u_phases","u_deltaTime","ocean_spectrum","u_choppiness","u_initialSpectrum","ocean_normals","u_displacementMap","ocean_main","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","vPos","OrbitControls","zoomSpeed","_16","minZoom","maxZoom","enableZoom","button","mouseButtons","ORBIT","enableRotate","clientX","clientY","ROTATE","ZOOM","DOLLY","PAN","enablePan","clientWidth","rotateSpeed","clientHeight","stopPropagation","wheelDelta","enableKeys","UP","keyPanSpeed","BOTTOM","touches","pageX","pageY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","autoRotate","autoRotateSpeed","target0","position0","zoom0","getPolarAngle","getAzimuthalAngle","_18","_39","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","ParallaxShader","modes","none","steep","occlusion","relief","parallaxScale","parallaxMinLayers","parallaxMaxLayers","RGBShiftShader","RenderPass","oldClearColor","oldClearAlpha","SSAOShader","cameraNear","cameraFar","onlyAO","aoClamp","lumInfluence","SVGLoader","documentElement","SavePass","textureID","renderTargetParameters","SepiaShader","ShaderToon","toon1","uDirLightPos","uDirLightColor","uAmbientLightColor","uBaseColor","toon2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","hatching","dotted","TechnicolorShader","TexturePass","TriangleBlurShader","UnpackDepthRGBAShader","VerticalBlurShader","VerticalTiltShiftShader","VignetteShader","darkness","SobelOperatorShader","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_FACTORY__","Token","TokenName","FnExprTokens","Syntax","PropertyKind","Messages","Regex","SyntaxTreeDelegate","strict","lineNumber","lineStart","delegate","lookahead","extra","assert","condition","isDecimalDigit","ch","isHexDigit","isOctalDigit","isWhiteSpace","isLineTerminator","isIdentifierStart","NonAsciiIdentifierStart","isIdentifierPart","NonAsciiIdentifierPart","isStrictModeReservedWord","isRestrictedWord","addComment","loc","comment","lastCommentStart","comments","attachComment","leadingComments","trailingComments","skipSingleLineComment","column","skipMultiLineComment","throwError","UnexpectedToken","skipComment","scanHexEscape","getEscapedIdentifier","scanIdentifier","getIdentifier","Identifier","isKeyword","Keyword","NullLiteral","BooleanLiteral","scanPunctuator","code2","ch2","ch3","ch4","ch1","tokenize","openParenToken","tokens","openCurlyToken","Punctuator","scanNumericLiteral","number","NumericLiteral","scanHexLiteral","isImplicitOctalLiteral","octal","scanOctalLiteral","scanRegExp","flags","str","classMarker","terminated","UnterminatedRegExp","literal","scanRegExpBody","throwErrorTolerant","scanRegExpFlags","InvalidRegExp","testRegExp","RegularExpression","collectRegex","token","advance","EOF","quote","unescaped","startLineNumber","startLineStart","StringLiteral","scanStringLiteral","prevToken","checkToken","advanceSlash","collectToken","lex","peek","Position","peekLineTerminator","found","messageFormat","whole","description","errors","throwUnexpected","UnexpectedEOS","UnexpectedNumber","UnexpectedString","UnexpectedIdentifier","isFutureReservedWord","UnexpectedReserved","StrictReservedWord","expect","expectKeyword","keyword","matchKeyword","consumeSemicolon","oldIndex","oldLineNumber","oldLineStart","oldLookahead","isLeftHandSide","expr","MemberExpression","parsePropertyFunction","param","first","previousStrict","startToken","parseFunctionSourceElements","StrictParamName","markEnd","createFunctionExpression","parseObjectPropertyKey","StrictOctalLiteral","createLiteral","createIdentifier","parseObjectProperty","parseAssignmentExpression","createProperty","parseVariableIdentifier","parsePrimaryExpression","parseExpression","parseGroupExpression","createArrayExpression","parseArrayInitialiser","kind","Data","Get","Set","StrictDuplicateProperty","AccessorDataProperty","AccessorGetSet","createObjectExpression","parseObjectInitialiser","stricted","firstRestricted","StrictFunctionName","parseParams","parseFunctionExpression","createThisExpression","parseArguments","parseNonComputedProperty","isIdentifierName","parseNonComputedMember","parseComputedMember","parseNewExpression","callee","allowIn","createMemberExpression","parseLeftHandSideExpression","createNewExpression","parsePostfixExpression","previousAllowIn","createCallExpression","parseLeftHandSideExpressionAllowCall","StrictLHSPostfix","InvalidLHSInAssignment","createPostfixExpression","parseUnaryExpression","StrictLHSPrefix","createUnaryExpression","operator","argument","StrictDelete","binaryPrecedence","prec","parseConditionalExpression","consequent","alternate","marker","markers","stack","createBinaryExpression","parseBinaryExpression","createConditionalExpression","StrictLHSAssignment","createAssignmentExpression","createSequenceExpression","expressions","parseBlock","block","statement","parseSourceElement","parseStatementList","createBlockStatement","parseVariableDeclaration","StrictVarName","createVariableDeclarator","parseVariableDeclarationList","parseForStatement","oldInIteration","declarations","createVariableDeclaration","InvalidLHSInForIn","inIteration","parseStatement","createForStatement","createForInStatement","parseSwitchCase","createSwitchCase","parseTryStatement","finalizer","StrictCatchVariable","createCatchClause","NoCatchOrFinally","createTryStatement","labeledBody","createEmptyStatement","createExpressionStatement","parseExpressionStatement","label","inSwitch","IllegalBreak","createBreakStatement","labelSet","UnknownLabel","parseBreakStatement","IllegalContinue","createContinueStatement","parseContinueStatement","createDebuggerStatement","createDoWhileStatement","parseDoWhileStatement","parseFunctionDeclaration","createIfStatement","parseIfStatement","inFunctionBody","IllegalReturn","createReturnStatement","discriminant","cases","clause","oldInSwitch","defaultFound","createSwitchStatement","MultipleDefaultsInSwitch","parseSwitchStatement","NewlineAfterThrow","createThrowStatement","parseThrowStatement","createWhileStatement","StrictModeWith","createWithStatement","parseWithStatement","Redeclaration","createLabeledStatement","sourceElement","oldLabelSet","oldInFunctionBody","sourceElements","expression","Literal","paramSet","StrictParamDupe","createFunctionDeclaration","parseProgram","parseSourceElements","filterTokenLocation","entry","AssignmentExpression","ArrayExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExpressionStatement","ForStatement","ForInStatement","FunctionDeclaration","FunctionExpression","IfStatement","LabeledStatement","LogicalExpression","NewExpression","ObjectExpression","Program","Property","ReturnStatement","SequenceExpression","SwitchStatement","SwitchCase","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","processComment","lastChild","bottomRightStack","startLine","startColumn","postProcess","each","defaults","rest","raw","accessor","computed","guardedHandlers","tolerant","lexError","esprima","uniq","PREFIX_COUNTER","CompiledArgument","ast","argNames","names","getArgNames","compiledArgs","exploded","rewrite","nstr","LVALUE","RVALUE","visit","argNo","carg","getUsage","identifier","self","isGlobal","createLocal","REQUIRED_FIELDS","OPTIONAL_FIELDS","fftRadix2","nrows","ncols","x_ptr","y_ptr","u1","u2","row","scale_f","scratch_ptr","cos_ptr","sin_ptr","xs_ptr","ys_ptr","cft_ptr","sft_ptr","fftBluestein","scratchMemory","read","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","write","b64","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","extraBytes","len2","encodeChunk","lookup","num","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","byteOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","fromString","checked","val","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","arrayIndexOf","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64Slice","utf8Slice","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","Symbol","species","fill","allocUnsafeSlow","_isBuffer","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","leadSurrogate","stringtrim","base64clean","fftm","pad","buf_size","innerFill","nargs","has_index","vars","pidx","processBlock","dtypes","ptrStr","arrNum","offArgIndex","localStr","arrStr","reStrArr","ptrStrArr","typesig","orders","blockBegin","blockEnd","loopBegin","loopEnd","loopOrders","arglist","zeros","off_arg","init_string","matched","countMatches","indexStr","outerFill","loopName","summary","allEqual","digits","typeSummary","thunkName","string_typesig","shapeLengthConditions","shapeConditions","thunk","isSlowBuffer"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","'use strict';\n\n// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\nif ( Number.isInteger === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\tNumber.isInteger = function ( value ) {\n\n\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t};\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( 'name' in Function.prototype === false ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nfunction EventDispatcher() {}\n\nObject.assign( EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\nvar REVISION = '92';\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nvar CullFaceNone = 0;\nvar CullFaceBack = 1;\nvar CullFaceFront = 2;\nvar CullFaceFrontBack = 3;\nvar FrontFaceDirectionCW = 0;\nvar FrontFaceDirectionCCW = 1;\nvar BasicShadowMap = 0;\nvar PCFShadowMap = 1;\nvar PCFSoftShadowMap = 2;\nvar FrontSide = 0;\nvar BackSide = 1;\nvar DoubleSide = 2;\nvar FlatShading = 1;\nvar SmoothShading = 2;\nvar NoColors = 0;\nvar FaceColors = 1;\nvar VertexColors = 2;\nvar NoBlending = 0;\nvar NormalBlending = 1;\nvar AdditiveBlending = 2;\nvar SubtractiveBlending = 3;\nvar MultiplyBlending = 4;\nvar CustomBlending = 5;\nvar AddEquation = 100;\nvar SubtractEquation = 101;\nvar ReverseSubtractEquation = 102;\nvar MinEquation = 103;\nvar MaxEquation = 104;\nvar ZeroFactor = 200;\nvar OneFactor = 201;\nvar SrcColorFactor = 202;\nvar OneMinusSrcColorFactor = 203;\nvar SrcAlphaFactor = 204;\nvar OneMinusSrcAlphaFactor = 205;\nvar DstAlphaFactor = 206;\nvar OneMinusDstAlphaFactor = 207;\nvar DstColorFactor = 208;\nvar OneMinusDstColorFactor = 209;\nvar SrcAlphaSaturateFactor = 210;\nvar NeverDepth = 0;\nvar AlwaysDepth = 1;\nvar LessDepth = 2;\nvar LessEqualDepth = 3;\nvar EqualDepth = 4;\nvar GreaterEqualDepth = 5;\nvar GreaterDepth = 6;\nvar NotEqualDepth = 7;\nvar MultiplyOperation = 0;\nvar MixOperation = 1;\nvar AddOperation = 2;\nvar NoToneMapping = 0;\nvar LinearToneMapping = 1;\nvar ReinhardToneMapping = 2;\nvar Uncharted2ToneMapping = 3;\nvar CineonToneMapping = 4;\nvar UVMapping = 300;\nvar CubeReflectionMapping = 301;\nvar CubeRefractionMapping = 302;\nvar EquirectangularReflectionMapping = 303;\nvar EquirectangularRefractionMapping = 304;\nvar SphericalReflectionMapping = 305;\nvar CubeUVReflectionMapping = 306;\nvar CubeUVRefractionMapping = 307;\nvar RepeatWrapping = 1000;\nvar ClampToEdgeWrapping = 1001;\nvar MirroredRepeatWrapping = 1002;\nvar NearestFilter = 1003;\nvar NearestMipMapNearestFilter = 1004;\nvar NearestMipMapLinearFilter = 1005;\nvar LinearFilter = 1006;\nvar LinearMipMapNearestFilter = 1007;\nvar LinearMipMapLinearFilter = 1008;\nvar UnsignedByteType = 1009;\nvar ByteType = 1010;\nvar ShortType = 1011;\nvar UnsignedShortType = 1012;\nvar IntType = 1013;\nvar UnsignedIntType = 1014;\nvar FloatType = 1015;\nvar HalfFloatType = 1016;\nvar UnsignedShort4444Type = 1017;\nvar UnsignedShort5551Type = 1018;\nvar UnsignedShort565Type = 1019;\nvar UnsignedInt248Type = 1020;\nvar AlphaFormat = 1021;\nvar RGBFormat = 1022;\nvar RGBAFormat = 1023;\nvar LuminanceFormat = 1024;\nvar LuminanceAlphaFormat = 1025;\nvar RGBEFormat = RGBAFormat;\nvar DepthFormat = 1026;\nvar DepthStencilFormat = 1027;\nvar RGB_S3TC_DXT1_Format = 33776;\nvar RGBA_S3TC_DXT1_Format = 33777;\nvar RGBA_S3TC_DXT3_Format = 33778;\nvar RGBA_S3TC_DXT5_Format = 33779;\nvar RGB_PVRTC_4BPPV1_Format = 35840;\nvar RGB_PVRTC_2BPPV1_Format = 35841;\nvar RGBA_PVRTC_4BPPV1_Format = 35842;\nvar RGBA_PVRTC_2BPPV1_Format = 35843;\nvar RGB_ETC1_Format = 36196;\nvar RGBA_ASTC_4x4_Format = 37808;\nvar RGBA_ASTC_5x4_Format = 37809;\nvar RGBA_ASTC_5x5_Format = 37810;\nvar RGBA_ASTC_6x5_Format = 37811;\nvar RGBA_ASTC_6x6_Format = 37812;\nvar RGBA_ASTC_8x5_Format = 37813;\nvar RGBA_ASTC_8x6_Format = 37814;\nvar RGBA_ASTC_8x8_Format = 37815;\nvar RGBA_ASTC_10x5_Format = 37816;\nvar RGBA_ASTC_10x6_Format = 37817;\nvar RGBA_ASTC_10x8_Format = 37818;\nvar RGBA_ASTC_10x10_Format = 37819;\nvar RGBA_ASTC_12x10_Format = 37820;\nvar RGBA_ASTC_12x12_Format = 37821;\nvar LoopOnce = 2200;\nvar LoopRepeat = 2201;\nvar LoopPingPong = 2202;\nvar InterpolateDiscrete = 2300;\nvar InterpolateLinear = 2301;\nvar InterpolateSmooth = 2302;\nvar ZeroCurvatureEnding = 2400;\nvar ZeroSlopeEnding = 2401;\nvar WrapAroundEnding = 2402;\nvar TrianglesDrawMode = 0;\nvar TriangleStripDrawMode = 1;\nvar TriangleFanDrawMode = 2;\nvar LinearEncoding = 3000;\nvar sRGBEncoding = 3001;\nvar GammaEncoding = 3007;\nvar RGBEEncoding = 3002;\nvar LogLuvEncoding = 3003;\nvar RGBM7Encoding = 3004;\nvar RGBM16Encoding = 3005;\nvar RGBDEncoding = 3006;\nvar BasicDepthPacking = 3200;\nvar RGBADepthPacking = 3201;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: ( function () {\n\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\tvar lut = [];\n\n\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t\t}\n\n\t\treturn function generateUUID() {\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t};\n\n\t} )(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\tlerp: function ( x, y, t ) {\n\n\t\treturn ( 1 - t ) * x + t * y;\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * _Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * _Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tceilPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tfloorPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nfunction Vector2( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n}\n\nObject.defineProperties( Vector2.prototype, {\n\n\t\"width\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t}\n\n\t},\n\n\t\"height\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tisVector2: true,\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector2();\n\t\tvar max = new Vector2();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Matrix4() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix4.prototype, {\n\n\tisMatrix4: true,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x = new Vector3();\n\t\tvar y = new Vector3();\n\t\tvar z = new Vector3();\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target );\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tz.normalize();\n\t\t\tx.crossVectors( up, z );\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t}\n\n\t\t\tx.normalize();\n\t\t\ty.crossVectors( z, x );\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeShear: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, y, z, 0,\n\t\t\tx, 1, z, 0,\n\t\t\tx, y, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\tmatrix.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1 = new Vector3();\n\t\tvar r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector3( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n}\n\nObject.assign( Vector3.prototype, {\n\n\tisVector3: true,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function project( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector3();\n\t\tvar max = new Vector3();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\t// TODO lengthSquared?\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function reflect( normal ) {\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function ( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCylindrical: function ( c ) {\n\n\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\tthis.y = c.y;\n\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nfunction Matrix3() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix3.prototype, {\n\n\tisMatrix3: true,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tvar c = Math.cos( rotation );\n\t\tvar s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t},\n\n\tscale: function ( sx, sy ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t},\n\n\trotate: function ( theta ) {\n\n\t\tvar c = Math.cos( theta );\n\t\tvar s = Math.sin( theta );\n\n\t\tvar te = this.elements;\n\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( tx, ty ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nvar textureId = 0;\n\nfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\n\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : RGBAFormat;\n\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\tthis.offset = new Vector2( 0, 0 );\n\tthis.repeat = new Vector2( 1, 1 );\n\tthis.center = new Vector2( 0, 0 );\n\tthis.rotation = 0;\n\n\tthis.matrixAutoUpdate = true;\n\tthis.matrix = new Matrix3();\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Texture,\n\n\tisTexture: true,\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector4( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Vector4.prototype, {\n\n\tisVector4: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new Vector4();\n\t\t\t\tmax = new Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget( width, height, options ) {\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n}\n\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: WebGLRenderTarget,\n\n\tisWebGLRenderTarget: true,\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n}\n\nWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\tthis.unpackAlignment = 1;\n\n}\n\nDataTexture.prototype = Object.create( Texture.prototype );\nDataTexture.prototype.constructor = DataTexture;\n\nDataTexture.prototype.isDataTexture = true;\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n}\n\nObject.assign( Box3.prototype, {\n\n\tisBox3: true,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\texpandByObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar scope, i, l;\n\n\t\tvar v1 = new Vector3();\n\n\t\tfunction traverse( node ) {\n\n\t\t\tvar geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function expandByObject( object ) {\n\n\t\t\tscope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tobject.traverse( traverse );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tintersectsTriangle: ( function () {\n\n\t\t// triangle centered vertices\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\t// triangle edge vectors\n\t\tvar f0 = new Vector3();\n\t\tvar f1 = new Vector3();\n\t\tvar f2 = new Vector3();\n\n\t\tvar testAxis = new Vector3();\n\n\t\tvar center = new Vector3();\n\t\tvar extents = new Vector3();\n\n\t\tvar triangleNormal = new Vector3();\n\n\t\tfunction satForAxes( axes ) {\n\n\t\t\tvar i, j;\n\n\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t\ttestAxis.fromArray( axes, i );\n\t\t\t\t// project the aabb onto the seperating axis\n\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\n\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\t\tvar p0 = v0.dot( testAxis );\n\t\t\t\tvar p1 = v1.dot( testAxis );\n\t\t\t\tvar p2 = v2.dot( testAxis );\n\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn function intersectsTriangle( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( center );\n\t\t\textents.subVectors( this.max, center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\tv0.subVectors( triangle.a, center );\n\t\t\tv1.subVectors( triangle.b, center );\n\t\t\tv2.subVectors( triangle.c, center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\tf0.subVectors( v1, v0 );\n\t\t\tf1.subVectors( v2, v1 );\n\t\t\tf2.subVectors( v0, v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\n\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\n\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\ttriangleNormal.crossVectors( f0, f1 );\n\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\n\t\t\treturn satForAxes( axes );\n\n\t\t};\n\n\t} )(),\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function getBoundingSphere( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\ttarget = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Sphere( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n}\n\nObject.assign( Sphere.prototype, {\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t},\n\n\tgetBoundingBox: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\ttarget = new Box3();\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Plane( normal, constant ) {\n\n\t// normal is assumed to be normalized\n\n\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n}\n\nObject.assign( Plane.prototype, {\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectLine( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar m1 = new Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t];\n\n}\n\nObject.assign( Frustum.prototype, {\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new Vector3(),\n\t\t\tp2 = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} );\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\nvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\nvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\nvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\nvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lights_pars_begin = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\";\n\nvar lights_pars_maps = \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\nvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\";\n\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\t\\tscale *= float( gl_FrontFacing ) * 2.0 - 1.0;\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\nvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\nvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\nvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\nvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\nvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\nvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\nvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\nvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_pars_maps: lights_pars_maps,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert\n};\n\n/**\n * Uniform Utilities\n */\n\nvar UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nfunction Color( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n}\n\nObject.assign( Color.prototype, {\n\n\tisColor: true,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t}\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function () {\n\n\t\tvar hsl = {};\n\n\t\treturn function ( h, s, l ) {\n\n\t\t\tthis.getHSL( hsl );\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\treturn this.getHex();\n\n\t}\n\n} );\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nvar UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 },\n\t\trefractionRatio: { value: 0.98 },\n\t\tmaxMipLevel: { value: 0 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nvar ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 0.5 },\n\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.normal_vert,\n\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearCoat: { value: 0 },\n\t\t\tclearCoatRoughness: { value: 0 }\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLAttributes( gl ) {\n\n\tvar buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tvar buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tvar type = gl.FLOAT;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( attribute.dynamic === false ) {\n\n\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Euler( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || Euler.DefaultOrder;\n\n}\n\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nEuler.DefaultOrder = 'XYZ';\n\nObject.defineProperties( Euler.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\torder: {\n\n\t\tget: function () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Euler.prototype, {\n\n\tisEuler: true,\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = _Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Layers() {\n\n\tthis.mask = 1 | 0;\n\n}\n\nObject.assign( Layers.prototype, {\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nvar object3DId = 0;\n\nfunction Object3D() {\n\n\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = Object3D.DefaultUp.clone();\n\n\tvar position = new Vector3();\n\tvar rotation = new Euler();\n\tvar quaternion = new Quaternion();\n\tvar scale = new Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new Matrix4();\n\tthis.matrixWorld = new Matrix4();\n\n\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Object3D,\n\n\tisObject3D: true,\n\n\tonBeforeRender: function () {},\n\tonAfterRender: function () {},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateOnWorldAxis: function () {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new Matrix4();\n\t\tvar vector = new Vector3();\n\n\t\treturn function lookAt( x, y, z ) {\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tvector.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tif ( this.isCamera ) {\n\n\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t} else {\n\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar scale = new Vector3();\n\n\t\treturn function getWorldQuaternion( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, target, scale );\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldScale( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn target.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tvar uuids = [];\n\n\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\tthis.projectionMatrix = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn target.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n}\n\nOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: OrthographicCamera,\n\n\tisOrthographicCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = ( color && color.isColor ) ? color : new Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n}\n\nObject.assign( Face3.prototype, {\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nvar geometryId = 0; // Geometry uses even numbers as Id\n\nfunction Geometry() {\n\n\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [[]];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.elementsNeedUpdate = false;\n\tthis.verticesNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Geometry,\n\n\tisGeometry: true,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function center() {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeFlatVertexNormals: function () {\n\n\t\tvar f, fl, face;\n\n\t\tthis.computeFaceNormals();\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// colors\n\n\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.vertices = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar i, il, j, jl, k, kl;\n\n\t\t// reset\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// vertices\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\t// colors\n\n\t\tvar colors = source.colors;\n\n\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\t// face vertex uvs\n\n\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargets = source.morphTargets;\n\n\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = {};\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t// vertices\n\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t}\n\n\t\t// morph normals\n\n\t\tvar morphNormals = source.morphNormals;\n\n\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\tvar morphNormal = {};\n\n\t\t\t// vertex normals\n\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// face normals\n\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t}\n\n\t\t// skin weights\n\n\t\tvar skinWeights = source.skinWeights;\n\n\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t}\n\n\t\t// skin indices\n\n\t\tvar skinIndices = source.skinIndices;\n\n\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t}\n\n\t\t// line distances\n\n\t\tvar lineDistances = source.lineDistances;\n\n\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferAttribute( array, itemSize, normalized ) {\n\n\tif ( Array.isArray( array ) ) {\n\n\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t}\n\n\tthis.name = '';\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\tthis.normalized = normalized === true;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( BufferAttribute.prototype, {\n\n\tisBufferAttribute: true,\n\n\tonUploadCallback: function () {},\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\tthis.array = array;\n\n\t\treturn this;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n} );\n\n//\n\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n}\n\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n}\n\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n}\n\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n}\n\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n}\n\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n}\n\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n}\n\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n}\n\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n}\n\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectGeometry() {\n\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nObject.assign( DirectGeometry.prototype, {\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tvar max = array[ 0 ];\n\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\nfunction BufferGeometry() {\n\n\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n}\n\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: BufferGeometry,\n\n\tisBufferGeometry: true,\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function center() {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object.isMesh ) {\n\n\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tvar position = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\tdirect = undefined;\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tvar attribute;\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new Box3();\n\t\tvar vector = new Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar vector = new Vector3();\n\n\t\treturn function normalizeNormals() {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\tvector.normalize();\n\n\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar name, i, l;\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tvar morphAttributes = source.morphAttributes;\n\n\t\tfor ( name in morphAttributes ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// groups\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// BoxGeometry\n\nfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n}\n\nBoxGeometry.prototype = Object.create( Geometry.prototype );\nBoxGeometry.prototype.constructor = BoxGeometry;\n\n// BoxBufferGeometry\n\nfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\twidth = width || 1;\n\theight = height || 1;\n\tdepth = depth || 1;\n\n\t// segments\n\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar numberOfVertices = 0;\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth = width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar ix, iy;\n\n\t\tvar vector = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// uvs\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t// counters\n\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// increase counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n}\n\nBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tuvs.push( ix / gridX );\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar materialId = 0;\n\nfunction Material() {\n\n\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = NormalBlending;\n\tthis.side = FrontSide;\n\tthis.flatShading = false;\n\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = SrcAlphaFactor;\n\tthis.blendDst = OneMinusSrcAlphaFactor;\n\tthis.blendEquation = AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipIntersection = false;\n\tthis.clipShadows = false;\n\n\tthis.shadowSide = null;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.dithering = false;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis.userData = {};\n\n\tthis.needsUpdate = true;\n\n}\n\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Material,\n\n\tisMaterial: true,\n\n\tonBeforeCompile: function () {},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.clipShadows = source.clipShadows;\n\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction ShaderMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\tthis.uniformsNeedUpdate = false;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nShaderMaterial.prototype = Object.create( Material.prototype );\nShaderMaterial.prototype.constructor = ShaderMaterial;\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nShaderMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = Object.assign( {}, source.defines );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Ray( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n}\n\nObject.assign( Ray.prototype, {\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tvar directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new Vector3();\n\t\tvar segDir = new Vector3();\n\t\tvar diff = new Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectSphere( sphere, target ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t},\n\n\tintersectPlane: function ( plane, target ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, target ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new Vector3();\n\t\tvar edge1 = new Vector3();\n\t\tvar edge2 = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Line3( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n}\n\nObject.assign( Line3.prototype, {\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new Vector3();\n\t\tvar startEnd = new Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Triangle( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n}\n\nObject.assign( Triangle, {\n\n\tgetNormal: function () {\n\n\t\tvar v0 = new Vector3();\n\n\t\treturn function getNormal( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\ttarget.cross( v0 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t};\n\n\t}(),\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tgetBarycoord: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function getBarycoord( point, a, b, c, target ) {\n\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\n\n\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\n\n\t\t};\n\n\t}()\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tgetArea: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\n\t\treturn function getArea() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tgetMidpoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tgetNormal: function ( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t},\n\n\tgetPlane: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tgetBarycoord: function ( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane = new Plane();\n\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\tvar projectedPoint = new Vector3();\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function closestPointToPoint( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif ( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\ttarget.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the target is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor ( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif ( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\ttarget.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\tvar vA = new Vector3();\n\t\tvar vB = new Vector3();\n\t\tvar vC = new Vector3();\n\n\t\tvar tempA = new Vector3();\n\t\tvar tempB = new Vector3();\n\t\tvar tempC = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tvar barycoord = new Vector3();\n\n\t\tvar intersectionPoint = new Vector3();\n\t\tvar intersectionPointWorld = new Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uv ) {\n\n\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tvar face = new Face3( a, b, c );\n\t\t\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\t\t\tintersection.face = face;\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar i, l;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) intersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {\n\n\tvar clearColor = new Color( 0x000000 );\n\tvar clearAlpha = 0;\n\n\tvar planeCamera, planeMesh;\n\tvar boxMesh;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\tgeometries.update( boxMesh.geometry );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t);\n\n\t\t\t\tgeometries.update( planeMesh.geometry );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.map = background;\n\n\t\t\t// TODO Push this to renderList\n\n\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBufferRenderer( gl, extensions, info ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tvar maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tvar vertexTextures = maxVertexTextures > 0;\n\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\treturn {\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures\n\n\t};\n\n}\n\n/**\n * @author tschw\n */\n\nfunction WebGLClipping() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLExtensions( gl ) {\n\n\tvar extensions = {};\n\n\treturn {\n\n\t\tget: function ( name ) {\n\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t}\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\textensions[ name ] = extension;\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLGeometries( gl, attributes, info ) {\n\n\tvar geometries = {};\n\tvar wireframeAttributes = {};\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t}\n\n\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO Remove duplicate code\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t}\n\n\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) return attribute;\n\n\t\tvar indices = [];\n\n\t\tvar geometryIndex = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tvar array = geometryIndex.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLInfo( gl ) {\n\n\tvar memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tvar render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\tinstanceCount = instanceCount || 1;\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase gl.TRIANGLES:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.TRIANGLE_STRIP:\n\t\t\tcase gl.TRIANGLE_FAN:\n\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINES:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_STRIP:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_LOOP:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase gl.POINTS:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl ) {\n\n\tvar influencesList = {};\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\tvar length = objectInfluences.length;\n\n\t\tvar influences = influencesList[ geometry.id ];\n\n\t\tif ( influences === undefined ) {\n\n\t\t\t// initialise list\n\n\t\t\tinfluences = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t}\n\n\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t}\n\n\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t// Remove current morphAttributes\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Collect influences\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tinfluence[ 0 ] = i;\n\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t}\n\n\t\tinfluences.sort( absNumericalSort );\n\n\t\t// Add morphAttributes\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence ) {\n\n\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\tif ( value ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t}\n\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLObjects( geometries, info ) {\n\n\tvar updateList = {};\n\n\tfunction update( object ) {\n\n\t\tvar frame = info.render.frame;\n\n\t\tvar geometry = object.geometry;\n\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n}\n\nCubeTexture.prototype = Object.create( Texture.prototype );\nCubeTexture.prototype.constructor = CubeTexture;\n\nCubeTexture.prototype.isCubeTexture = true;\n\nObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nvar emptyTexture = new Texture();\nvar emptyCubeTexture = new CubeTexture();\n\n// --- Base for inner nodes (including the root) ---\n\nfunction UniformContainer() {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nvar arrayCacheF32 = [];\nvar arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nvar mat4array = new Float32Array( 16 );\nvar mat3array = new Float32Array( 9 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tvar firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tvar n = nBlocks * blockSize,\n\t\tr = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( renderer, n ) {\n\n\tvar r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( var i = 0; i !== n; ++ i )\n\t\tr[ i ] = renderer.allocTextureUnit();\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValue1f( gl, v ) {\n\n\tgl.uniform1f( this.addr, v );\n\n}\n\nfunction setValue1i( gl, v ) {\n\n\tgl.uniform1i( this.addr, v );\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValue2fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t} else {\n\n\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n}\n\nfunction setValue3fv( gl, v ) {\n\n\tif ( v.x !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t} else {\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n}\n\nfunction setValue4fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t} else {\n\n\t\t gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n}\n\n// Single matrix (from flat array or MatrixN)\n\nfunction setValue2fm( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n}\n\nfunction setValue3fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat3array.set( v.elements );\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t}\n\n}\n\nfunction setValue4fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat4array.set( v.elements );\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t}\n\n}\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\nfunction setValue2iv( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValue3iv( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValue4iv( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// Array of scalars\n\nfunction setValue1fv( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\nfunction setValue1iv( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of vectors (flat or from THREE classes)\n\nfunction setValueV2a( gl, v ) {\n\n\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n}\n\nfunction setValueV3a( gl, v ) {\n\n\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n}\n\nfunction setValueV4a( gl, v ) {\n\n\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n}\n\n// Array of matrices (flat or from THREE clases)\n\nfunction setValueM2a( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n}\n\nfunction setValueM3a( gl, v ) {\n\n\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n}\n\nfunction setValueM4a( gl, v ) {\n\n\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n}\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tUniformContainer.call( this ); // mix-in\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t// are not allowed in structured uniforms.\n\n\tvar seq = this.seq;\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ] );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tvar path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\tfor ( ; ; ) {\n\n\t\tvar match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\tid = match[ 1 ],\n\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program, renderer ) {\n\n\tUniformContainer.call( this );\n\n\tthis.renderer = renderer;\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\tvar u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tvar v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tvar r = [];\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction addLineNumbers( string ) {\n\n\tvar lines = string.split( '\\n' );\n\n\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tvar shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t}\n\n\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t}\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn shader;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar programIdCount = 0;\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t}\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tvar toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase Uncharted2ToneMapping:\n\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\textensions = extensions || {};\n\n\tvar chunks = [\n\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tvar chunks = [];\n\n\tfor ( var name in defines ) {\n\n\t\tvar value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tvar attributes = {};\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\tvar info = gl.getActiveAttrib( program, i );\n\t\tvar name = info.name;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\nfunction parseIncludes( string ) {\n\n\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\tfunction replace( match, include ) {\n\n\t\tvar replace = ShaderChunk[ include ];\n\n\t\tif ( replace === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn parseIncludes( replace );\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction unrollLoops( string ) {\n\n\tvar pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction replace( match, start, end, snippet ) {\n\n\t\tvar unroll = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t}\n\n\t\treturn unroll;\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\n\n\tvar gl = renderer.context;\n\n\tvar defines = material.defines;\n\n\tvar vertexShader = shader.vertexShader;\n\tvar fragmentShader = shader.fragmentShader;\n\n\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t}\n\n\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t\tcase EquirectangularReflectionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\tbreak;\n\n\t\t\tcase SphericalReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t// console.log( 'building new program ' );\n\n\t//\n\n\tvar customExtensions = generateExtensions( material.extensions, parameters, extensions );\n\n\tvar customDefines = generateDefines( defines );\n\n\t//\n\n\tvar program = gl.createProgram();\n\n\tvar prefixVertex, prefixFragment;\n\n\tif ( material.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\tparameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = parseIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = parseIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tvar vertexGlsl = prefixVertex + vertexShader;\n\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( material.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\tvar runnable = true;\n\tvar haveDiagnostics = true;\n\n\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\trunnable = false;\n\n\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t} else if ( programLog !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\thaveDiagnostics = false;\n\n\t}\n\n\tif ( haveDiagnostics ) {\n\n\t\tthis.diagnostics = {\n\n\t\t\trunnable: runnable,\n\t\t\tmaterial: material,\n\n\t\t\tprogramLog: programLog,\n\n\t\t\tvertexShader: {\n\n\t\t\t\tlog: vertexLog,\n\t\t\t\tprefix: prefixVertex\n\n\t\t\t},\n\n\t\t\tfragmentShader: {\n\n\t\t\t\tlog: fragmentLog,\n\t\t\t\tprefix: prefixFragment\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// clean up\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tvar cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tvar cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t// DEPRECATED\n\n\tObject.defineProperties( this, {\n\n\t\tuniforms: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\treturn this.getUniforms();\n\n\t\t\t}\n\t\t},\n\n\t\tattributes: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\treturn this.getAttributes();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\n\t//\n\n\tthis.name = shader.name;\n\tthis.id = programIdCount ++;\n\tthis.code = code;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t];\n\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\tvar precision = capabilities.precision;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\tarray.push( renderer.gammaOutput );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n/**\n * @author fordacious / fordacious.github.io\n */\n\nfunction WebGLProperties() {\n\n\tvar properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tvar map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction WebGLRenderList() {\n\n\tvar renderItems = [];\n\tvar renderItemsIndex = 0;\n\n\tvar opaque = [];\n\tvar transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction push( object, geometry, material, z, group ) {\n\n\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: material.program,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = material.program;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\trenderItemsIndex ++;\n\n\t}\n\n\tfunction sort() {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t}\n\n\treturn {\n\t\topaque: opaque,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tvar lists = {};\n\n\tfunction get( scene, camera ) {\n\n\t\tvar hash = scene.id + ',' + camera.id;\n\t\tvar list = lists[ hash ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists[ hash ] = list;\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nvar count = 0;\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar state = {\n\n\t\tid: count ++,\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t}\n\n\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tstate.directional.length = directionalLength;\n\t\tstate.spot.length = spotLength;\n\t\tstate.rectArea.length = rectAreaLength;\n\t\tstate.point.length = pointLength;\n\t\tstate.hemi.length = hemiLength;\n\n\t\tstate.hash = state.id + ',' + directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLRenderState() {\n\n\tvar lights = new WebGLLights();\n\n\tvar lightsArray = [];\n\tvar shadowsArray = [];\n\tvar spritesArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\t\tspritesArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction pushSprite( shadowLight ) {\n\n\t\tspritesArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( camera ) {\n\n\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t}\n\n\tvar state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\t\tspritesArray: spritesArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow,\n\t\tpushSprite: pushSprite\n\t};\n\n}\n\nfunction WebGLRenderStates() {\n\n\tvar renderStates = {};\n\n\tfunction get( scene, camera ) {\n\n\t\tvar hash = scene.id + ',' + camera.id;\n\n\t\tvar renderState = renderStates[ hash ];\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState();\n\t\t\trenderStates[ hash ] = renderState;\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nfunction MeshDepthMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDepthMaterial.prototype = Object.create( Material.prototype );\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\nMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nfunction MeshDistanceMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDistanceMaterial';\n\n\tthis.referencePosition = new Vector3();\n\tthis.nearDistance = 1;\n\tthis.farDistance = 1000;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDistanceMaterial.prototype = Object.create( Material.prototype );\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.referencePosition.copy( source.referencePosition );\n\tthis.nearDistance = source.nearDistance;\n\tthis.farDistance = source.farDistance;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\tvar _frustum = new Frustum(),\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_shadowMapSize = new Vector2(),\n\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t_lookTarget = new Vector3(),\n\t\t_lightPositionWorld = new Vector3(),\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tvar cubeDirections = [\n\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\tnew Vector4(), new Vector4(), new Vector4()\n\t];\n\n\t// init\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t//\n\n\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\t// TODO Clean up (needed in case of contextlost)\n\t\tvar _gl = _renderer.context;\n\t\tvar _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount;\n\n\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\t\t\tvar shadow = light.shadow;\n\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\n\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t}\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = false;\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t}\n\n\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n}\n\nCanvasTexture.prototype = Object.create( Texture.prototype );\nCanvasTexture.prototype.constructor = CanvasTexture;\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new Vector3();\n\tvar spriteRotation = new Quaternion();\n\tvar spriteScale = new Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0,\n\t\t\t  0.5, - 0.5, 1, 0,\n\t\t\t  0.5, 0.5, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition: gl.getAttribLocation( program, 'position' ),\n\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset: gl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale: gl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\tcenter: gl.getUniformLocation( program, 'center' ),\n\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType: gl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity: gl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear: gl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar: gl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor: gl.getUniformLocation( program, 'fogColor' ),\n\t\t\tfogDepth: gl.getUniformLocation( program, 'fogDepth' ),\n\n\t\t\talphaTest: gl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new CanvasTexture( canvas );\n\n\t}\n\n\tthis.render = function ( sprites, scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tstate.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\t\tvar center = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tif ( material.visible === false ) continue;\n\n\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tcenter[ 0 ] = sprite.center.x - 0.5;\n\t\t\tcenter[ 1 ] = sprite.center.y - 0.5;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.center, center );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\t\t\tstate.buffers.color.setMask( material.colorWrite );\n\n\t\t\ttextures.setTexture2D( material.map || texture, 0 );\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\tstate.reset();\n\n\t};\n\n\tfunction createProgram() {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 center;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUV = uvOffset + uv * uvScale;',\n\n\t\t\t'\tvec2 alignedPosition = ( position - center ) * scale;',\n\n\t\t\t'\tvec2 rotatedPosition;',\n\t\t\t'\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t'\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t'\tvec4 mvPosition;',\n\n\t\t\t'\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t'\tmvPosition.xy += rotatedPosition;',\n\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'\tfogDepth = - mvPosition.z;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 texture = texture2D( map, vUV );',\n\n\t\t\t'\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t'\tif ( gl_FragColor.a < alphaTest ) discard;',\n\n\t\t\t'\tif ( fogType > 0 ) {',\n\n\t\t\t'\t\tfloat fogFactor = 0.0;',\n\n\t\t\t'\t\tif ( fogType == 1 ) {',\n\n\t\t\t'\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n\n\t\t\t'\t\t} else {',\n\n\t\t\t'\t\t\tconst float LOG2 = 1.442695;',\n\t\t\t'\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\n\t\t\t'\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t'\t\t}',\n\n\t\t\t'\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\n\n\t\t\t'\t}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLState( gl, extensions, utils ) {\n\n\tfunction ColorBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar color = new Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar colorBuffer = new ColorBuffer();\n\tvar depthBuffer = new DepthBuffer();\n\tvar stencilBuffer = new StencilBuffer();\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentProgram = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tvar lineWidthAvailable = false;\n\tvar version = 0;\n\tvar glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new Vector4();\n\tvar currentViewport = new Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tenable( gl.BLEND );\n\tsetBlending( NormalBlending );\n\n\t//\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction enable( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction getCompressedTextureFormats() {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== NoBlending ) {\n\n\t\t\tenable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tdisable( gl.BLEND );\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase AdditiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t} else {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tvar flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\tmaterial.transparent === true\n\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t: setBlending( NoBlending );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\tenable: enable,\n\t\tdisable: disable,\n\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext ); /* global WebGL2RenderingContext */\n\tvar _videoTextures = {};\n\tvar _canvas;\n\n\t//\n\n\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tif ( 'data' in image ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t\t_canvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\t_canvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\tvar context = _canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, _canvas.width, _canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height, image );\n\n\t\t\treturn _canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tdelete _videoTextures[ texture.id ];\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\tgenerateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfo.memory.textures ++;\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tvar id = texture.id;\n\t\tvar frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures[ id ] !== frame ) {\n\n\t\t\t_videoTextures[ id ] = frame;\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n}\n\n/**\n * @author thespite / http://www.twitter.com/thespite\n */\n\nfunction WebGLUtils( gl, extensions ) {\n\n\tfunction convert( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\tif ( p === OneFactor ) return gl.ONE;\n\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ArrayCamera( array ) {\n\n\tPerspectiveCamera.call( this );\n\n\tthis.cameras = array || [];\n\n}\n\nArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\tconstructor: ArrayCamera,\n\n\tisArrayCamera: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebVRManager( renderer ) {\n\n\tvar scope = this;\n\n\tvar device = null;\n\tvar frameData = null;\n\n\tvar poseTarget = null;\n\n\tvar standingMatrix = new Matrix4();\n\tvar standingMatrixInverse = new Matrix4();\n\n\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\tframeData = new window.VRFrameData();\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t}\n\n\tvar matrixWorldInverse = new Matrix4();\n\tvar tempQuaternion = new Quaternion();\n\tvar tempPosition = new Vector3();\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\tcameraL.layers.enable( 1 );\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\tcameraR.layers.enable( 2 );\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tfunction isPresenting() {\n\n\t\treturn device !== null && device.isPresenting === true;\n\n\t}\n\n\tvar currentSize, currentPixelRatio;\n\n\tfunction onVRDisplayPresentChange() {\n\n\t\tif ( isPresenting() ) {\n\n\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t} else if ( scope.enabled ) {\n\n\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.enabled = false;\n\tthis.userHeight = 1.6;\n\n\tthis.getDevice = function () {\n\n\t\treturn device;\n\n\t};\n\n\tthis.setDevice = function ( value ) {\n\n\t\tif ( value !== undefined ) device = value;\n\n\t};\n\n\tthis.setPoseTarget = function ( object ) {\n\n\t\tif ( object !== undefined ) poseTarget = object;\n\n\t};\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tif ( device === null ) return camera;\n\n\t\tdevice.depthNear = camera.near;\n\t\tdevice.depthFar = camera.far;\n\n\t\tdevice.getFrameData( frameData );\n\n\t\t//\n\n\t\tvar stageParameters = device.stageParameters;\n\n\t\tif ( stageParameters ) {\n\n\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t} else {\n\n\t\t\tstandingMatrix.makeTranslation( 0, scope.userHeight, 0 );\n\n\t\t}\n\n\n\t\tvar pose = frameData.pose;\n\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n\t\tposeObject.matrix.copy( standingMatrix );\n\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\n\n\t\tif ( pose.orientation !== null ) {\n\n\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\tposeObject.quaternion.multiply( tempQuaternion );\n\n\t\t}\n\n\t\tif ( pose.position !== null ) {\n\n\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\ttempPosition.fromArray( pose.position );\n\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\tposeObject.position.add( tempPosition );\n\n\t\t}\n\n\t\tposeObject.updateMatrixWorld();\n\n\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t//\n\n\t\tcameraL.near = camera.near;\n\t\tcameraR.near = camera.near;\n\n\t\tcameraL.far = camera.far;\n\t\tcameraR.far = camera.far;\n\n\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t// TODO (mrdoob) Double check this code\n\n\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\tvar parent = poseObject.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t}\n\n\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t// HACK (mrdoob)\n\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t//\n\n\t\tvar layers = device.getLayers();\n\n\t\tif ( layers.length ) {\n\n\t\t\tvar layer = layers[ 0 ];\n\n\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t}\n\n\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn cameraVR;\n\n\t};\n\n\tthis.getStandingMatrix = function () {\n\n\t\treturn standingMatrix;\n\n\t};\n\n\tthis.submitFrame = function () {\n\n\t\tif ( isPresenting() ) device.submitFrame();\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nfunction WebGLRenderer( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n\n\tvar currentRenderList = null;\n\tvar currentRenderState = null;\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t\t_isContextLost = false,\n\n\t\t// internal state cache\n\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\n\t\t_currentCamera = null,\n\t\t_currentArrayCamera = null,\n\n\t\t_currentViewport = new Vector4(),\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t//\n\n\t\t_usedTextureUnits = 0,\n\n\t\t//\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3();\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\n\t}\n\n\tvar extensions, capabilities, state, info;\n\tvar properties, textures, attributes, geometries, objects;\n\tvar programCache, renderLists, renderStates;\n\n\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\tvar spriteRenderer;\n\n\tvar utils;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'OES_element_index_uint' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tutils = new WebGLUtils( _gl, extensions );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tstate = new WebGLState( _gl, extensions, utils );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tattributes = new WebGLAttributes( _gl );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\tobjects = new WebGLObjects( geometries, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates();\n\n\t\tbackground = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );\n\n\t\tspriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.context = _gl;\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// vr\n\n\tvar vr = new WebVRManager( _this );\n\n\tthis.vr = vr;\n\n\t// shadow map\n\n\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width * _pixelRatio,\n\t\t\theight: _height * _pixelRatio\n\t\t};\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = width * pixelRatio;\n\t\t_canvas.height = height * pixelRatio;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function () {\n\n\t\treturn _currentViewport;\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewport.set( x, _height - y - height, width, height );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t_scissor.set( x, _height - y - height, width, height );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tobjects.dispose();\n\n\t\tvr.dispose();\n\n\t\tstopAnimation();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\tmaterial.flatShading === true ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\tvar updateBuffers = false;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\t\tvar rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tvar attribute;\n\t\tvar renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry ) {\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.material ) {\n\n\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tvar isAnimating = false;\n\tvar onAnimationFrame = null;\n\n\tfunction startAnimation() {\n\n\t\tif ( isAnimating ) return;\n\n\t\trequestAnimationLoopFrame();\n\n\t\tisAnimating = true;\n\n\t}\n\n\tfunction stopAnimation() {\n\n\t\tisAnimating = false;\n\n\t}\n\n\tfunction requestAnimationLoopFrame() {\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tdevice.requestAnimationFrame( animationLoop );\n\n\t\t} else {\n\n\t\t\twindow.requestAnimationFrame( animationLoop );\n\n\t\t}\n\n\t}\n\n\tfunction animationLoop( time ) {\n\n\t\tif ( isAnimating === false ) return;\n\n\t\tonAnimationFrame( time );\n\n\t\trequestAnimationLoopFrame();\n\n\t}\n\n\tthis.animate = function ( callback ) {\n\n\t\tonAnimationFrame = callback;\n\t\tonAnimationFrame !== null ? startAnimation() : stopAnimation();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost ) return;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tcamera = vr.getCamera( camera );\n\n\t\t}\n\n\t\t//\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.onBeforeRender( _this, scene, camera, renderTarget );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort();\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t}\n\n\t\t// custom renderers\n\n\t\tvar spritesArray = currentRenderState.state.spritesArray;\n\n\t\tspriteRenderer.render( spritesArray, scene, camera );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tvr.submitFrame();\n\n\t\t}\n\n\t\t// _gl.finish();\n\n\t\tcurrentRenderList = null;\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t/*\n\t// TODO Duplicated code (Frustum)\n\n\tvar _sphere = new Sphere();\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\t*/\n\n\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tcurrentRenderState.pushSprite( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t_currentGeometryProgram = '';\n\n\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar lights = currentRenderState.state.lights;\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\tproperties.update( material, 'lightsHash', lights.state.hash );\n\t\t\tprogramChange = false;\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.fog = fog;\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.lightsHash = lights.state.hash;\n\n\t\tif ( material.lights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\t\tvar lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate === false ) {\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\t// RectAreaLight Texture\n\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _height * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\trefreshUniformsPhong( uniforms, material );\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function () {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar framebuffer = null;\n\t\tvar isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\tvar width = texture.image.width;\n\t\tvar height = texture.image.height;\n\t\tvar glFormat = utils.convert( texture.format );\n\n\t\tthis.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\tvar width = srcTexture.image.width;\n\t\tvar height = srcTexture.image.height;\n\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\tvar glType = utils.convert( dstTexture.type );\n\t\tvar pixels = srcTexture.isDataTexture ? srcTexture.image.data : srcTexture.image;\n\n\t\tthis.setTexture2D( dstTexture, 0 );\n\n\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, pixels );\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction FogExp2( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nFogExp2.prototype.clone = function () {\n\n\treturn new FogExp2( this.color.getHex(), this.density );\n\n};\n\nFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'FogExp2',\n\t\tcolor: this.color.getHex(),\n\t\tdensity: this.density\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Fog( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n}\n\nFog.prototype.isFog = true;\n\nFog.prototype.clone = function () {\n\n\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n};\n\nFog.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'Fog',\n\t\tcolor: this.color.getHex(),\n\t\tnear: this.near,\n\t\tfar: this.far\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Scene() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n}\n\nScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Scene,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nfunction SpriteMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nSpriteMaterial.prototype = Object.create( Material.prototype );\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nSpriteMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\tthis.center = new Vector2( 0.5, 0.5 );\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: ( function () {\n\n\t\tvar intersectPoint = new Vector3();\n\t\tvar worldPosition = new Vector3();\n\t\tvar worldScale = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\treturn this;\n\n\t}\n\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LOD() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n}\n\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LOD,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nfunction Skeleton( bones, boneInverses ) {\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone, i, il;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new Matrix4();\n\t\tvar identityMatrix = new Matrix4();\n\n\t\treturn function update() {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t},\n\n\tgetBoneByName: function ( name ) {\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction Bone() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Bone';\n\n}\n\nBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Bone,\n\n\tisBone: true\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction SkinnedMesh( geometry, material ) {\n\n\tMesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = 'attached';\n\tthis.bindMatrix = new Matrix4();\n\tthis.bindMatrixInverse = new Matrix4();\n\n\tvar bones = this.initBones();\n\tvar skeleton = new Skeleton( bones );\n\n\tthis.bind( skeleton, this.matrixWorld );\n\n\tthis.normalizeSkinWeights();\n\n}\n\nSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: SkinnedMesh,\n\n\tisSkinnedMesh: true,\n\n\tinitBones: function () {\n\n\t\tvar bones = [], bone, gbone;\n\t\tvar i, il;\n\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t// create new 'Bone' object\n\n\t\t\t\tbone = new Bone();\n\t\t\t\tbones.push( bone );\n\n\t\t\t\t// apply values\n\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t}\n\n\t\t\t// second, create bone hierarchy\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t// let's update the corresponding matrices\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn bones;\n\n\t},\n\n\tbind: function ( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tvar scale, i;\n\n\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\tvar vec = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nfunction LineBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nLineBasicMaterial.prototype = Object.create( Material.prototype );\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nLineBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Line( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new LineSegments( geometry, material );\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Line,\n\n\tisLine: true,\n\n\tcomputeLineDistances: ( function () {\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() ),\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LineSegments( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n}\n\nLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineSegments,\n\n\tisLineSegments: true,\n\n\tcomputeLineDistances: ( function () {\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\tstart.copy( vertices[ i ] );\n\t\t\t\t\tend.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() )\n\n} );\n\n/**\n * @author mgreter / http://github.com/mgreter\n */\n\nfunction LineLoop( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineLoop';\n\n}\n\nLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineLoop,\n\n\tisLineLoop: true,\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nfunction PointsMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nPointsMaterial.prototype = Object.create( Material.prototype );\nPointsMaterial.prototype.constructor = PointsMaterial;\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nPointsMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Points( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Points,\n\n\tisPoints: true,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\tsphere.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new Vector3();\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tray.closestPointToPoint( point, intersectPoint );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Group() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Group';\n\n}\n\nGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Group,\n\n\tisGroup: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n}\n\nVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\tconstructor: VideoTexture,\n\n\tisVideoTexture: true,\n\n\tupdate: function () {\n\n\t\tvar video = this.image;\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n/**\n * @author Matt DesLauriers / @mattdesl\n * @author atix / arthursilber.de\n */\n\nfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\tformat = format !== undefined ? format : DepthFormat;\n\n\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t}\n\n\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps\t= false;\n\n}\n\nDepthTexture.prototype = Object.create( Texture.prototype );\nDepthTexture.prototype.constructor = DepthTexture;\nDepthTexture.prototype.isDepthTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WireframeGeometry( geometry ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'WireframeGeometry';\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar i, j, l, o, ol;\n\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\tvar vertex;\n\n\t// different logic for Geometry and BufferGeometry\n\n\tif ( geometry && geometry.isGeometry ) {\n\n\t\t// create a data structure that contains all edges without duplicates\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\te = edges[ key ];\n\n\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\tvar position, indices, groups;\n\t\tvar group, start, count;\n\t\tvar index1, index2;\n\n\t\tvertex = new Vector3();\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\t\t\tindices = geometry.index;\n\t\t\tgroups = geometry.groups;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t}\n\n\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\tstart = group.start;\n\t\t\t\tcount = group.count;\n\n\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\n\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\nWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n/**\n * @author zz85 / https://github.com/zz85\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n */\n\n// ParametricGeometry\n\nfunction ParametricGeometry( func, slices, stacks ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\tthis.mergeVertices();\n\n}\n\nParametricGeometry.prototype = Object.create( Geometry.prototype );\nParametricGeometry.prototype.constructor = ParametricGeometry;\n\n// ParametricBufferGeometry\n\nfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ParametricBufferGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\tvar EPS = 0.00001;\n\n\tvar normal = new Vector3();\n\n\tvar p0 = new Vector3(), p1 = new Vector3();\n\tvar pu = new Vector3(), pv = new Vector3();\n\n\tvar i, j;\n\n\t// generate vertices, normals and uvs\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tvar v = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tvar u = j / slices;\n\n\t\t\t// vertex\n\n\t\t\tfunc( u, v, p0 );\n\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t// normal\n\n\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, v );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\tvar a = i * sliceCount + j;\n\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t// faces one and two\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PolyhedronGeometry\n\nfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n// PolyhedronBufferGeometry\n\nfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PolyhedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\t// default buffer data\n\n\tvar vertexBuffer = [];\n\tvar uvBuffer = [];\n\n\t// the subdivision creates the vertex buffer data\n\n\tsubdivide( detail );\n\n\t// all vertices should lie on a conceptual sphere with a given radius\n\n\tappplyRadius( radius );\n\n\t// finally, create the uv data\n\n\tgenerateUVs();\n\n\t// build non-indexed geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\tif ( detail === 0 ) {\n\n\t\tthis.computeVertexNormals(); // flat normals\n\n\t} else {\n\n\t\tthis.normalizeNormals(); // smooth normals\n\n\t}\n\n\t// helper functions\n\n\tfunction subdivide( detail ) {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t// get the vertices of the face\n\n\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t// perform subdivision\n\n\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t}\n\n\t}\n\n\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\n\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\tvar v = [];\n\n\t\tvar i, j;\n\n\t\t// construct all of the vertices for this subdivision\n\n\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// construct all of the faces\n\n\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction appplyRadius( radius ) {\n\n\t\tvar vertex = new Vector3();\n\n\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tvar vertex = new Vector3();\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t}\n\n\t\tcorrectUVs();\n\n\t\tcorrectSeam();\n\n\t}\n\n\tfunction correctSeam() {\n\n\t\t// handle case when face straddles the seam, see #3269\n\n\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t// uv data of a single face\n\n\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction pushVertex( vertex ) {\n\n\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t}\n\n\tfunction getVertexByIndex( index, vertex ) {\n\n\t\tvar stride = index * 3;\n\n\t\tvertex.x = vertices[ stride + 0 ];\n\t\tvertex.y = vertices[ stride + 1 ];\n\t\tvertex.z = vertices[ stride + 2 ];\n\n\t}\n\n\tfunction correctUVs() {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\tvar centroid = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\tvar azi = azimuth( centroid );\n\n\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t}\n\n\t}\n\n\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t}\n\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t}\n\n\t}\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n}\n\nPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TetrahedronGeometry\n\nfunction TetrahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n// TetrahedronBufferGeometry\n\nfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// OctahedronGeometry\n\nfunction OctahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nOctahedronGeometry.prototype = Object.create( Geometry.prototype );\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n// OctahedronBufferGeometry\n\nfunction OctahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t1, 3, 4,\t1, 4, 2\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// IcosahedronGeometry\n\nfunction IcosahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n// IcosahedronBufferGeometry\n\nfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t];\n\n\tvar indices = [\n\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n/**\n * @author Abe Pazos / https://hamoid.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// DodecahedronGeometry\n\nfunction DodecahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n// DodecahedronBufferGeometry\n\nfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t, 0, - r, t,\n\t\t 0, r, - t, 0, r, t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t, 0, - r, t, 0,\n\t\t r, - t, 0, r, t, 0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t, 0, - r, t, 0, - r,\n\t\t- t, 0, r, t, 0, r\n\t];\n\n\tvar indices = [\n\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n\n// TubeGeometry\n\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = bufferGeometry.tangents;\n\tthis.normals = bufferGeometry.normals;\n\tthis.binormals = bufferGeometry.binormals;\n\n\t// create geometry\n\n\tthis.fromBufferGeometry( bufferGeometry );\n\tthis.mergeVertices();\n\n}\n\nTubeGeometry.prototype = Object.create( Geometry.prototype );\nTubeGeometry.prototype.constructor = TubeGeometry;\n\n// TubeBufferGeometry\n\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TubeBufferGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\ttubularSegments = tubularSegments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = frames.tangents;\n\tthis.normals = frames.normals;\n\tthis.binormals = frames.binormals;\n\n\t// helper variables\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\tvar uv = new Vector2();\n\tvar P = new Vector3();\n\n\tvar i, j;\n\n\t// buffer\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\tvar indices = [];\n\n\t// create buffer data\n\n\tgenerateBufferData();\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// functions\n\n\tfunction generateBufferData() {\n\n\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\tgenerateSegment( i );\n\n\t\t}\n\n\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t// at the regular position on the given path\n\t\t//\n\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t// uvs are generated in a separate function.\n\t\t// this makes it easy compute correct values for closed geometries\n\n\t\tgenerateUVs();\n\n\t\t// finally create faces\n\n\t\tgenerateIndices();\n\n\t}\n\n\tfunction generateSegment( i ) {\n\n\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t// retrieve corresponding normal and binormal\n\n\t\tvar N = frames.normals[ i ];\n\t\tvar B = frames.binormals[ i ];\n\n\t\t// generate normals and vertices for the current segment\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tvar sin = Math.sin( v );\n\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t// normal\n\n\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\tnormal.normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\tfunction generateIndices() {\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author Mugen87 / https://github.com/Mugen87\n *\n * based on http://www.blackpawn.com/texts/pqtorus/\n */\n\n// TorusKnotGeometry\n\nfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n}\n\nTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n// TorusKnotBufferGeometry\n\nfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, j;\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar P1 = new Vector3();\n\tvar P2 = new Vector3();\n\n\tvar B = new Vector3();\n\tvar T = new Vector3();\n\tvar N = new Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n}\n\nTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TorusGeometry\n\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\tthis.mergeVertices();\n\n}\n\nTorusGeometry.prototype = Object.create( Geometry.prototype );\nTorusGeometry.prototype.constructor = TorusGeometry;\n\n// TorusBufferGeometry\n\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar center = new Vector3();\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * Port from https://github.com/mapbox/earcut (v2.1.2)\n */\n\nvar Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\tdim = dim || 2;\n\n\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\ttriangles = [];\n\n\t\tif ( ! outerNode ) return triangles;\n\n\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\n\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tvar i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\n\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tvar p = start, again;\n\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\n\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tvar stop = ear, prev, next;\n\n\t// iterate through ears, slicing them one by one\n\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertice leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\n\nfunction isEar( ear ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tvar p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\n\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\n\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t// first look for points inside the triangle in increasing z-order\n\n\tvar p = ear.nextZ;\n\n\twhile ( p && p.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.nextZ;\n\n\t}\n\n\t// then look for points in decreasing z-order\n\n\tp = ear.prevZ;\n\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\n\t\tp = p.prevZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\n\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tvar a = p.prev, b = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn p;\n\n}\n\n// try splitting polygon into two and triangulate them independently\n\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\n\tvar a = start;\n\n\tdo {\n\n\t\tvar b = a.next.next;\n\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\n\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\n\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tvar queue = [], i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\n\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\n\tif ( outerNode ) {\n\n\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\nfunction findHoleBridge( hole, outerNode ) {\n\n\tvar p = outerNode,\n\t\thx = hole.x,\n\t\thy = hole.y,\n\t\tqx = - Infinity,\n\t\tm;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tvar stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y,\n\t\ttanMin = Infinity,\n\t\ttan;\n\n\tp = m.next;\n\n\twhile ( p !== stop ) {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn m;\n\n}\n\n// interlink polygon nodes in z-order\n\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\nfunction sortLinked( list ) {\n\n\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\n\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\n\nfunction getLeftmost( start ) {\n\n\tvar p = start, leftmost = start;\n\n\tdo {\n\n\t\tif ( p.x < leftmost.x ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\n\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n}\n\n// signed area of a triangle\n\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\n\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\n\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\n\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\n\nfunction intersectsPolygon( a, b ) {\n\n\tvar p = a;\n\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\n\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\n\nfunction middleInside( a, b ) {\n\n\tvar p = a,\n\t\tinside = false,\n\t\tpx = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\n\n\t\t\tinside = ! inside;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\nfunction splitPolygon( a, b ) {\n\n\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\n\nfunction insertNode( i, x, y, last ) {\n\n\tvar p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertice index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertice nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tvar sum = 0;\n\n\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nvar ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tvar holeIndices = []; // array of hole indices\n\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tvar holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n};\n\nfunction removeDupEndPts( points ) {\n\n\tvar l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n// ExtrudeGeometry\n\nfunction ExtrudeGeometry( shapes, options ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\tthis.mergeVertices();\n\n}\n\nExtrudeGeometry.prototype = Object.create( Geometry.prototype );\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n// ExtrudeBufferGeometry\n\nfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ExtrudeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tvar scope = this;\n\n\tvar verticesArray = [];\n\tvar uvArray = [];\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tvar shape = shapes[ i ];\n\t\taddShape( shape, options );\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\tthis.computeVertexNormals();\n\n\t// functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar placeholder = [];\n\n\t\t// options\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar extrudePath = options.extrudePath;\n\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t//\n\n\t\tvar extrudePts, extrudeByPath = false;\n\t\tvar splineTube, binormal, normal, position2;\n\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [],\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0,\n\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tplaceholder.push( x );\n\t\t\tplaceholder.push( y );\n\t\t\tplaceholder.push( z );\n\n\t\t}\n\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( d );\n\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\t\t\taddVertex( d );\n\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t}\n\n\t\tfunction addVertex( index ) {\n\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t}\n\n\n\t\tfunction addUV( vector2 ) {\n\n\t\t\tuvArray.push( vector2.x );\n\t\t\tuvArray.push( vector2.y );\n\n\t\t}\n\n\t}\n\n}\n\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\nvar WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\tvar d_x = vertices[ indexD * 3 ];\n\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\n// TextGeometry\n\nfunction TextGeometry( text, parameters ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TextGeometry';\n\n\tthis.parameters = {\n\t\ttext: text,\n\t\tparameters: parameters\n\t};\n\n\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\tthis.mergeVertices();\n\n}\n\nTextGeometry.prototype = Object.create( Geometry.prototype );\nTextGeometry.prototype.constructor = TextGeometry;\n\n// TextBufferGeometry\n\nfunction TextBufferGeometry( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( ! ( font && font.isFont ) ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextBufferGeometry';\n\n}\n\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// SphereGeometry\n\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nSphereGeometry.prototype = Object.create( Geometry.prototype );\nSphereGeometry.prototype.constructor = SphereGeometry;\n\n// SphereBufferGeometry\n\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar ix, iy;\n\n\tvar index = 0;\n\tvar grid = [];\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = iy / heightSegments;\n\n\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\tvar u = ix / widthSegments;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, 1 - v );\n\n\t\t\tverticesRow.push( index ++ );\n\n\t\t}\n\n\t\tgrid.push( verticesRow );\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// RingGeometry\n\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nRingGeometry.prototype = Object.create( Geometry.prototype );\nRingGeometry.prototype.constructor = RingGeometry;\n\n// RingBufferGeometry\n\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0.5;\n\touterRadius = outerRadius || 1;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// some helper variables\n\n\tvar segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\n\t\tradius += radiusStep;\n\n\t}\n\n\t// indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// LatheGeometry\n\nfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n}\n\nLatheGeometry.prototype = Object.create( Geometry.prototype );\nLatheGeometry.prototype.constructor = LatheGeometry;\n\n// LatheBufferGeometry\n\nfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar base;\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif ( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new Vector3();\n\t\tvar n2 = new Vector3();\n\t\tvar n = new Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\n\t\tbase = segments * points.length * 3;\n\n\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t}\n\n\t}\n\n}\n\nLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n/**\n * @author jonobr1 / http://jonobr1.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// ShapeGeometry\n\nfunction ShapeGeometry( shapes, curveSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( typeof curveSegments === 'object' ) {\n\n\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\tcurveSegments = curveSegments.curveSegments;\n\n\t}\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\tthis.mergeVertices();\n\n}\n\nShapeGeometry.prototype = Object.create( Geometry.prototype );\nShapeGeometry.prototype.constructor = ShapeGeometry;\n\nShapeGeometry.prototype.toJSON = function () {\n\n\tvar data = Geometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n// ShapeBufferGeometry\n\nfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ShapeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tcurveSegments = curveSegments || 12;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar groupStart = 0;\n\tvar groupCount = 0;\n\n\t// allow single and array values for \"shapes\" parameter\n\n\tif ( Array.isArray( shapes ) === false ) {\n\n\t\taddShape( shapes );\n\n\t} else {\n\n\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\taddShape( shapes[ i ] );\n\n\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\tgroupStart += groupCount;\n\t\t\tgroupCount = 0;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t// helper functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar i, l, shapeHole;\n\n\t\tvar indexOffset = vertices.length / 3;\n\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\tvar shapeVertices = points.shape;\n\t\tvar shapeHoles = points.holes;\n\n\t\t// check direction of vertices\n\n\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t// also check if holes are in the opposite direction\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t// join vertices of inner and outer paths to a single array\n\n\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t}\n\n\t\t// vertices, normals, uvs\n\n\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\tnormals.push( 0, 0, 1 );\n\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t}\n\n\t\t// incides\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\tindices.push( a, b, c );\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t}\n\n}\n\nShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\nShapeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n//\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'EdgesGeometry';\n\n\tthis.parameters = {\n\t\tthresholdAngle: thresholdAngle\n\t};\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t// prepare source geometry\n\n\tvar geometry2;\n\n\tif ( geometry.isBufferGeometry ) {\n\n\t\tgeometry2 = new Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar sourceVertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// generate vertices\n\n\tfor ( key in edges ) {\n\n\t\tvar e = edges[ key ];\n\n\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\nEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// CylinderGeometry\n\nfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCylinderGeometry.prototype = Object.create( Geometry.prototype );\nCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n// CylinderBufferGeometry\n\nfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\theight = height || 1;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar index = 0;\n\tvar indexArray = [];\n\tvar halfHeight = height / 2;\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new Vector3();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// update group counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new Vector2();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\n\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\n\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t}\n\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n}\n\nCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\n// ConeGeometry\n\nfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\nConeGeometry.prototype.constructor = ConeGeometry;\n\n// ConeBufferGeometry\n\nfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n\n// CircleGeometry\n\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCircleGeometry.prototype = Object.create( Geometry.prototype );\nCircleGeometry.prototype.constructor = CircleGeometry;\n\n// CircleBufferGeometry\n\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, s;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\n\t// center point\n\n\tvertices.push( 0, 0, 0 );\n\tnormals.push( 0, 0, 1 );\n\tuvs.push( 0.5, 0.5 );\n\n\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t// vertex\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t// normal\n\n\t\tnormals.push( 0, 0, 1 );\n\n\t\t// uvs\n\n\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\tuvs.push( uv.x, uv.y );\n\n\t}\n\n\t// indices\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\nvar Geometries = Object.freeze({\n\tWireframeGeometry: WireframeGeometry,\n\tParametricGeometry: ParametricGeometry,\n\tParametricBufferGeometry: ParametricBufferGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeBufferGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusBufferGeometry,\n\tTextGeometry: TextGeometry,\n\tTextBufferGeometry: TextBufferGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereBufferGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingBufferGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneBufferGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheBufferGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeBufferGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeBufferGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderBufferGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleBufferGeometry,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxBufferGeometry\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <THREE.Color>\n * }\n */\n\nfunction ShadowMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShadowMaterial';\n\n\tthis.color = new Color( 0x000000 );\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nShadowMaterial.prototype = Object.create( Material.prototype );\nShadowMaterial.prototype.constructor = ShadowMaterial;\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\nShadowMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction RawShaderMaterial( parameters ) {\n\n\tShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n}\n\nRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.specular = new Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author takahirox / http://github.com/takahirox\n *\n * parameters = {\n *  gradientMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshToonMaterial( parameters ) {\n\n\tMeshPhongMaterial.call( this );\n\n\tthis.defines = { 'TOON': '' };\n\n\tthis.type = 'MeshToonMaterial';\n\n\tthis.gradientMap = null;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\nMeshToonMaterial.prototype.copy = function ( source ) {\n\n\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\tthis.gradientMap = source.gradientMap;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshNormalMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshNormalMaterial.prototype = Object.create( Material.prototype );\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nfunction LineDashedMaterial( parameters ) {\n\n\tLineBasicMaterial.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.setValues( parameters );\n\n}\n\nLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nLineDashedMaterial.prototype.copy = function ( source ) {\n\n\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n\n\nvar Materials = Object.freeze({\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false;\n\tvar itemsLoaded = 0;\n\tvar itemsTotal = 0;\n\tvar urlModifier = undefined;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n\tthis.resolveURL = function ( url ) {\n\n\t\tif ( urlModifier ) {\n\n\t\t\treturn urlModifier( url );\n\n\t\t}\n\n\t\treturn url;\n\n\t};\n\n\tthis.setURLModifier = function ( transform ) {\n\n\t\turlModifier = transform;\n\t\treturn this;\n\n\t};\n\n}\n\nvar DefaultLoadingManager = new LoadingManager();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FileLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tCache.add( url, response );\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nfunction CompressedTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( DataTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ImageLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( ImageLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\timage.addEventListener( 'load', function () {\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\t/*\n\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t}, false );\n\t\t*/\n\n\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( CubeTextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new CubeTexture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction TextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( TextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new Texture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\n\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nfunction Curve() {\n\n\tthis.type = 'Curve';\n\n\tthis.arcLengthDivisions = 200;\n\n}\n\nObject.assign( Curve.prototype, {\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function ( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t},\n\n\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tvar normal = new Vector3();\n\n\t\tvar tangents = [];\n\t\tvar normals = [];\n\t\tvar binormals = [];\n\n\t\tvar vec = new Vector3();\n\t\tvar mat = new Matrix4();\n\n\t\tvar i, u, theta;\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tu = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tvar min = Number.MAX_VALUE;\n\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'EllipseCurve';\n\n\tthis.aX = aX || 0;\n\tthis.aY = aY || 0;\n\n\tthis.xRadius = xRadius || 1;\n\tthis.yRadius = yRadius || 1;\n\n\tthis.aStartAngle = aStartAngle || 0;\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\tthis.aClockwise = aClockwise || false;\n\n\tthis.aRotation = aRotation || 0;\n\n}\n\nEllipseCurve.prototype = Object.create( Curve.prototype );\nEllipseCurve.prototype.constructor = EllipseCurve;\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn point.set( x, y );\n\n};\n\nEllipseCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.aX = source.aX;\n\tthis.aY = source.aY;\n\n\tthis.xRadius = source.xRadius;\n\tthis.yRadius = source.yRadius;\n\n\tthis.aStartAngle = source.aStartAngle;\n\tthis.aEndAngle = source.aEndAngle;\n\n\tthis.aClockwise = source.aClockwise;\n\n\tthis.aRotation = source.aRotation;\n\n\treturn this;\n\n};\n\n\nEllipseCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.aX = this.aX;\n\tdata.aY = this.aY;\n\n\tdata.xRadius = this.xRadius;\n\tdata.yRadius = this.yRadius;\n\n\tdata.aStartAngle = this.aStartAngle;\n\tdata.aEndAngle = this.aEndAngle;\n\n\tdata.aClockwise = this.aClockwise;\n\n\tdata.aRotation = this.aRotation;\n\n\treturn data;\n\n};\n\nEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.aX = json.aX;\n\tthis.aY = json.aY;\n\n\tthis.xRadius = json.xRadius;\n\tthis.yRadius = json.yRadius;\n\n\tthis.aStartAngle = json.aStartAngle;\n\tthis.aEndAngle = json.aEndAngle;\n\n\tthis.aClockwise = json.aClockwise;\n\n\tthis.aRotation = json.aRotation;\n\n\treturn this;\n\n};\n\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\tthis.type = 'ArcCurve';\n\n}\n\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\nArcCurve.prototype.constructor = ArcCurve;\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nvar tmp = new Vector3();\nvar px = new CubicPoly();\nvar py = new CubicPoly();\nvar pz = new CubicPoly();\n\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CatmullRomCurve3';\n\n\tthis.points = points || [];\n\tthis.closed = closed || false;\n\tthis.curveType = curveType || 'centripetal';\n\tthis.tension = tension || 0.5;\n\n}\n\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar points = this.points;\n\tvar l = points.length;\n\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tif ( this.closed ) {\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\tintPoint = l - 2;\n\t\tweight = 1;\n\n\t}\n\n\tvar p0, p1, p2, p3; // 4 points\n\n\tif ( this.closed || intPoint > 0 ) {\n\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate first point\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\tp0 = tmp;\n\n\t}\n\n\tp1 = points[ intPoint % l ];\n\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate last point\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\tp3 = tmp;\n\n\t}\n\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t// init Centripetal / Chordal Catmull-Rom\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t// safety check for repeated points\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t}\n\n\tpoint.set(\n\t\tpx.calc( weight ),\n\t\tpy.calc( weight ),\n\t\tpz.calc( weight )\n\t);\n\n\treturn point;\n\n};\n\nCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\tthis.closed = source.closed;\n\tthis.curveType = source.curveType;\n\tthis.tension = source.tension;\n\n\treturn this;\n\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\tdata.closed = this.closed;\n\tdata.curveType = this.curveType;\n\tdata.tension = this.tension;\n\n\treturn data;\n\n};\n\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t}\n\n\tthis.closed = json.closed;\n\tthis.curveType = json.curveType;\n\tthis.tension = json.tension;\n\n\treturn this;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tvar v0 = ( p2 - p0 ) * 0.5;\n\tvar v1 = ( p3 - p1 ) * 0.5;\n\tvar t2 = t * t;\n\tvar t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tvar k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\tthis.v3 = v3 || new Vector2();\n\n}\n\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\tthis.v3 = v3 || new Vector3();\n\n}\n\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction LineCurve( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve';\n\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nLineCurve.prototype = Object.create( Curve.prototype );\nLineCurve.prototype.constructor = LineCurve;\n\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\nLineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction LineCurve3( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve3';\n\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nLineCurve3.prototype = Object.create( Curve.prototype );\nLineCurve3.prototype.constructor = LineCurve3;\n\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar points = this.points;\n\tvar p = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar p1 = points[ intPoint ];\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\n\nvar Curves = Object.freeze({\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nfunction CurvePath() {\n\n\tCurve.call( this );\n\n\tthis.type = 'CurvePath';\n\n\tthis.curves = [];\n\tthis.autoClose = false; // Automatically closes the path\n\n}\n\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\tconstructor: CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar points = [], last;\n\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tvar curve = curves[ i ];\n\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && curve.isLineCurve ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n **/\n\nfunction Path( points ) {\n\n\tCurvePath.call( this );\n\n\tthis.type = 'Path';\n\n\tthis.currentPoint = new Vector2();\n\n\tif ( points ) {\n\n\t\tthis.setFromPoints( points );\n\n\t}\n\n}\n\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\tconstructor: Path,\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tvar curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape( points ) {\n\n\tPath.call( this, points );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.type = 'Shape';\n\n\tthis.holes = [];\n\n}\n\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\tconstructor: Shape,\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tPath.prototype.copy.call( this, source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Light( color, intensity ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n}\n\nLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Light,\n\n\tisLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\tLight.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new Color( groundColor );\n\n}\n\nHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: HemisphereLight,\n\n\tisHemisphereLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LightShadow( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new Matrix4();\n\n}\n\nObject.assign( LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction SpotLightShadow() {\n\n\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n}\n\nSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: SpotLightShadow,\n\n\tisSpotLightShadow: true,\n\n\tupdate: function ( light ) {\n\n\t\tvar camera = this.camera;\n\n\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new SpotLightShadow();\n\n}\n\nSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: SpotLight,\n\n\tisSpotLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction PointLight( color, intensity, distance, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n}\n\nPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: PointLight,\n\n\tisPointLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectionalLightShadow( ) {\n\n\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n}\n\nDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: DirectionalLightShadow\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DirectionalLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tthis.shadow = new DirectionalLightShadow();\n\n}\n\nDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: DirectionalLight,\n\n\tisDirectionalLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AmbientLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n}\n\nAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: AmbientLight,\n\n\tisAmbientLight: true\n\n} );\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nfunction RectAreaLight( color, intensity, width, height ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'RectAreaLight';\n\n\tthis.width = ( width !== undefined ) ? width : 10;\n\tthis.height = ( height !== undefined ) ? height : 10;\n\n}\n\nRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: RectAreaLight,\n\n\tisRectAreaLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction BooleanKeyframeTrack( name, times, values ) {\n\n\tKeyframeTrack.call( this, name, times, values );\n\n}\n\nBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n}\n\nObject.assign( Interpolant.prototype, {\n\n\tevaluate: function ( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function () {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function ( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( Interpolant.prototype, {\n\n\t//( 0, t, t0 ), returns this.resultBuffer\n\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t//( N-1, tN-1, t ), returns this.resultBuffer\n\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n} );\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: QuaternionLinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: NumberKeyframeTrack,\n\n\tValueTypeName: 'number'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = - 0;\n\tthis._offsetPrev = - 0;\n\tthis._weightNext = - 0;\n\tthis._offsetNext = - 0;\n\n}\n\nCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: LinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: DiscreteInterpolant,\n\n\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nvar AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\tthis.name = name;\n\n\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n}\n\n// Static methods:\n\nObject.assign( KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function ( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function ( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n} );\n\nObject.assign( KeyframeTrack.prototype, {\n\n\tconstructor: KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function ( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function () {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function () {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function ( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function ( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function ( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function () {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function () {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\twriteIndex = 1,\n\t\t\tlastIndex = times.length - 1;\n\n\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nfunction AnimationClip( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\tthis.optimize();\n\n}\n\nObject.assign( AnimationClip, {\n\n\tparse: function ( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\ttoJSON: function ( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t},\n\n\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function ( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || - 1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\nObject.assign( AnimationClip.prototype, {\n\n\tresetDuration: function () {\n\n\t\tvar tracks = this.tracks, duration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.textures = {};\n\n}\n\nObject.assign( MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\treturn material;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferGeometryLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\nvar TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\t// Workaround for IE11 pre KB2929437. See #11440\n\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Loader() {}\n\nLoader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\nObject.assign( Loader.prototype, {\n\n\tcrossOrigin: undefined,\n\n\tonLoadStart: function () {},\n\n\tonLoadProgress: function () {},\n\n\tonLoadComplete: function () {},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar BlendingMode = {\n\t\t\tNoBlending: NoBlending,\n\t\t\tNormalBlending: NormalBlending,\n\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\tCustomBlending: CustomBlending\n\t\t};\n\n\t\tvar color = new Color();\n\t\tvar textureLoader = new TextureLoader();\n\t\tvar materialLoader = new MaterialLoader();\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar LoaderUtils = {\n\n\tdecodeText: function ( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\t// Merges multi-byte utf-8 characters.\n\t\treturn decodeURIComponent( escape( s ) );\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction JSONLoader( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n}\n\nObject.assign( JSONLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: ( function () {\n\n\t\tfunction parseModel( json, geometry ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tscale = json.scale,\n\n\t\t\t\tnUvLayers = 0;\n\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\tvar scale = json.scale;\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\treturn function parse( json, texturePath ) {\n\n\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t// Geometry 4.0 spec\n\t\t\t\tjson = json.data;\n\n\t\t\t}\n\n\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t} else {\n\n\t\t\t\tjson.scale = 1.0;\n\n\t\t\t}\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tparseModel( json, geometry );\n\t\t\tparseSkin( json, geometry );\n\t\t\tparseMorphing( json, geometry );\n\t\t\tparseAnimations( json, geometry );\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ObjectLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.texturePath = '';\n\n}\n\nObject.assign( ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar shapes = this.parseShape( json.shapes );\n\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseShape: function ( json ) {\n\n\t\tvar shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t},\n\n\tparseGeometries: function ( json, shapes ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\tvar loader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function ( data, geometries, materials ) {\n\n\t\tvar object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tvar children = data.children;\n\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tvar levels = data.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tvar level = levels[ l ];\n\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n} );\n\nvar TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tSphericalReflectionMapping: SphericalReflectionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nvar TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nvar TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n};\n\n/**\n * @author thespite / http://clicktorelease.com/\n */\n\nfunction ImageBitmapLoader( manager ) {\n\n\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t}\n\n\tif ( typeof fetch === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t}\n\n\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\tthis.options = undefined;\n\n}\n\nImageBitmapLoader.prototype = {\n\n\tconstructor: ImageBitmapLoader,\n\n\tsetOptions: function setOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t},\n\n\tload: function load( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tfetch( url ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t} );\n\n\t},\n\n\tsetCrossOrigin: function ( /* value */ ) {\n\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n **/\n\nfunction ShapePath() {\n\n\tthis.type = 'ShapePath';\n\n\tthis.color = new Color();\n\n\tthis.subPaths = [];\n\tthis.currentPath = null;\n\n}\n\nObject.assign( ShapePath.prototype, {\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\tvar subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Font( data ) {\n\n\tthis.type = 'Font';\n\n\tthis.data = data;\n\n}\n\nObject.assign( Font.prototype, {\n\n\tisFont: true,\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar shapes = [];\n\t\tvar paths = createPaths( text, size, divisions, this.data );\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\nfunction createPaths( text, size, divisions, data ) {\n\n\tvar chars = String( text ).split( '' );\n\tvar scale = size / data.resolution;\n\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tvar paths = [];\n\n\tvar offsetX = 0, offsetY = 0;\n\n\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\tvar char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tvar ret = createPath( char, divisions, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, divisions, scale, offsetX, offsetY, data ) {\n\n\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) return;\n\n\tvar path = new ShapePath();\n\n\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\tvar action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction FontLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new Font( json );\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar context;\n\nvar AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( context === undefined ) {\n\n\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\tcontext = value;\n\n\t}\n\n};\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction AudioLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = AudioContext.getContext();\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction StereoCamera() {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.eyeSep = 0.064;\n\n\tthis.cameraL = new PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n}\n\nObject.assign( StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\tvar eyeRight = new Matrix4();\n\t\tvar eyeLeft = new Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tinstance = this;\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CubeCamera( near, far, cubeResolution ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\tthis.update = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\tvar renderTarget = this.renderTarget;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\trenderTarget.activeCubeFace = i;\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n}\n\nCubeCamera.prototype = Object.create( Object3D.prototype );\nCubeCamera.prototype.constructor = CubeCamera;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioListener() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = AudioContext.getContext();\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n}\n\nAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3();\n\n\t\tvar orientation = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction Audio( listener ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.buffer = null;\n\tthis.loop = false;\n\tthis.startTime = 0;\n\tthis.offset = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n}\n\nAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\tthis.startTime = this.context.currentTime;\n\t\tsource.start( this.startTime, this.offset );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.offset = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PositionalAudio( listener ) {\n\n\tAudio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n}\n\nPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\tconstructor: PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioAnalyser( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n}\n\nObject.assign( AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\n\t\t\tmixFunction = this._slerp;\n\t\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\t\t\tbufferType = Array;\n\t\t\tmixFunction = this._select;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n}\n\nObject.assign( PropertyMixer.prototype, {\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function ( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function ( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function () {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function () {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\n// Characters [].:/ are reserved for track binding syntax.\nvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\nfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n}\n\nObject.assign( Composite.prototype, {\n\n\tgetValue: function ( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function ( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n} );\n\n\nfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n}\n\nObject.assign( PropertyBinding, {\n\n\tComposite: Composite,\n\n\tcreate: function ( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param  {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tsanitizeNodeName: ( function () {\n\n\t\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\n\n\t\treturn function sanitizeNodeName( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( reservedRe, '' );\n\n\t\t};\n\n\t}() ),\n\n\tparseTrackName: function () {\n\n\t\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t\t// instead, we exclude reserved characters and match everything else.\n\t\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\n\t\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t// be matched to parse the rest of the track name.\n\t\tvar directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', wordChar );\n\n\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\n\n\t\t// Object on target node, and accessor. May not contain reserved\n\t\t// characters. Accessor may contain any character except closing bracket.\n\t\tvar objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', wordChar );\n\n\t\t// Property and accessor. May not contain reserved characters. Accessor may\n\t\t// contain any non-bracket characters.\n\t\tvar propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', wordChar );\n\n\t\tvar trackRe = new RegExp( ''\n\t\t\t+ '^'\n\t\t\t+ directoryRe\n\t\t\t+ nodeRe\n\t\t\t+ objectRe\n\t\t\t+ propertyRe\n\t\t\t+ '$'\n\t\t);\n\n\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\treturn function parseTrackName( trackName ) {\n\n\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t};\n\n\t}(),\n\n\tfindNode: function ( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n} );\n\nObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function () {},\n\t_setValue_unavailable: function () {},\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t],\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function () {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function () {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( PropertyBinding.prototype, {\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n} );\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nfunction AnimationObjectGroup() {\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() {\n\n\t\t\t\treturn scope._objects.length;\n\n\t\t\t},\n\t\t\tget inUse() {\n\n\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t}\n\t\t},\n\t\tget bindingsPerObject() {\n\n\t\t\treturn scope._bindings.length;\n\n\t\t}\n\n\t};\n\n}\n\nObject.assign( AnimationObjectGroup.prototype, {\n\n\tisAnimationObjectGroup: true,\n\n\tadd: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length,\n\t\t\tknownObject = undefined;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function ( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = LoopRepeat;\n\tthis._loopCount = - 1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n}\n\nObject.assign( AnimationAction.prototype, {\n\n\t// State & Scheduling\n\n\tplay: function () {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function () {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function () {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function () {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function ( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function ( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function ( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function () {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function () {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function () {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function ( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function ( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function ( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function () {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function () {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function () {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function () {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function ( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function ( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function ( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction AnimationMixer( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n}\n\nAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: AnimationMixer,\n\n\t_bindAction: function ( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function ( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function ( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function () {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction: function ( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function ( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function ( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function ( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function () {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function () {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function ( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function () {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function ( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function ( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Uniform( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n}\n\nUniform.prototype.clone = function () {\n\n\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n};\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferGeometry() {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n}\n\nInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\tconstructor: InstancedBufferGeometry,\n\n\tisInstancedBufferGeometry: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n\tthis.normalized = normalized === true;\n\n}\n\nObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\tcount: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.count;\n\n\t\t}\n\n\t},\n\n\tarray: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.array;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( InterleavedBufferAttribute.prototype, {\n\n\tisInterleavedBufferAttribute: true,\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBuffer( array, stride ) {\n\n\tthis.array = array;\n\tthis.stride = stride;\n\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( InterleavedBuffer.prototype, {\n\n\tisInterleavedBuffer: true,\n\n\tonUploadCallback: function () {},\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\tthis.array = array;\n\n\t\treturn this;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\tInterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\tconstructor: InstancedInterleavedBuffer,\n\n\tisInstancedInterleavedBuffer: true,\n\n\tcopy: function ( source ) {\n\n\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\tBufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\tconstructor: InstancedBufferAttribute,\n\n\tisInstancedBufferAttribute: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\nfunction Raycaster( origin, direction, near, far ) {\n\n\tthis.ray = new Ray( origin, direction );\n\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\tthis.near = near || 0;\n\tthis.far = far || Infinity;\n\n\tthis.params = {\n\t\tMesh: {},\n\t\tLine: {},\n\t\tLOD: {},\n\t\tPoints: { threshold: 1 },\n\t\tSprite: {}\n\t};\n\n\tObject.defineProperties( this.params, {\n\t\tPointCloud: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\treturn this.Points;\n\n\t\t\t}\n\t\t}\n\t} );\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.visible === false ) return;\n\n\tobject.raycast( raycaster, intersects );\n\n\tif ( recursive === true ) {\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n\tlinePrecision: 1,\n\n\tset: function ( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t},\n\n\tsetFromCamera: function ( coords, camera ) {\n\n\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t}\n\n\t},\n\n\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t},\n\n\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Clock( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n}\n\nObject.assign( Clock.prototype, {\n\n\tstart: function () {\n\n\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nfunction Spherical( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n}\n\nObject.assign( Spherical.prototype, {\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\n\nfunction Cylindrical( radius, theta, y ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\treturn this;\n\n}\n\nObject.assign( Cylindrical.prototype, {\n\n\tset: function ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\tthis.y = vec3.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Box2( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n}\n\nObject.assign( Box2.prototype, {\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction ImmediateRenderObject( material ) {\n\n\tObject3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( /* renderCallback */ ) {};\n\n}\n\nImmediateRenderObject.prototype = Object.create( Object3D.prototype );\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\nVertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction SpotLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0, \t0, 0, 1,\n\t\t0, 0, 0, \t1, 0, 1,\n\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t0, 0, 0, \t0, 1, 1,\n\t\t0, 0, 0, \t0, - 1, 1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n}\n\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nSpotLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\tvar vector2 = new Vector3();\n\n\treturn function update() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n}();\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction getBoneList( object ) {\n\n\tvar boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nfunction SkeletonHelper( object ) {\n\n\tvar bones = getBoneList( object );\n\n\tvar geometry = new BufferGeometry();\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar color1 = new Color( 0, 0, 1 );\n\tvar color2 = new Color( 0, 1, 0 );\n\n\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\tvar bone = bones[ i ];\n\n\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t}\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\tthis.bones = bones;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n}\n\nSkeletonHelper.prototype = Object.create( LineSegments.prototype );\nSkeletonHelper.prototype.constructor = SkeletonHelper;\n\nSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\tvar vector = new Vector3();\n\n\tvar boneMatrix = new Matrix4();\n\tvar matrixWorldInv = new Matrix4();\n\n\treturn function updateMatrixWorld( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PointLightHelper( light, sphereSize, color ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.color = color;\n\n\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n}\n\nPointLightHelper.prototype = Object.create( Mesh.prototype );\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nPointLightHelper.prototype.update = function () {\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t}\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n/**\n * @author abelnation / http://github.com/abelnation\n * @author Mugen87 / http://github.com/Mugen87\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction RectAreaLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\tthis.line = new Line( geometry, material );\n\tthis.add( this.line );\n\n\n\tthis.update();\n\n}\n\nRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\nRectAreaLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nRectAreaLightHelper.prototype.update = function () {\n\n\t// calculate new dimensions of the helper\n\n\tvar hx = this.light.width * 0.5;\n\tvar hy = this.light.height * 0.5;\n\n\tvar position = this.line.geometry.attributes.position;\n\tvar array = position.array;\n\n\t// update vertices\n\n\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\tposition.needsUpdate = true;\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.line.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.line.material.color.copy( this.light.color );\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction HemisphereLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new OctahedronBufferGeometry( size );\n\tgeometry.rotateY( Math.PI * 0.5 );\n\n\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\tvar position = geometry.getAttribute( 'position' );\n\tvar colors = new Float32Array( position.count * 3 );\n\n\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\tthis.add( new Mesh( geometry, this.material ) );\n\n\tthis.update();\n\n}\n\nHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\nHemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nHemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\n\tvar color1 = new Color();\n\tvar color2 = new Color();\n\n\treturn function update() {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\tcolor1.copy( this.light.color );\n\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction GridHelper( size, divisions, color1, color2 ) {\n\n\tsize = size || 10;\n\tdivisions = divisions || 10;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = size / divisions;\n\tvar halfSize = size / 2;\n\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nGridHelper.prototype = Object.create( LineSegments.prototype );\nGridHelper.prototype.constructor = GridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\n\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\tradius = radius || 10;\n\tradials = radials || 16;\n\tcircles = circles || 8;\n\tdivisions = divisions || 64;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar x, z;\n\tvar v, i, j, r, color;\n\n\t// create the radials\n\n\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\tx = Math.sin( v ) * radius;\n\t\tz = Math.cos( v ) * radius;\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tvertices.push( x, 0, z );\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tcolors.push( color.r, color.g, color.b );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t}\n\n\t// create the circles\n\n\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tr = radius - ( radius / circles * i );\n\n\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t// first vertex\n\n\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t// second vertex\n\n\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n}\n\nFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\nFaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction DirectionalLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t- size, size, 0,\n\t\tsize, size, 0,\n\t\tsize, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size, size, 0\n\t], 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.lightPlane = new Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.targetLine = new Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n}\n\nDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\nDirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n\n};\n\nDirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar v3 = new Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tthis.lightPlane.lookAt( v3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( v3 );\n\t\tthis.targetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nfunction CameraHelper( camera ) {\n\n\tvar geometry = new BufferGeometry();\n\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar colorFrustum = new Color( 0xffaa00 );\n\tvar colorCone = new Color( 0xff0000 );\n\tvar colorUp = new Color( 0x00aaff );\n\tvar colorTarget = new Color( 0xffffff );\n\tvar colorCross = new Color( 0x333333 );\n\n\t// near\n\n\taddLine( 'n1', 'n2', colorFrustum );\n\taddLine( 'n2', 'n4', colorFrustum );\n\taddLine( 'n4', 'n3', colorFrustum );\n\taddLine( 'n3', 'n1', colorFrustum );\n\n\t// far\n\n\taddLine( 'f1', 'f2', colorFrustum );\n\taddLine( 'f2', 'f4', colorFrustum );\n\taddLine( 'f4', 'f3', colorFrustum );\n\taddLine( 'f3', 'f1', colorFrustum );\n\n\t// sides\n\n\taddLine( 'n1', 'f1', colorFrustum );\n\taddLine( 'n2', 'f2', colorFrustum );\n\taddLine( 'n3', 'f3', colorFrustum );\n\taddLine( 'n4', 'f4', colorFrustum );\n\n\t// cone\n\n\taddLine( 'p', 'n1', colorCone );\n\taddLine( 'p', 'n2', colorCone );\n\taddLine( 'p', 'n3', colorCone );\n\taddLine( 'p', 'n4', colorCone );\n\n\t// up\n\n\taddLine( 'u1', 'u2', colorUp );\n\taddLine( 'u2', 'u3', colorUp );\n\taddLine( 'u3', 'u1', colorUp );\n\n\t// target\n\n\taddLine( 'c', 't', colorTarget );\n\taddLine( 'p', 'c', colorCross );\n\n\t// cross\n\n\taddLine( 'cn1', 'cn2', colorCross );\n\taddLine( 'cn3', 'cn4', colorCross );\n\n\taddLine( 'cf1', 'cf2', colorCross );\n\taddLine( 'cf3', 'cf4', colorCross );\n\n\tfunction addLine( a, b, color ) {\n\n\t\taddPoint( a, color );\n\t\taddPoint( b, color );\n\n\t}\n\n\tfunction addPoint( id, color ) {\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n}\n\nCameraHelper.prototype = Object.create( LineSegments.prototype );\nCameraHelper.prototype.constructor = CameraHelper;\n\nCameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new Vector3();\n\tvar camera = new Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\tsetPoint( 'f2', w, - h, 1 );\n\t\tsetPoint( 'f3', - w, h, 1 );\n\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n */\n\nfunction BoxHelper( object, color ) {\n\n\tthis.object = object;\n\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nBoxHelper.prototype = Object.create( LineSegments.prototype );\nBoxHelper.prototype.constructor = BoxHelper;\n\nBoxHelper.prototype.update = ( function () {\n\n\tvar box = new Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tbox.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\nBoxHelper.prototype.setFromObject = function ( object ) {\n\n\tthis.object = object;\n\tthis.update();\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3Helper( box, hex ) {\n\n\tthis.type = 'Box3Helper';\n\n\tthis.box = box;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.geometry.computeBoundingSphere();\n\n}\n\nBox3Helper.prototype = Object.create( LineSegments.prototype );\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar box = this.box;\n\n\tif ( box.isEmpty() ) return;\n\n\tbox.getCenter( this.position );\n\n\tbox.getSize( this.scale );\n\n\tthis.scale.multiplyScalar( 0.5 );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction PlaneHelper( plane, size, hex ) {\n\n\tthis.type = 'PlaneHelper';\n\n\tthis.plane = plane;\n\n\tthis.size = ( size === undefined ) ? 1 : size;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tgeometry.computeBoundingSphere();\n\n\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t//\n\n\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\tvar geometry2 = new BufferGeometry();\n\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\tgeometry2.computeBoundingSphere();\n\n\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n}\n\nPlaneHelper.prototype = Object.create( Line.prototype );\nPlaneHelper.prototype.constructor = PlaneHelper;\n\nPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar scale = - this.plane.constant;\n\n\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\tthis.lookAt( this.plane.normal );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nvar lineGeometry;\nvar coneGeometry;\n\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t// dir is assumed to be normalized\n\n\tObject3D.call( this );\n\n\tif ( color === undefined ) color = 0xffff00;\n\tif ( length === undefined ) length = 1;\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( lineGeometry === undefined ) {\n\n\t\tlineGeometry = new BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t}\n\n\tthis.position.copy( origin );\n\n\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\tthis.line.matrixAutoUpdate = false;\n\tthis.add( this.line );\n\n\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\tthis.cone.matrixAutoUpdate = false;\n\tthis.add( this.cone );\n\n\tthis.setDirection( dir );\n\tthis.setLength( length, headLength, headWidth );\n\n}\n\nArrowHelper.prototype = Object.create( Object3D.prototype );\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AxesHelper( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = [\n\t\t0, 0, 0,\tsize, 0, 0,\n\t\t0, 0, 0,\t0, size, 0,\n\t\t0, 0, 0,\t0, 0, size\n\t];\n\n\tvar colors = [\n\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t0, 0, 1,\t0, 0.6, 1\n\t];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nAxesHelper.prototype = Object.create( LineSegments.prototype );\nAxesHelper.prototype.constructor = AxesHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n}\n\nvar LineStrip = 0;\n\nvar LinePieces = 1;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials ) {\n\n\tif ( materials === undefined ) materials = [];\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nObject.assign( CurvePath.prototype, {\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from equidistant sampling along the path\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\tvar geometry = new Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n//\n\nObject.assign( Path.prototype, {\n\n\tfromPoints: function ( points ) {\n\n\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\tthis.setFromPoints( points );\n\n\t}\n\n} );\n\n//\n\nfunction ClosedSplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n}\n\nClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction SplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction Spline( points ) {\n\n\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\nObject.assign( Spline.prototype, {\n\n\tinitFromArray: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t},\n\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t},\n\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nObject.assign( Loader.prototype, {\n\n\textractUrlBase: function ( url ) {\n\n\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t}\n\n} );\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\n//\n\nObject.assign( Box2.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nObject.assign( Box3.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nObject.assign( _Math, {\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\treturn _Math.floorPowerOfTwo( value );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t}\n\n} );\n\nObject.assign( Matrix3.prototype, {\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( Matrix4.prototype, {\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\tmultiplyToArray: function () {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t},\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\n\t},\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\ttranslate: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\trotateX: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\trotateY: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\trotateZ: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\trotateByAxis: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t},\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t}\n\n} );\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nObject.assign( Ray.prototype, {\n\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t}\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tarea: function () {\n\n\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\treturn this.getArea();\n\n\t},\n\tbarycoordFromPoint: function ( point, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn this.getBarycoord( point, target );\n\n\t},\n\tmidpoint: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\treturn this.getMidpoint( target );\n\n\t},\n\tnormal: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn this.getNormal( target );\n\n\t},\n\tplane: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\treturn this.getPlane( target );\n\n\t}\n\n} );\n\nObject.assign( Triangle, {\n\n\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t},\n\tnormal: function ( a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t}\n\n} );\n\nObject.assign( Shape.prototype, {\n\n\textractAllPoints: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\treturn this.extractPoints( divisions );\n\n\t},\n\textrude: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\treturn new ExtrudeGeometry( this, options );\n\n\t},\n\tmakeGeometry: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\treturn new ShapeGeometry( this, options );\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector3.prototype, {\n\n\tsetEulerFromRotationMatrix: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\tsetEulerFromQuaternion: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t},\n\tapplyProjection: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\treturn this.applyMatrix4( m );\n\n\t},\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector4.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\n//\n\nObject.assign( Geometry.prototype, {\n\n\tcomputeTangents: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeLineDistances: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t}\n\n} );\n\nObject.assign( Object3D.prototype, {\n\n\tgetChildByName: function ( name ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\n\t},\n\trenderDepth: function () {\n\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t},\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t},\n\tgetWorldRotation: function () {\n\n\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t}\n\n} );\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( LOD.prototype, {\n\n\tobjects: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t},\n\tset: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\treturn this.arcLengthDivisions;\n\n\t},\n\tset: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\tthis.arcLengthDivisions = value;\n\n\t}\n\n} );\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( BufferGeometry.prototype, {\n\n\taddIndex: function ( index ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tif ( indexOffset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\n\t},\n\tclearDrawCalls: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\n\t},\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeOffsets: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\tgetArrays: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t},\n\n\taddShapeList: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t},\n\n\taddShape: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Uniform.prototype, {\n\n\tdynamic: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t}\n\t},\n\tonUpdate: {\n\t\tvalue: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\treturn this;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\tmetal: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( WebGLRenderer.prototype, {\n\n\tgetCurrentRenderTarget: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\treturn this.getRenderTarget();\n\n\t},\n\n\tgetMaxAnisotropy: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t},\n\n\tgetPrecision: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\treturn this.capabilities.precision;\n\n\t},\n\n\tresetGLState: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\treturn this.state.reset();\n\n\t},\n\n\tsupportsFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t},\n\tsupportsHalfFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t},\n\tsupportsStandardDerivatives: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t},\n\tsupportsBlendMinMax: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t},\n\tsupportsVertexTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\treturn this.capabilities.vertexTextures;\n\n\t},\n\tsupportsInstancedArrays: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t},\n\tenableScissorTest: function ( boolean ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\n\t},\n\tinitMaterial: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t},\n\taddPrePlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t},\n\taddPostPlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t},\n\tupdateShadowMap: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t},\n\tsetFaceCulling: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebVRManager.prototype, {\n\n\tstanding: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tvar scope = this;\n\tvar audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\n//\n\nvar GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\tvar matrix;\n\n\t\tif ( geometry2.isMesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nvar ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nfunction Projector() {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n}\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n}\n\n//\n\nvar SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n}\n\nexport { WebGLRenderTargetCube, WebGLRenderTarget, WebGLRenderer, ShaderLib, UniformsLib, UniformsUtils, ShaderChunk, FogExp2, Fog, Scene, Sprite, LOD, SkinnedMesh, Skeleton, Bone, Mesh, LineSegments, LineLoop, Line, Points, Group, VideoTexture, DataTexture, CompressedTexture, CubeTexture, CanvasTexture, DepthTexture, Texture, CompressedTextureLoader, DataTextureLoader, CubeTextureLoader, TextureLoader, ObjectLoader, MaterialLoader, BufferGeometryLoader, DefaultLoadingManager, LoadingManager, JSONLoader, ImageLoader, ImageBitmapLoader, FontLoader, FileLoader, Loader, LoaderUtils, Cache, AudioLoader, SpotLightShadow, SpotLight, PointLight, RectAreaLight, HemisphereLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LightShadow, Light, StereoCamera, PerspectiveCamera, OrthographicCamera, CubeCamera, ArrayCamera, Camera, AudioListener, PositionalAudio, AudioContext, AudioAnalyser, Audio, VectorKeyframeTrack, StringKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack, ColorKeyframeTrack, BooleanKeyframeTrack, PropertyMixer, PropertyBinding, KeyframeTrack, AnimationUtils, AnimationObjectGroup, AnimationMixer, AnimationClip, Uniform, InstancedBufferGeometry, BufferGeometry, Geometry, InterleavedBufferAttribute, InstancedInterleavedBuffer, InterleavedBuffer, InstancedBufferAttribute, Face3, Object3D, Raycaster, Layers, EventDispatcher, Clock, QuaternionLinearInterpolant, LinearInterpolant, DiscreteInterpolant, CubicInterpolant, Interpolant, Triangle, _Math as Math, Spherical, Cylindrical, Plane, Frustum, Sphere, Ray, Matrix4, Matrix3, Box3, Box2, Line3, Euler, Vector4, Vector3, Vector2, Quaternion, Color, ImmediateRenderObject, VertexNormalsHelper, SpotLightHelper, SkeletonHelper, PointLightHelper, RectAreaLightHelper, HemisphereLightHelper, GridHelper, PolarGridHelper, FaceNormalsHelper, DirectionalLightHelper, CameraHelper, BoxHelper, Box3Helper, PlaneHelper, ArrowHelper, AxesHelper, Shape, Path, ShapePath, Font, CurvePath, Curve, ShapeUtils, WebGLUtils, WireframeGeometry, ParametricGeometry, ParametricBufferGeometry, TetrahedronGeometry, TetrahedronBufferGeometry, OctahedronGeometry, OctahedronBufferGeometry, IcosahedronGeometry, IcosahedronBufferGeometry, DodecahedronGeometry, DodecahedronBufferGeometry, PolyhedronGeometry, PolyhedronBufferGeometry, TubeGeometry, TubeBufferGeometry, TorusKnotGeometry, TorusKnotBufferGeometry, TorusGeometry, TorusBufferGeometry, TextGeometry, TextBufferGeometry, SphereGeometry, SphereBufferGeometry, RingGeometry, RingBufferGeometry, PlaneGeometry, PlaneBufferGeometry, LatheGeometry, LatheBufferGeometry, ShapeGeometry, ShapeBufferGeometry, ExtrudeGeometry, ExtrudeBufferGeometry, EdgesGeometry, ConeGeometry, ConeBufferGeometry, CylinderGeometry, CylinderBufferGeometry, CircleGeometry, CircleBufferGeometry, BoxGeometry, BoxBufferGeometry, ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, LineDashedMaterial, LineBasicMaterial, Material, Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute, ArcCurve, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, EllipseCurve, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, BoxGeometry as CubeGeometry, Face4, LineStrip, LinePieces, MeshFaceMaterial, MultiMaterial, PointCloud, Particle, ParticleSystem, PointCloudMaterial, ParticleBasicMaterial, ParticleSystemMaterial, Vertex, DynamicBufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, ClosedSplineCurve3, SplineCurve3, Spline, AxisHelper, BoundingBoxHelper, EdgesHelper, WireframeHelper, XHRLoader, BinaryTextureLoader, GeometryUtils, ImageUtils, Projector, CanvasRenderer, SceneUtils, LensFlare };\n","'use strict';\n\n/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","'use strict';\n\nvar iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","'use strict';\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","'use strict';\n\n\"use strict\"\n\nfunction dupe_array(count, value, i) {\n  var c = count[i]|0\n  if(c <= 0) {\n    return []\n  }\n  var result = new Array(c), j\n  if(i === count.length-1) {\n    for(j=0; j<c; ++j) {\n      result[j] = value\n    }\n  } else {\n    for(j=0; j<c; ++j) {\n      result[j] = dupe_array(count, value, i+1)\n    }\n  }\n  return result\n}\n\nfunction dupe_number(count, value) {\n  var result, i\n  result = new Array(count)\n  for(i=0; i<count; ++i) {\n    result[i] = value\n  }\n  return result\n}\n\nfunction dupe(count, value) {\n  if(typeof value === \"undefined\") {\n    value = 0\n  }\n  switch(typeof count) {\n    case \"number\":\n      if(count > 0) {\n        return dupe_number(count|0, value)\n      }\n    break\n    case \"object\":\n      if(typeof (count.length) === \"number\") {\n        return dupe_array(count, value, 0)\n      }\n    break\n  }\n  return []\n}\n\nmodule.exports = dupe","'use strict';\n\n/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\"; \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n","'use strict';\n\n'use strict'\n\nvar bits = require('bit-twiddle')\nvar dup = require('dup')\n\n//Legacy pool support\nif(!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n      UINT8   : dup([32, 0])\n    , UINT16  : dup([32, 0])\n    , UINT32  : dup([32, 0])\n    , INT8    : dup([32, 0])\n    , INT16   : dup([32, 0])\n    , INT32   : dup([32, 0])\n    , FLOAT   : dup([32, 0])\n    , DOUBLE  : dup([32, 0])\n    , DATA    : dup([32, 0])\n    , UINT8C  : dup([32, 0])\n    , BUFFER  : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar POOL = global.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}","'use strict';\n\n\"use strict\"\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n","'use strict';\n\n\"use strict\"\n\nvar createThunk = require(\"./lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n","'use strict';\n\n\"use strict\"\n\nvar compile = require(\"cwise-compiler\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n","'use strict';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * Source: https://github.com/mrdoob/three.js/blob/master/examples/js/controls/PointerLockControls.js\n *\n * Adopted to common js by Javier Zapata\n */\n\nmodule.exports = function ( camera ) {\n\n  var THREE = window.THREE || require('three');\n\n  var scope = this;\n\n  camera.rotation.set( 0, 0, 0 );\n\n  var pitchObject = new THREE.Object3D();\n  pitchObject.add( camera );\n\n  var yawObject = new THREE.Object3D();\n  yawObject.position.y = 10;\n  yawObject.add( pitchObject );\n\n  var moveForward = false;\n  var moveBackward = false;\n  var moveLeft = false;\n  var moveRight = false;\n\n  var isOnObject = false;\n  var canJump = false;\n\n  var prevTime = performance.now();\n\n  var velocity = new THREE.Vector3();\n\n  var PI_2 = Math.PI / 2;\n\n  var onMouseMove = function ( event ) {\n\n    if ( scope.enabled === false ) return;\n\n    var movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n    var movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n\n    yawObject.rotation.y += movementX * 0.002;\n    pitchObject.rotation.x += movementY * 0.002;\n\n    pitchObject.rotation.x = Math.max( - PI_2, Math.min( PI_2, pitchObject.rotation.x ) );\n\n  };\n\n  var onKeyDown = function ( event ) {\n\n    switch ( event.keyCode ) {\n\n      case 38: // up\n      case 87: // w\n        moveForward = true;\n        break;\n\n      case 37: // left\n      case 65: // a\n        moveLeft = true; break;\n\n      case 40: // down\n      case 83: // s\n        moveBackward = true;\n        break;\n\n      case 39: // right\n      case 68: // d\n        moveRight = true;\n        break;\n\n      case 32: // space\n        if ( canJump === true ) velocity.y += 350;\n        canJump = false;\n        break;\n\n    }\n\n  };\n\n  var onKeyUp = function ( event ) {\n\n    switch( event.keyCode ) {\n\n      case 38: // up\n      case 87: // w\n        moveForward = false;\n        break;\n\n      case 37: // left\n      case 65: // a\n        moveLeft = false;\n        break;\n\n      case 40: // down\n      case 83: // s\n        moveBackward = false;\n        break;\n\n      case 39: // right\n      case 68: // d\n        moveRight = false;\n        break;\n\n    }\n\n  };\n\n  document.addEventListener( 'mousemove', onMouseMove, false );\n  document.addEventListener( 'keydown', onKeyDown, false );\n  document.addEventListener( 'keyup', onKeyUp, false );\n\n  this.enabled = false;\n\n  this.getObject = function () {\n\n    return yawObject;\n\n  };\n\n  this.isOnObject = function ( boolean ) {\n\n    isOnObject = boolean;\n    canJump = boolean;\n\n  };\n\n  this.getDirection = function() {\n\n    // assumes the camera itself is not rotated\n\n    var direction = new THREE.Vector3( 0, 0, -1 );\n    var rotation = new THREE.Euler( 0, 0, 0, \"YXZ\" );\n\n    return function( v ) {\n\n      rotation.set( pitchObject.rotation.x, yawObject.rotation.y, 0 );\n\n      v.copy( direction ).applyEuler( rotation );\n\n      return v;\n\n    };\n\n  }();\n\n  this.update = function () {\n\n    if ( scope.enabled === false ) return;\n\n    var time = performance.now();\n    var delta = ( time - prevTime ) / 1000;\n\n    velocity.x -= velocity.x * 10.0 * delta;\n    velocity.z -= velocity.z * 10.0 * delta;\n\n    velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass\n\n    if ( moveForward ) velocity.z -= 400.0 * delta;\n    if ( moveBackward ) velocity.z += 400.0 * delta;\n\n    if ( moveLeft ) velocity.x -= 400.0 * delta;\n    if ( moveRight ) velocity.x += 400.0 * delta;\n\n    if ( isOnObject === true ) {\n      velocity.y = Math.max( 0, velocity.y );\n    }\n\n    yawObject.translateX( velocity.x * delta );\n    yawObject.translateY( velocity.y * delta );\n    yawObject.translateZ( velocity.z * delta );\n\n    if ( yawObject.position.y < 10 ) {\n\n      velocity.y = 0;\n      yawObject.position.y = 10;\n\n      canJump = true;\n    }\n\n    prevTime = time;\n  };\n};","'use strict';\n\n\"use strict\"\r\n\r\nmodule.exports = gaussBlur\r\n\r\nvar ndarray = require(\"ndarray\")\r\nvar nextPow2 = require(\"next-pow-2\")\r\nvar ops = require(\"ndarray-ops\")\r\nvar fft = require(\"ndarray-fft\")\r\nvar pool = require(\"typedarray-pool\")\r\nvar cwise = require(\"cwise\")\r\nvar dup = require(\"dup\")\r\n\r\nvar gaussFilter = cwise({\r\n  \"args\": [ \"array\", \"array\", \"scalar\", \"index\", \"shape\" ],\r\n  \"pre\": function(re, im, sigma, x, n) {\r\n    this.w = new Array(sigma.length)\r\n    for(var i=0; i<sigma.length; ++i) {\r\n      if(sigma[i] < 1e-6) {\r\n        this.w[i] = 0.0\r\n      } else {\r\n        this.w[i] = -2*Math.pow(Math.PI * sigma[i] / n[i], 2)\r\n      }\r\n    }\r\n  },\r\n  \"body\": function multiplyGaussian(re, im, sigma, x, n) {\r\n    var c = 0.0\r\n    for(var i=0; i<sigma.length; ++i) {\r\n      var d = 0.5 * n[i] - Math.abs(0.5*n[i] - x[i])\r\n      c += this.w[i] * d * d\r\n    }\r\n    var w = Math.exp(c)\r\n    re *= w\r\n    im *= w\r\n  }\r\n})\r\n\r\nfunction gaussBlur(arr, sigma, wrap) {\r\n  var padded = new Array(arr.dimension)\r\n  var nsize = 1\r\n  if(!Array.isArray(wrap)) {\r\n    wrap = dup(arr.dimension, !!wrap)\r\n  }\r\n  if(!Array.isArray(sigma)) {\r\n    sigma = dup(arr.dimension, sigma)\r\n  }\r\n  for(var i=0; i<arr.dimension; ++i) {\r\n    if(wrap[i]) {\r\n      padded[i] = arr.shape[i]\r\n    } else {\r\n      padded[i] = nextPow2(arr.shape[i] + 2*Math.ceil(3*sigma[i]))\r\n    }\r\n    nsize *= padded[i]\r\n  }\r\n  var re = ndarray(pool.mallocDouble(nsize), padded)\r\n  var re_top = re.hi.apply(re, arr.shape.slice())\r\n  var im = ndarray(pool.mallocDouble(nsize), padded)\r\n  ops.assigns(re, 0.0)\r\n  ops.assign(re_top, arr)\r\n  ops.assigns(im, 0.0)\r\n  fft(1, re, im)\r\n  gaussFilter(re, im, sigma)  \r\n  fft(-1, re, im)\r\n  ops.assign(arr, re_top)\r\n  pool.freeDouble(re)\r\n  pool.freeDouble(im)\r\n  return arr\r\n}","'use strict';\n\nexport default {\n\t    terrainColor ( face, geometry, v1, v2, v3, scale = 1 ) {\n\t\n\t        const z1 = geometry.vertices[v1].z;\n\t        const z2 = geometry.vertices[v2].z;\n\t        const z3 = geometry.vertices[v3].z;\n\t    \n\t        const level_1 =  1*scale;\n\t        const level_2 =  0;\n\t        const level_3 = -1*scale;\n\t        const level_4 = -2*scale;\n\t    \n\t        if      (isUnder( z1, z2, z3, level_1 )) grass(face);\n\t        else if (isUnder( z1, z2, z3, level_2 )) grassSand(face);\n\t        else if (isUnder( z1, z2, z3, level_3 )) sand(face);\n\t        else if (isUnder( z1, z2, z3, level_4 )) waterSand(face);\n\t        else                                     water(face);\n\t    },\n\t\n\t    waterColor (face) {\n\t\t\tconst r1 = Math.random() / 10;\n\t\t\tconst r2 = Math.random() / 10;\n\t\t\tconst r3 = Math.random() / 10;\n\t\t\t// const r1 = 0;\n\t\t\t// const r2 = 0;\n\t\t\t// const r3 = 0;\n\t\t\tface.color.setRGB(0.0 + r1, 0.3 + r2, 0.9 + r3);\n\t\t}\n\t};\n\t\n\tfunction isUnder ( z1, z2, z3, level ) {\n\t    if (z1 >= level || z1 >= level || z3 >= level) {\n\t        return true;\n\t    }\n\t}\n\t\n\tfunction water (face) {\n\t    const r1 = (Math.random() / 10);\n\t    const r2 = (Math.random() / 10);\n\t    const r3 = (Math.random() / 10);\n\t    face.color.setRGB(0.3 + r1, 0.3 + r2, 0.8 + r3);\n\t}\n\t\n\tfunction grass (face) {\n\t    const r1 = (Math.random() / 10);\n\t    const r2 = (Math.random() / 10);\n\t    const r3 = (Math.random() / 10);\n\t    face.color.setRGB(0.2 + r1, 0.8 + r2, 0.1 + r3);\n\t}\n\t\n\tfunction sand (face) {\n\t    const r1 = (Math.random() / 20);\n\t    const r2 = (Math.random() / 30);\n\t    const r3 = (Math.random() / 10);\n\t    face.color.setRGB(0.95 + r1, 0.7 + r2, 0.6 + r3);\n\n\t}\n\t\n\tfunction grassSand (face) {\n\t    const r1 = (Math.random() / 10);\n\t    const r2 = (Math.random() / 10);\n\t    const r3 = (Math.random() / 10);\n\t    face.color.setRGB(r1 + 0.7, r2 + 0.8, r3 + 0.2);\n\t}\n\t\n\tfunction waterSand (face) {\n\t    const r1 = (Math.random() / 10);\n\t    const r2 = (Math.random() / 10);\n\t    const r3 = (Math.random() / 10);\n\t    face.color.setRGB(0.4 + r1, 0.5 + r2, 0.7 + r3);\n\t}\n\t","'use strict';\n\n// adopted from https://github.com/Ian-Parberry Generate With Perlin Noise\n// perlin.h, perlin.cpp\n\nconst B = 0x100;  // Perlin's B, a power of 2 usually equal to 256.\nconst BM = 0xff;  // A bit mask, one less than B.\nconst N = 0x1000; // Perlin's N.\nconst g_fMu = 1.02; // gradient magnitude exponent\nconst FM_SQRT2 = Math.sqrt(2); // square root of 2\n\nconst lerp = (t, a, b) => a + t * (b - a);\nconst s_curve = (t) => t * t * (3 - 2 * t);\n\n// Perlin's setup macro. Must be done manually.\n/*\n#define setup(i,b0,b1,r0,r1)\\\n  t = vec[i] + N;\\\n  b0 = ((int)t) & BM;\\\n  b1 = (b0+1) & BM;\\\n  r0 = t - (int)t;\\\n  r1 = r0 - 1.0f;\n*/\nconst at2 = (q, rx, ry) => rx * q[0] + ry * q[1];\n\nconst p = new Int32Array(B); // Perlin's permutation table\nconst _g2 = new Float32Array(B*2); // Perlin's gradient table\nconst get_g2 = (x, y) => _g2[x + y * 2];\nconst set_g2 = (x, y, v) => { _g2[x + y * 2] = v; }\nconst m = new Float32Array(B); // Ian Parberry's gradient magnitude table\n\n// works in-place on v\nconst normalize2 = (v) => {\n  let s = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  v[0] /= s;\n  v[1] /= s;\n}\n\n// random float in range (-1, 1)\nconst randomflt = () => 2 * Math.random() - 1;\n\n////////////////////////////////////\n// initPerlin2D\n(function() {\n  // random gradient vectors\n  for (let i = 0; i < B; i++) {\n    const x = randomflt();\n    const y = randomflt();\n    // normalize\n    let s = Math.sqrt(x * x + y * y);\n    set_g2(i, 0, x / s);\n    set_g2(i, 1, y / s);\n  }\n\n  // random permutations\n  for (let i = 0; i < B; i++) {\n    p[i] = i; // identity permutation\n  }\n\n  // randomly transpose\n  for (let i = B - 1; i > 0; i--) {\n    const newi = Math.floor(Math.random() * B);\n    const temp = p[i];\n    p[i] = p[newi];\n    p[newi] = temp;\n  }\n\n  // gradient magnitude array\n  let s = 1.0;\n  for (let i = 0; i < B; i++) {\n    m[i] = s;\n    s /= g_fMu;\n  }\n})();\n////////////////////////////////////\n\nfunction noise2(vec) {\n  let bx0, bx1, by0, by1;\n  let rx0, rx1, ry0, ry1, q, t;\n\n  // setup x\n  t = vec[0] + N; bx0 = Math.floor(t) & BM;\n  bx1 = (bx0 + 1) & BM; rx0 = t - Math.floor(t);\n  rx1 = rx0 - 1;\n  // setup y\n  t = vec[1] + N; by0 = Math.floor(t) & BM;\n  by1 = (by0 + 1) & BM; ry0 = t - Math.floor(t);\n  ry1 = ry0 - 1;\n\n  let b00 = p[(p[bx0] + by0) & BM];\n  let b10 = p[(p[bx1] + by0) & BM];\n  let b01 = p[(p[bx0] + by1) & BM];\n  let b11 = p[(p[bx1] + by1) & BM];\n\n  let sx = s_curve(rx0);\n\n  let u, v;\n  q = [get_g2(b00, 0), get_g2(b00, 1)]; u = m[b00] * at2(q, rx0, ry0);\n  q = [get_g2(b10, 0), get_g2(b10, 1)]; v = m[b10] * at2(q, rx1, ry0);\n  let a = lerp(sx, u, v);\n\n  q = [get_g2(b01, 0), get_g2(b01, 1)]; u = m[b01] * at2(q, rx0, ry1);\n  q = [get_g2(b11, 0), get_g2(b11, 1)]; v = m[b11] * at2(q, rx1, ry1);\n  let b = lerp(sx, u, v);\n\n  let sy = s_curve(ry0);\n  return lerp(sy, a, b);\n}\n\nexport default function PerlinNoise2D (x, y, n) {\n  let sum = 0;\n  let scale = 1;\n  let p = [x, y];\n  for (let i = 0; i < n; i++) { // for each octave\n    scale *= 0.5; // apply persistence\n    sum += noise2(p) * scale; // add octave of noise\n    p[0] *= 2; p[1] *= 2; // apply lacunarity\n  }\n  return FM_SQRT2 * sum / (1 - scale);\n}","'use strict';\n\nimport * as THREE from \"three\";\n\nexport const TerrainTypes = {\n  NONE: 0,\n  DEEP_WATER: 1,\n  SHALLOW_WATER: 2,\n  LOW_LAND: 3,\n  HIGH_LAND: 4,\n  SAND: 5,\n  DRY_LAND: 6,\n  MEDIUM_LAND: 7\n};\n\nexport const TerrainColors = {};\nTerrainColors[TerrainTypes.NONE] = [1, 0, 1];\nTerrainColors[TerrainTypes.DEEP_WATER] = [0, 0, 0xAA/256];\nTerrainColors[TerrainTypes.SHALLOW_WATER] = [0, 0.2, 0xCC/256];\n// TerrainColors[TerrainTypes.DRY_LAND] = [.6, .75, .2];\nTerrainColors[TerrainTypes.LOW_LAND] = [.6, .7, .2];\nTerrainColors[TerrainTypes.MEDIUM_LAND] = [130/255, 155/255, 32/255];\nTerrainColors[TerrainTypes.HIGH_LAND] = [94/255, 124/255, 51/255];\n// TerrainColors[TerrainTypes.SAND] = [.8, .8, .3];\n\n\nTerrainColors[TerrainTypes.LOW_LAND] = [.55, .75, .15];\nTerrainColors[TerrainTypes.DRY_LAND] = [.7, .8, .2];\nTerrainColors[TerrainTypes.SAND] = [.9, .86, .58];\n\nexport function Perturb(rgb) {\n  return [rgb[0] + Math.random()/10,\n          rgb[1] + Math.random()/10,\n          rgb[2] + Math.random()/10];\n}\n\n// perturbs colors a bit\nexport function GetTileColor(terrtype) {\n  const origcol = TerrainColors[terrtype];\n  return new THREE.Color(...Perturb(origcol));\n}","'use strict';\n\nimport SimplexNoise from \"simplex-noise\";\nimport PerlinNoise2D from \"./exponential-perlin.js\";\nimport { TerrainTypes } from \"./constants.js\";\nimport * as ndarray from \"ndarray\";\nimport * as gaussian from \"ndarray-gaussian-filter\";\n\nfunction lerp(a, b, t) {\n  return (1 - t)* a + t * b;\n}\n\nconst noise = new SimplexNoise();\n\n// From https://cmaher.github.io/posts/working-with-simplex-noise/\nfunction octaves(it, x, y, z, persist, scale, low, high) {\n  let maxAmp = 0;\n  let amp = 1;\n  let freq = scale;\n  let out = 0;\n\n  for (let i = 0; i < it; i++) {\n    out += noise.noise3D(x * freq, y * freq, z) * amp;\n    maxAmp += amp;\n    amp *= persist;\n    freq *= 2;\n  }\n  out /= maxAmp;\n  out = out * (high - low) / 2 + (high + low) / 2\n  return out;\n}\n\n// Accepting an integer width and height\n// Return a (w, h) heightmap.\nexport default function MakeTerrain(w, h, scale) {\n  const OCEAN_HUMIDITY = 4;\n  const height = new Array(w * h);\n  const types = new Array(w * h);\n  let humidity1 = new Float32Array(w * h);\n  for (let x = 0; x < w; x++) {\n    for (let y = 0; y < h; y++) {\n      // ~-20 to 20 for some reason\n      let z = PerlinNoise2D(x * scale , y * scale, 8) * 100;\n      height[x + y * w] = z;\n      humidity1[x + y * w] = octaves(4, x, y, 0.1, 0.5, 0.05, 0, 10) + (z < 0 ? OCEAN_HUMIDITY : 0);\n    }\n  }\n\n  let rainfall = new Float32Array(w * h);\n  let humidity2 = new Float32Array(w * h);\n  // LET'S DO RAIN SHADOWS\n  // Every tick, wind blows towards +x.\n  // Pick up water over oceans, drop water when rising in elevation.\n  for (let i = 0; i < w; i++) {\n    for (let x = 0; x < w; x++) {\n      for (let y = 0; y < h; y++) {\n        const INDEX = x + y * w;\n        const z = height[INDEX];\n        let X = (x == 0 ? w - 1 : x - 1);\n        humidity2[INDEX] = humidity1[X + y * w]; // + (z < 0 ? OCEAN_HUMIDITY : 0);\n        let dropped = 0;\n        if (z > 0 && humidity2[INDEX] > .1) {\n          humidity2[INDEX] -= .1;\n          dropped += .1;\n        }\n        if (z > 0 && humidity2[INDEX] > 50 - z) {\n          dropped = (humidity2[INDEX] - (50 - z))  *.1;\n          humidity2[INDEX] -= dropped;\n        }\n        rainfall[INDEX] += dropped;\n      }\n    }\n    const temp = humidity1;\n    humidity1 = humidity2;\n    humidity2 = temp;\n  }\n  // Do blurring\n  let arr = ndarray(rainfall, [w, h]);\n  arr = gaussian(arr, 5, true);\n\n  // For now just color by altitude\n  for (let i = 0; i < w * h; i++) {\n    let h = arr.get(i % w, Math.floor(i / w));\n    if (height[i] < .5) types[i] = TerrainTypes.SAND;\n    else if (h < 10) types[i] = TerrainTypes.DRY_LAND;\n    else if (h < 20) types[i] = TerrainTypes.LOW_LAND;\n    else if (h < 40) types[i] = TerrainTypes.MEDIUM_LAND;\n    else types[i] = TerrainTypes.HIGH_LAND;\n  }\n\n  const typefunc = function(x, y) { return this.types[x + y * w]; };\n  typefunc.types = types;\n\n  return {z: (x, y) => height[x + y * w], t: typefunc};\n}","'use strict';\n\nimport * as THREE from \"three\";\nimport { TerrainColors, GetTileColor, Perturb } from \"./constants.js\";\n\nfunction averagecolor(rgb1, rgb2, rgb3) {\n    return [\n        (rgb1[0] + rgb2[0] + rgb3[0])/3,\n        (rgb1[1] + rgb2[1] + rgb3[1])/3,\n        (rgb1[2] + rgb2[2] + rgb3[2])/3\n    ]\n}\n\nexport default function genTriangleStripGeometry ( rows, cols, noise, color, constantmode, scale = 1 ) {\n    const geometry = new THREE.Geometry();\n    _buildVertices( geometry, noise, color, scale, rows, cols );\n    _buildFaces( geometry, color, rows, cols, constantmode );\n    return geometry;\n}\n\nfunction _buildVertices ( geometry, noise, color, scale, rows, cols ) {\n    for ( let i = 0; i <= rows; i++ ) {\n        for ( let j = 0; j <= cols; j++ ) {\n            const z = noise(j, i);\n            const vector3 = new THREE.Vector3( j*scale, i*scale, z*scale );\n            geometry.vertices.push( vector3 );\n            // geometry.colors.push( GetTileColor(color(i, j)) );\n        }\n    }\n}\n\nfunction _buildFaces ( geometry, color, rows, cols, constantmode ) {\n    for ( let j = 0; j < rows; j++ ) {\n        for ( let i = 0; i < cols; i++ ) {\n            const face1 = _genFace1( geometry, color, i, j, cols+1, constantmode );\n            const face2 = _genFace2( geometry, color, i, j, rows+1, cols+1, constantmode );\n            geometry.faces.push( face1, face2 );\n        }\n    }\n}\n\nfunction _setcol(face, v1, v2, v3, types, geometry) {\n    // Find the majority\n    const t1 = types.types[v1];\n    const t2 = types.types[v2];\n    const t3 = types.types[v3];\n\n    let colors = {}\n    colors[t1] = 1;\n    if (t2 in colors) colors[t2] += 1; else colors[t2] = 1;\n    if (t3 in colors) colors[t3] += 1; else colors[t3] = 1;\n    let maxtype = t1;\n    let maxcount = colors[t1];\n    for (let type in colors) {\n        if (colors.hasOwnProperty(type)) {\n            if (maxcount < colors[type]) {\n                maxtype = type;\n                maxcount = colors[type];\n            }\n        }\n    }\n    const col = TerrainColors[maxtype];\n    face.color = (new THREE.Color()).fromArray(Perturb(col));\n}\n\nfunction _genFace1 ( geometry, color, i, j, cols, constantmode ) {\n    const v1 = ( j*cols ) + ( i );\n    const v2 = ( j*cols ) + ( i + 1 );\n    const v3 = ( j*cols ) + ( cols + i );\n    const face = new THREE.Face3( v1, v2, v3 );\n    // Lookup colors\n    if (constantmode) {\n        color(face, geometry, v1, v2, v3);\n    } else {\n        _setcol(face, v1, v2, v3, color, geometry);\n    }\n    return face;\n}\n\nfunction _genFace2 ( geometry, color, i, j, rows, cols, constantmode ) {\n    const v1 = ( rows*cols ) - ( j*cols ) - ( i+1 );\n    const v2 = ( rows*cols ) - ( j*cols ) - ( i+2 );\n    const v3 = ( rows*cols ) - ( ( j+1 ) * cols ) - ( i+1 );\n    const face = new THREE.Face3( v1, v2, v3 );\n    // Lookup colors\n    if (constantmode) {\n        color(face, geometry, v1, v2, v3);\n    } else {\n        _setcol(face, v1, v2, v3, color, geometry);\n    }\n    return face;\n}\n","'use strict';\n\nimport * as THREE from \"three\";\n\nimport Colors from \"./colorTerrainFace\";\nimport genTriangleStripGeometry from \"./genTriangleStripGeometry\";\nimport SimplexNoise from \"simplex-noise\";\n\nimport reposition from \"./genTerrain\";\n\nconst simplex = new SimplexNoise;\n\nconst waterNoise = {\n    z: function ( ratio, offset ) {\n        return ( i, j ) => {\n        const scaling = 0.1;\n        return simplex.noise3D(i * scaling, j * scaling, offset * scaling) / ratio;\n        // return Math.random();\n        }\n    }\n};\n\nconst waterEmissiveColor = 0x5dc0cd;\nconst waterColor = Colors.waterColor;\n\n// const waterMaterial = new THREE.MeshBasicMaterial ({\n//     side: THREE.DoubleSide,\n//     vertexColors: THREE.FaceColors,\n//     transparent: true,\n//     opacity: 0.6\n// });\n\nconst waterMaterial = new THREE.MeshLambertMaterial ({\n    // side: THREE.DoubleSide,\n    vertexColors: THREE.FaceColors,\n    transparent: true,\n    opacity: 0.75,\n    emissive: waterEmissiveColor\n});\n\n// const waterMaterial = new THREE.MeshPhysicalMaterial ({\n//     // side: THREE.DoubleSide,\n//     vertexColors: THREE.FaceColors,\n//     transparent: true,\n//     opacity: 0.75,\n//     emissive: waterEmissiveColor,\n//     clearCoat: 0.5,\n//     reflectivity: 0.75\n// });\n\nexport default function createWaterMesh( rows, cols, scale, ratio, offset ) {\n    const waterGeometry = genTriangleStripGeometry( rows, cols, waterNoise.z(ratio, offset), waterColor, true, scale );\n    const waterMesh = new THREE.Mesh( waterGeometry, waterMaterial );\n\n    waterMesh.position.set( 0, 0, 0 );\n    waterMesh.translateY( 75 );\n    waterMesh.translateZ( scale*-rows/2 );\n    waterMesh.translateX( scale*-rows/2 );\n    waterMesh.rotateX(Math.PI/2);\n\n    return [waterMesh, waterGeometry];\n}","'use strict';\n\nimport * as THREE from \"three\";\nimport Colors from \"./colorTerrainFace\";\nimport MakeTerrain from \"./terraingen.js\";\nimport genTriangleStripGeometry from \"./genTriangleStripGeometry\";\nimport createWaterMesh from \"./waterMesh\";\n\nexport default function genTerrain ( rows, cols, scale ) {\n\n    \n    /*\n        Build the geometry, material, and mesh of the terrain.\n    */\n\n    const makeTerrain = MakeTerrain( rows + 1, cols + 1, 0.025 );\n    const terrainColor = Colors.terrainColor;\n\n    // const terrainGeometry = genTriangleStripGeometry( rows, cols, makeTerrain.z, terrainColor, scale );\n    const terrainGeometry = genTriangleStripGeometry( rows, cols, makeTerrain.z, makeTerrain.t, false, scale );\n    const terrainMaterial = new THREE.MeshBasicMaterial ({\n        side: THREE.DoubleSide,\n        vertexColors: THREE.FaceColors\n        // vertexColors: THREE.VertexColors\n    });\n\n    const terrainMesh = new THREE.Mesh( terrainGeometry, terrainMaterial );\n\n    /*\n        Build the geometry, material, and mesh of the terrain's wireframe.\n    */\n\n    // const terrainWireframeGeometry = terrainGeometry;\n    // const terrainWireframeMaterial = new THREE.MeshBasicMaterial ({\n    //     color: 0x444444,\n    //     wireframe: true\n    // });\n    // const terrainWireframeMesh = new THREE.Mesh( terrainWireframeGeometry, terrainWireframeMaterial );\n    // terrainWireframeMesh.translateZ( 0.017 );\n\n    /*\n        Build the geometry, material, and mesh of the water.\n    */\n\n    // const waterNoise = {\n    //     z: function ( i, j ) {\n    //         const scaling = 0.1;\n    //         return simplex.noise2D(i * scaling, j * scaling);\n    //         // return Math.random();\n    //     }\n    // };\n    // const waterColor = Colors.waterColor;\n\n    // const waterGeometry = genTriangleStripGeometry( rows, cols, waterNoise.z, waterColor, true, scale );\n    // const waterMaterial = new THREE.MeshBasicMaterial ({\n    //     side: THREE.DoubleSide,\n    //     vertexColors: THREE.FaceColors,\n    //     transparent: true,\n    //     opacity: 0.75\n    // });\n    // const waterMesh = new THREE.Mesh( waterGeometry, waterMaterial );\n\n    // const waterMesh = createWaterMesh( rows, cols, scale, 0 );\n    /*\n        Group the three together, and reposition them before returning.\n    */\n\n    const terrain = new THREE.Group();\n    terrain.add( terrainMesh );\n    // terrain.add( terrainWireframeMesh );\n    // terrain.add( waterMesh );\n    reposition( terrain, rows, cols, scale );\n    return terrain;\n}\n\nexport function reposition ( terrain, rows, cols, scale ) {\n    terrain.position.set( 0, 0, 0 );\n    terrain.translateY( 75 );\n    terrain.translateZ( scale*-rows/2 );\n    terrain.translateX( scale*-rows/2 );\n    terrain.rotateX(Math.PI/2);\n}\n","'use strict';\n\nimport genTerrain from \"./genTerrain\";\nimport SimplexNoise from \"simplex-noise\";\nimport * as THREE from \"three\";\nimport PointerLockControls from \"./three-pointerlock\";\nimport { DDSLoader } from \"three-addons\";\nimport MakeTerrain from \"./terraingen.js\";\nimport createWaterMesh from \"./waterMesh\";\n\ndocument.addEventListener(\"DOMContentLoaded\", start);\n\nconst terrainWidth = 200;\nconst terrainHeight = terrainWidth;\nconst scale = 4;\n\nvar camera, scene, renderer, controls;\nvar objects = [];\nvar raycaster, container, content;\nvar controlsEnabled = false;\nvar moveForward = false;\nvar moveBackward = false;\nvar moveLeft = false;\nvar moveRight = false;\nvar moveUp = false;\nvar moveDown = false;\nvar canJump = false;\nvar velocity, direction;\nvar prevTime = performance.now();\n\n// let terrain;\nconst waterRatio = 4;\nlet waterMesh, waterGeometry;\nconst waterWidth = terrainWidth / waterRatio;\nconst waterHeight = waterWidth;\nconst waterScale = scale * waterRatio;\nlet offset = 0.0;\nlet frameCount = 0;\n\nconst fogColor = 0xcbecff;\n// const fogColor = 0xed5628;\n\nfunction start() {\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // This section just checks if the libraries and APIs are compatible with the user's browser\n\n  container = document.getElementById(\"container\");\n  content = document.getElementById(\"content\");\n\n  var element = document.body;\n\n  var pointerlockchange = function ( event ) {\n    if (\n      document.pointerLockElement === element || \n      document.mozPointerLockElement === element ||\n      document.webkitPointerLockElement === element) {\n      controlsEnabled = true;\n      controls.enabled = true;\n      container.style.display = 'none';\n    } else {\n      controls.enabled = false;\n      container.style.display = 'flex';\n      content.style.display = '';\n    }\n  } ;\n\n  var pointerlockerror = function (event) {\n    content.style.display = '';\n  };\n\n  document.addEventListener( 'pointerlockchange', pointerlockchange, false );\n  document.addEventListener( 'mozpointerlockchange', pointerlockchange, false );\n  document.addEventListener( 'webkitpointerlockchange', pointerlockchange, false );\n\n  document.addEventListener( 'pointerlockerror', pointerlockerror, false );\n  document.addEventListener( 'mozpointerlockerror', pointerlockerror, false );\n  document.addEventListener( 'webkitpointerlockerror', pointerlockerror, false );\n\n  content.addEventListener( 'click', function ( event ) {\n    content.style.display = 'none';\n\n    element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\n    element.requestPointerLock();\n  }, false );\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  init(); // this is the function where we initialize all shapes, lights, directions, and the camera\n  animate(); // this is the function where we animate motion\n\n  prevTime = performance.now();\n  // for the speed of the motion\n  velocity = new THREE.Vector3();\n  direction = new THREE.Vector3();\n}\n\nfunction init() {\n  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 4000 ); // create a camera\n\n  // Create a scene with a black background\n  scene = new THREE.Scene();\n  scene.fog = new THREE.FogExp2( fogColor, 0.0007 );\n  scene.background = new THREE.Color( fogColor );\n\n  // Connect camera to first person view\n  controls = new PointerLockControls(camera);\n  scene.add(controls.getObject());\n\n  // If the user presses the key, move in the specified direction\n  var onKeyDown = function ( event ) {\n  if (event.keyCode == 38 || event.keyCode == 87) {\n    moveForward = true;\n  }\n\n  if (event.keyCode == 37 || event.keyCode == 65)\n  {\n    moveRight = true;\n  }\n\n  if (event.keyCode == 40 || event.keyCode == 83)\n  {\n    moveBackward = true;\n  }\n\n  if (event.keyCode == 39 || event.keyCode == 68)\n  {\n    moveLeft = true;\n  }\n\n  if (event.keyCode == 16) { // 'shift'\n    moveDown = true;\n  }\n\n  if (event.keyCode == 32) { // 'space'\n    moveUp = true;\n  }\n\n  if (event.keyCode == 32)\n  {\n    // if ( canJump === true )\n    //   velocity.y += 350;\n    // canJump = false;\n  }\n  };\n\n  // If the user lets go of the key, stop moving\n  var onKeyUp = function ( event ) {\n    if (event.keyCode == 38 || event.keyCode == 87) {\n      moveForward = false;\n    }\n\n    if (event.keyCode == 37 || event.keyCode == 65) {\n      moveRight = false;\n    }\n\n    if (event.keyCode == 40 || event.keyCode == 83) {\n      moveBackward = false;\n    }\n\n    if (event.keyCode == 39 || event.keyCode == 68) {\n      moveLeft = false;\n    }\n\n    if (event.keyCode == 16) { // 'shift'\n      moveDown = false;\n    }\n\n    if (event.keyCode == 32) { // 'space'\n      moveUp = false;\n    }\n  };\n\n  document.addEventListener( 'keydown', onKeyDown, false );\n  document.addEventListener( 'keyup', onKeyUp, false );\n\n  raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 20);\n\n  // This is where the triangle strip is defined\n  // const terrainWidth = 100;\n  // const terrainHeight = terrainWidth;\n\n  const terrain = genTerrain( terrainWidth, terrainHeight, scale );\n  [waterMesh, waterGeometry] = createWaterMesh( waterHeight, waterWidth, waterScale, waterRatio, offset );\n  // terrain = genTerrain(terrainWidth, terrainHeight, 1 );\n  scene.add( waterMesh );\n  scene.add( terrain );\n  \n\n  // Add a light to the scene\n\n  var light = new THREE.AmbientLight( 0x404040 ); // soft white light\n  scene.add( light );\n\n  var directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );\n  scene.add( directionalLight );\n\n  // var light2= new THREE.SpotLight( 0xffffff);\n  // light2.position.set(100, 100, 0 );\n\n  // light2.angle = Math.PI;\n  // light2.penumbra = 0.05;\n  // light2.decay = 2;\n\n  // light2.castShadow = true;\n\n  // light2.shadow.mapSize.width = 1000;\n  // light2.shadow.mapSize.height = 4000;\n\n  // light2.shadow.camera.near = 10;\n  // light2.shadow.camera.far = 4000;\n  // light2.shadow.camera.fov = 90;\n\n  // scene.add(light2);\n\n  // Add a renderer to ensure that the graphics display properly\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio( window.devicePixelRatio );\n  renderer.setSize( window.innerWidth, window.innerHeight );\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  renderer.domElement.id = 'canvas';\n\n  window.addEventListener('resize', function () {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n  });\n  // renderer.domElement.style.filter = 'blur(10px)';\n\n  document.body.appendChild( renderer.domElement );\n\n\n  renderer.render(scene, camera);\n}\n\nfunction animate()\n{\n  requestAnimationFrame( animate );\n  frameCount++;\n\n  camera.position.set(0, 0, 0);\n  camera.rotation.z = Math.PI;\n  // Set movement speed\n  if (controlsEnabled === true) {\n    raycaster.ray.origin.copy(controls.getObject().position);\n    raycaster.ray.origin.y -= 10;\n\n    var intersections = raycaster.intersectObjects(objects);\n\n    var onObject = intersections.length > 0;\n\n    var time = performance.now();\n    var delta = ( time - prevTime ) / 1000;\n\n    velocity.x -= velocity.x * 10.0 * delta;\n    velocity.z -= velocity.z * 10.0 * delta;\n    velocity.y -= velocity.y * 10.0 * delta;\n\n    // velocity.y -= 9.8 * 100.0 * delta;\n\n    direction.z = Number( moveForward ) - Number( moveBackward );\n    direction.x = Number( moveLeft ) - Number( moveRight );\n    direction.y = Number( moveUp ) - Number( moveDown );\n    // direction.normalize();\n\n    if ( moveForward || moveBackward ) velocity.z -= direction.z * 500.0 * delta;\n    if ( moveLeft || moveRight ) velocity.x -= direction.x * 500.0 * delta;\n    if ( moveUp || moveDown ) velocity.y -= direction.y * 500.0 * delta;\n\n    // if ( onObject === true ) {\n    //   velocity.y = Math.max( 0, velocity.y );\n    //   canJump = true;\n    // }\n\n    controls.getObject().translateX( velocity.x * delta );\n    controls.getObject().translateY( velocity.y * delta );\n    controls.getObject().translateZ( velocity.z * delta );\n\n    // if ( controls.getObject().position.y < 10 ) {\n    //   velocity.y = 0;\n    //   controls.getObject().position.y = 10;\n\n    //   canJump = true;\n    // }\n\n    prevTime = time;\n\n  }\n\n  if (frameCount % 6 < 0.1) {\n    scene.remove(waterMesh);\n\n    [waterMesh, waterGeometry] = createWaterMesh( waterHeight, waterWidth, waterScale, waterRatio, offset );\n    waterGeometry.dispose();\n\n    scene.add(waterMesh);\n    offset += 0.15;\n  } \n\n  renderer.render(scene, camera);\n}\n","'use strict';\n\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.THREE_ADDONS=t():e.THREE_ADDONS=t()}(this,function(){return function(e){function t(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var i={};return t.m=e,t.c=i,t.d=function(e,i,r){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,\"a\",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=1)}([function(e,t,i){\"use strict\";function r(){}function n(e,t){this.x=e||0,this.y=t||0}function a(e,t,i,r,o,s,c,l,u,h){Object.defineProperty(this,\"id\",{value:Xo++}),this.uuid=Wo.generateUUID(),this.name=\"\",this.image=void 0!==e?e:a.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:a.DEFAULT_MAPPING,this.wrapS=void 0!==i?i:Ya,this.wrapT=void 0!==r?r:Ya,this.magFilter=void 0!==o?o:$a,this.minFilter=void 0!==s?s:to,this.anisotropy=void 0!==u?u:1,this.format=void 0!==c?c:go,this.type=void 0!==l?l:io,this.offset=new n(0,0),this.repeat=new n(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==h?h:Oo,this.version=0,this.onUpdate=null}function o(e,t,i,r){this.x=e||0,this.y=t||0,this.z=i||0,this.w=void 0!==r?r:1}function s(e,t,i){this.uuid=Wo.generateUUID(),this.width=e,this.height=t,this.scissor=new o(0,0,e,t),this.scissorTest=!1,this.viewport=new o(0,0,e,t),i=i||{},void 0===i.minFilter&&(i.minFilter=$a),this.texture=new a(void 0,void 0,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0===i.stencilBuffer||i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null}function c(e,t,i){s.call(this,e,t,i),this.activeCubeFace=0,this.activeMipMapLevel=0}function l(e,t,i,r){this._x=e||0,this._y=t||0,this._z=i||0,this._w=void 0!==r?r:1}function u(e,t,i){this.x=e||0,this.y=t||0,this.z=i||0}function h(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}function d(e,t,i,r,n,o,s,c,l,u,h,d){a.call(this,null,o,s,c,l,u,r,n,h,d),this.image={data:e,width:t,height:i},this.magFilter=void 0!==l?l:Ja,this.minFilter=void 0!==u?u:Ja,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function p(e,t,i,r,n,o,s,c,l,u){e=void 0!==e?e:[],t=void 0!==t?t:Ga,a.call(this,e,t,i,r,n,o,s,c,l,u),this.flipY=!1}function f(){this.seq=[],this.map={}}function m(e,t,i){var r=e[0];if(r<=0||r>0)return e;var n=t*i,a=Zo[n];if(void 0===a&&(a=new Float32Array(n),Zo[n]=a),0!==t){r.toArray(a,0);for(var o=1,s=0;o!==t;++o)s+=i,e[o].toArray(a,s)}return a}function v(e,t){var i=Jo[t];void 0===i&&(i=new Int32Array(t),Jo[t]=i);for(var r=0;r!==t;++r)i[r]=e.allocTextureUnit();return i}function g(e,t){e.uniform1f(this.addr,t)}function y(e,t){e.uniform1i(this.addr,t)}function x(e,t){void 0===t.x?e.uniform2fv(this.addr,t):e.uniform2f(this.addr,t.x,t.y)}function _(e,t){void 0!==t.x?e.uniform3f(this.addr,t.x,t.y,t.z):void 0!==t.r?e.uniform3f(this.addr,t.r,t.g,t.b):e.uniform3fv(this.addr,t)}function b(e,t){void 0===t.x?e.uniform4fv(this.addr,t):e.uniform4f(this.addr,t.x,t.y,t.z,t.w)}function w(e,t){e.uniformMatrix2fv(this.addr,!1,t.elements||t)}function M(e,t){void 0===t.elements?e.uniformMatrix3fv(this.addr,!1,t):(Qo.set(t.elements),e.uniformMatrix3fv(this.addr,!1,Qo))}function E(e,t){void 0===t.elements?e.uniformMatrix4fv(this.addr,!1,t):(Ko.set(t.elements),e.uniformMatrix4fv(this.addr,!1,Ko))}function S(e,t,i){var r=i.allocTextureUnit();e.uniform1i(this.addr,r),i.setTexture2D(t||qo,r)}function T(e,t,i){var r=i.allocTextureUnit();e.uniform1i(this.addr,r),i.setTextureCube(t||Yo,r)}function A(e,t){e.uniform2iv(this.addr,t)}function L(e,t){e.uniform3iv(this.addr,t)}function C(e,t){e.uniform4iv(this.addr,t)}function R(e){switch(e){case 5126:return g;case 35664:return x;case 35665:return _;case 35666:return b;case 35674:return w;case 35675:return M;case 35676:return E;case 35678:case 36198:return S;case 35680:return T;case 5124:case 35670:return y;case 35667:case 35671:return A;case 35668:case 35672:return L;case 35669:case 35673:return C}}function P(e,t){e.uniform1fv(this.addr,t)}function D(e,t){e.uniform1iv(this.addr,t)}function U(e,t){e.uniform2fv(this.addr,m(t,this.size,2))}function I(e,t){e.uniform3fv(this.addr,m(t,this.size,3))}function N(e,t){e.uniform4fv(this.addr,m(t,this.size,4))}function O(e,t){e.uniformMatrix2fv(this.addr,!1,m(t,this.size,4))}function F(e,t){e.uniformMatrix3fv(this.addr,!1,m(t,this.size,9))}function z(e,t){e.uniformMatrix4fv(this.addr,!1,m(t,this.size,16))}function B(e,t,i){var r=t.length,n=v(i,r);e.uniform1iv(this.addr,n);for(var a=0;a!==r;++a)i.setTexture2D(t[a]||qo,n[a])}function G(e,t,i){var r=t.length,n=v(i,r);e.uniform1iv(this.addr,n);for(var a=0;a!==r;++a)i.setTextureCube(t[a]||Yo,n[a])}function V(e){switch(e){case 5126:return P;case 35664:return U;case 35665:return I;case 35666:return N;case 35674:return O;case 35675:return F;case 35676:return z;case 35678:return B;case 35680:return G;case 5124:case 35670:return D;case 35667:case 35671:return A;case 35668:case 35672:return L;case 35669:case 35673:return C}}function H(e,t,i){this.id=e,this.addr=i,this.setValue=R(t.type)}function j(e,t,i){this.id=e,this.addr=i,this.size=t.size,this.setValue=V(t.type)}function k(e){this.id=e,f.call(this)}function W(e,t){e.seq.push(t),e.map[t.id]=t}function X(e,t,i){var r=e.name,n=r.length;for($o.lastIndex=0;;){var a=$o.exec(r),o=$o.lastIndex,s=a[1],c=\"]\"===a[2],l=a[3];if(c&&(s|=0),void 0===l||\"[\"===l&&o+2===n){W(i,void 0===l?new H(s,e,t):new j(s,e,t));break}var u=i.map,h=u[s];void 0===h&&(h=new k(s),W(i,h)),i=h}}function q(e,t,i){f.call(this),this.renderer=i;for(var r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=0;n<r;++n){var a=e.getActiveUniform(t,n),o=a.name;X(a,e.getUniformLocation(t,o),this)}}function Y(e,t,i){return void 0===t&&void 0===i?this.set(e):this.setRGB(e,t,i)}function Z(e,t){this.min=void 0!==e?e:new n(1/0,1/0),this.max=void 0!==t?t:new n(-1/0,-1/0)}function J(e,t,i,r,a){function o(){var e=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),r=new Uint16Array([0,1,2,0,2,3]);c=t.createBuffer(),l=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,c),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,l),t.bufferData(t.ELEMENT_ARRAY_BUFFER,r,t.STATIC_DRAW),m=t.createTexture(),v=t.createTexture(),i.bindTexture(t.TEXTURE_2D,m),t.texImage2D(t.TEXTURE_2D,0,t.RGB,16,16,0,t.RGB,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),i.bindTexture(t.TEXTURE_2D,v),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,16,16,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),h={vertexShader:[\"uniform lowp int renderType;\",\"uniform vec3 screenPosition;\",\"uniform vec2 scale;\",\"uniform float rotation;\",\"uniform sampler2D occlusionMap;\",\"attribute vec2 position;\",\"attribute vec2 uv;\",\"varying vec2 vUV;\",\"varying float vVisibility;\",\"void main() {\",\"vUV = uv;\",\"vec2 pos = position;\",\"if ( renderType == 2 ) {\",\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\"vVisibility =        visibility.r / 9.0;\",\"vVisibility *= 1.0 - visibility.g / 9.0;\",\"vVisibility *=       visibility.b / 9.0;\",\"vVisibility *= 1.0 - visibility.a / 9.0;\",\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\"}\",\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform lowp int renderType;\",\"uniform sampler2D map;\",\"uniform float opacity;\",\"uniform vec3 color;\",\"varying vec2 vUV;\",\"varying float vVisibility;\",\"void main() {\",\"if ( renderType == 0 ) {\",\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\"} else if ( renderType == 1 ) {\",\"gl_FragColor = texture2D( map, vUV );\",\"} else {\",\"vec4 texture = texture2D( map, vUV );\",\"texture.a *= opacity * vVisibility;\",\"gl_FragColor = texture;\",\"gl_FragColor.rgb *= color;\",\"}\",\"}\"].join(\"\\n\")},d=s(h),p={vertex:t.getAttribLocation(d,\"position\"),uv:t.getAttribLocation(d,\"uv\")},f={renderType:t.getUniformLocation(d,\"renderType\"),map:t.getUniformLocation(d,\"map\"),occlusionMap:t.getUniformLocation(d,\"occlusionMap\"),opacity:t.getUniformLocation(d,\"opacity\"),color:t.getUniformLocation(d,\"color\"),scale:t.getUniformLocation(d,\"scale\"),rotation:t.getUniformLocation(d,\"rotation\"),screenPosition:t.getUniformLocation(d,\"screenPosition\")}}function s(e){var i=t.createProgram(),r=t.createShader(t.FRAGMENT_SHADER),n=t.createShader(t.VERTEX_SHADER),o=\"precision \"+a.precision+\" float;\\n\";return t.shaderSource(r,o+e.fragmentShader),t.shaderSource(n,o+e.vertexShader),t.compileShader(r),t.compileShader(n),t.attachShader(i,r),t.attachShader(i,n),t.linkProgram(i),i}var c,l,h,d,p,f,m,v;this.render=function(e,a,s,h){if(0!==e.length){var g=new u,y=h.w/h.z,x=.5*h.z,_=.5*h.w,b=16/h.w,w=new n(b*y,b),M=new u(1,1,0),E=new n(1,1),S=new Z;S.min.set(h.x,h.y),S.max.set(h.x+(h.z-16),h.y+(h.w-16)),void 0===d&&o(),i.useProgram(d),i.initAttributes(),i.enableAttribute(p.vertex),i.enableAttribute(p.uv),i.disableUnusedAttributes(),t.uniform1i(f.occlusionMap,0),t.uniform1i(f.map,1),t.bindBuffer(t.ARRAY_BUFFER,c),t.vertexAttribPointer(p.vertex,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(p.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,l),i.disable(t.CULL_FACE),i.buffers.depth.setMask(!1);for(var T=0,A=e.length;T<A;T++){b=16/h.w,w.set(b*y,b);var L=e[T];if(g.set(L.matrixWorld.elements[12],L.matrixWorld.elements[13],L.matrixWorld.elements[14]),g.applyMatrix4(s.matrixWorldInverse),g.applyMatrix4(s.projectionMatrix),M.copy(g),E.x=h.x+M.x*x+x-8,E.y=h.y+M.y*_+_-8,!0===S.containsPoint(E)){i.activeTexture(t.TEXTURE0),i.bindTexture(t.TEXTURE_2D,null),i.activeTexture(t.TEXTURE1),i.bindTexture(t.TEXTURE_2D,m),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGB,E.x,E.y,16,16,0),t.uniform1i(f.renderType,0),t.uniform2f(f.scale,w.x,w.y),t.uniform3f(f.screenPosition,M.x,M.y,M.z),i.disable(t.BLEND),i.enable(t.DEPTH_TEST),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),i.activeTexture(t.TEXTURE0),i.bindTexture(t.TEXTURE_2D,v),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGBA,E.x,E.y,16,16,0),t.uniform1i(f.renderType,1),i.disable(t.DEPTH_TEST),i.activeTexture(t.TEXTURE1),i.bindTexture(t.TEXTURE_2D,m),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),L.positionScreen.copy(M),L.customUpdateCallback?L.customUpdateCallback(L):L.updateLensFlares(),t.uniform1i(f.renderType,2),i.enable(t.BLEND);for(var C=0,R=L.lensFlares.length;C<R;C++){var P=L.lensFlares[C];P.opacity>.001&&P.scale>.001&&(M.x=P.x,M.y=P.y,M.z=P.z,b=P.size*P.scale/h.w,w.x=b*y,w.y=b,t.uniform3f(f.screenPosition,M.x,M.y,M.z),t.uniform2f(f.scale,w.x,w.y),t.uniform1f(f.rotation,P.rotation),t.uniform1f(f.opacity,P.opacity),t.uniform3f(f.color,P.color.r,P.color.g,P.color.b),i.setBlending(P.blending,P.blendEquation,P.blendSrc,P.blendDst),r.setTexture2D(P.texture,1),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}}}i.enable(t.CULL_FACE),i.enable(t.DEPTH_TEST),i.buffers.depth.setMask(!0),i.reset()}}}function K(e,t,i,r,n,o,s,c,l){a.call(this,e,t,i,r,n,o,s,c,l),this.needsUpdate=!0}function Q(e,t,i,r,n){function a(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),i=new Uint16Array([0,1,2,0,2,3]);c=t.createBuffer(),h=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,c),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,h),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.STATIC_DRAW),d=o(),p={position:t.getAttribLocation(d,\"position\"),uv:t.getAttribLocation(d,\"uv\")},f={uvOffset:t.getUniformLocation(d,\"uvOffset\"),uvScale:t.getUniformLocation(d,\"uvScale\"),rotation:t.getUniformLocation(d,\"rotation\"),scale:t.getUniformLocation(d,\"scale\"),color:t.getUniformLocation(d,\"color\"),map:t.getUniformLocation(d,\"map\"),opacity:t.getUniformLocation(d,\"opacity\"),modelViewMatrix:t.getUniformLocation(d,\"modelViewMatrix\"),projectionMatrix:t.getUniformLocation(d,\"projectionMatrix\"),fogType:t.getUniformLocation(d,\"fogType\"),fogDensity:t.getUniformLocation(d,\"fogDensity\"),fogNear:t.getUniformLocation(d,\"fogNear\"),fogFar:t.getUniformLocation(d,\"fogFar\"),fogColor:t.getUniformLocation(d,\"fogColor\"),alphaTest:t.getUniformLocation(d,\"alphaTest\")};var r=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");r.width=8,r.height=8;var n=r.getContext(\"2d\");n.fillStyle=\"white\",n.fillRect(0,0,8,8),m=new K(r)}function o(){var e=t.createProgram(),i=t.createShader(t.VERTEX_SHADER),r=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(i,[\"precision \"+n.precision+\" float;\",\"#define SHADER_NAME SpriteMaterial\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform float rotation;\",\"uniform vec2 scale;\",\"uniform vec2 uvOffset;\",\"uniform vec2 uvScale;\",\"attribute vec2 position;\",\"attribute vec2 uv;\",\"varying vec2 vUV;\",\"void main() {\",\"vUV = uvOffset + uv * uvScale;\",\"vec2 alignedPosition = position * scale;\",\"vec2 rotatedPosition;\",\"rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\",\"rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\",\"vec4 finalPosition;\",\"finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\"finalPosition.xy += rotatedPosition;\",\"finalPosition = projectionMatrix * finalPosition;\",\"gl_Position = finalPosition;\",\"}\"].join(\"\\n\")),t.shaderSource(r,[\"precision \"+n.precision+\" float;\",\"#define SHADER_NAME SpriteMaterial\",\"uniform vec3 color;\",\"uniform sampler2D map;\",\"uniform float opacity;\",\"uniform int fogType;\",\"uniform vec3 fogColor;\",\"uniform float fogDensity;\",\"uniform float fogNear;\",\"uniform float fogFar;\",\"uniform float alphaTest;\",\"varying vec2 vUV;\",\"void main() {\",\"vec4 texture = texture2D( map, vUV );\",\"if ( texture.a < alphaTest ) discard;\",\"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\"if ( fogType > 0 ) {\",\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\"float fogFactor = 0.0;\",\"if ( fogType == 1 ) {\",\"fogFactor = smoothstep( fogNear, fogFar, depth );\",\"} else {\",\"const float LOG2 = 1.442695;\",\"fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\"}\",\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\"}\",\"}\"].join(\"\\n\")),t.compileShader(i),t.compileShader(r),t.attachShader(e,i),t.attachShader(e,r),t.linkProgram(e),e}function s(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:t.id-e.id}var c,h,d,p,f,m,v=new u,g=new l,y=new u;this.render=function(n,o,l){if(0!==n.length){void 0===d&&a(),i.useProgram(d),i.initAttributes(),i.enableAttribute(p.position),i.enableAttribute(p.uv),i.disableUnusedAttributes(),i.disable(t.CULL_FACE),i.enable(t.BLEND),t.bindBuffer(t.ARRAY_BUFFER,c),t.vertexAttribPointer(p.position,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(p.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,h),t.uniformMatrix4fv(f.projectionMatrix,!1,l.projectionMatrix.elements),i.activeTexture(t.TEXTURE0),t.uniform1i(f.map,0);var u=0,x=0,_=o.fog;_?(t.uniform3f(f.fogColor,_.color.r,_.color.g,_.color.b),_.isFog?(t.uniform1f(f.fogNear,_.near),t.uniform1f(f.fogFar,_.far),t.uniform1i(f.fogType,1),u=1,x=1):_.isFogExp2&&(t.uniform1f(f.fogDensity,_.density),t.uniform1i(f.fogType,2),u=2,x=2)):(t.uniform1i(f.fogType,0),u=0,x=0);for(var b=0,w=n.length;b<w;b++){var M=n[b];M.modelViewMatrix.multiplyMatrices(l.matrixWorldInverse,M.matrixWorld),M.z=-M.modelViewMatrix.elements[14]}n.sort(s);for(var E=[],b=0,w=n.length;b<w;b++){var M=n[b],S=M.material;if(!1!==S.visible){M.onBeforeRender(e,o,l,void 0,S,void 0),t.uniform1f(f.alphaTest,S.alphaTest),t.uniformMatrix4fv(f.modelViewMatrix,!1,M.modelViewMatrix.elements),M.matrixWorld.decompose(v,g,y),E[0]=y.x,E[1]=y.y;var T=0;o.fog&&S.fog&&(T=x),u!==T&&(t.uniform1i(f.fogType,T),u=T),null!==S.map?(t.uniform2f(f.uvOffset,S.map.offset.x,S.map.offset.y),t.uniform2f(f.uvScale,S.map.repeat.x,S.map.repeat.y)):(t.uniform2f(f.uvOffset,0,0),t.uniform2f(f.uvScale,1,1)),t.uniform1f(f.opacity,S.opacity),t.uniform3f(f.color,S.color.r,S.color.g,S.color.b),t.uniform1f(f.rotation,S.rotation),t.uniform2fv(f.scale,E),i.setBlending(S.blending,S.blendEquation,S.blendSrc,S.blendDst,S.blendEquationAlpha,S.blendSrcAlpha,S.blendDstAlpha,S.premultipliedAlpha),i.buffers.depth.setTest(S.depthTest),i.buffers.depth.setMask(S.depthWrite),r.setTexture2D(S.map||m,0),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),M.onAfterRender(e,o,l,void 0,S,void 0)}}i.enable(t.CULL_FACE),i.reset()}}}function $(){Object.defineProperty(this,\"id\",{value:as++}),this.uuid=Wo.generateUUID(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.lights=!0,this.blending=ra,this.side=Jn,this.flatShading=!1,this.vertexColors=$n,this.opacity=1,this.transparent=!1,this.blendSrc=ga,this.blendDst=ya,this.blendEquation=ca,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Aa,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.userData={},this.needsUpdate=!0}function ee(e){$.call(this),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==e&&(void 0!==e.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(e))}function te(e){$.call(this),this.type=\"MeshDepthMaterial\",this.depthPacking=jo,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)}function ie(e){$.call(this),this.type=\"MeshDistanceMaterial\",this.referencePosition=new u,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(e)}function re(e,t){this.min=void 0!==e?e:new u(1/0,1/0,1/0),this.max=void 0!==t?t:new u(-1/0,-1/0,-1/0)}function ne(e,t){this.center=void 0!==e?e:new u,this.radius=void 0!==t?t:0}function ae(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}function oe(e,t){this.normal=void 0!==e?e:new u(1,0,0),this.constant=void 0!==t?t:0}function se(e,t,i,r,n,a){this.planes=[void 0!==e?e:new oe,void 0!==t?t:new oe,void 0!==i?i:new oe,void 0!==r?r:new oe,void 0!==n?n:new oe,void 0!==a?a:new oe]}function ce(e,t,i){function r(t,i,r,n,a,o){var s=t.geometry,c=null,l=x,u=t.customDepthMaterial;if(r&&(l=_,u=t.customDistanceMaterial),u)c=u;else{var h=!1;i.morphTargets&&(s&&s.isBufferGeometry?h=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(h=s.morphTargets&&s.morphTargets.length>0)),t.isSkinnedMesh&&!1===i.skinning&&console.warn(\"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\",t);var d=t.isSkinnedMesh&&i.skinning,p=0;h&&(p|=v),d&&(p|=g),c=l[p]}if(e.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){var f=c.uuid,m=i.uuid,y=b[f];void 0===y&&(y={},b[f]=y);var w=y[m];void 0===w&&(w=c.clone(),y[m]=w),c=w}c.visible=i.visible,c.wireframe=i.wireframe;var M=i.side;return R.renderSingleSided&&M==Qn&&(M=Jn),R.renderReverseSided&&(M===Jn?M=Kn:M===Kn&&(M=Jn)),c.side=M,c.clipShadows=i.clipShadows,c.clippingPlanes=i.clippingPlanes,c.clipIntersection=i.clipIntersection,c.wireframeLinewidth=i.wireframeLinewidth,c.linewidth=i.linewidth,r&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(n),c.nearDistance=a,c.farDistance=o),c}function a(i,n,o,s){if(!1!==i.visible){if(i.layers.test(n.layers)&&(i.isMesh||i.isLine||i.isPoints)&&i.castShadow&&(!i.frustumCulled||c.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,i.matrixWorld);var l=t.update(i),u=i.material;if(Array.isArray(u))for(var h=l.groups,d=0,p=h.length;d<p;d++){var f=h[d],v=u[f.materialIndex];if(v&&v.visible){var g=r(i,v,s,m,o.near,o.far);e.renderBufferDirect(o,null,l,g,i,f)}}else if(u.visible){var g=r(i,u,s,m,o.near,o.far);e.renderBufferDirect(o,null,l,g,i,null)}}for(var y=i.children,x=0,_=y.length;x<_;x++)a(y[x],n,o,s)}}for(var c=new se,l=new h,d=new n,p=new n(i,i),f=new u,m=new u,v=1,g=2,y=1+(v|g),x=new Array(y),_=new Array(y),b={},w=[new u(1,0,0),new u(-1,0,0),new u(0,0,1),new u(0,0,-1),new u(0,1,0),new u(0,-1,0)],M=[new u(0,1,0),new u(0,1,0),new u(0,1,0),new u(0,1,0),new u(0,0,1),new u(0,0,-1)],E=[new o,new o,new o,new o,new o,new o],S=0;S!==y;++S){var T=0!=(S&v),A=0!=(S&g),L=new te({depthPacking:ko,morphTargets:T,skinning:A});x[S]=L;var C=new ie({morphTargets:T,skinning:A});_[S]=C}var R=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Yn,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(t,i,r){if(!1!==R.enabled&&(!1!==R.autoUpdate||!1!==R.needsUpdate)&&0!==t.length){var n=e.context,o=e.state;o.disable(n.BLEND),o.buffers.color.setClear(1,1,1,1),o.buffers.depth.setTest(!0),o.setScissorTest(!1);for(var u,h=0,v=t.length;h<v;h++){var g=t[h],y=g.shadow,x=g&&g.isPointLight;if(void 0!==y){var _=y.camera;if(d.copy(y.mapSize),d.min(p),x){var b=d.x,S=d.y;E[0].set(2*b,S,b,S),E[1].set(0,S,b,S),E[2].set(3*b,S,b,S),E[3].set(b,S,b,S),E[4].set(3*b,0,b,S),E[5].set(b,0,b,S),d.x*=4,d.y*=2}if(null===y.map){var T={minFilter:Ja,magFilter:Ja,format:go};y.map=new s(d.x,d.y,T),y.map.texture.name=g.name+\".shadowMap\",_.updateProjectionMatrix()}y.isSpotLightShadow&&y.update(g);var A=y.map,L=y.matrix;m.setFromMatrixPosition(g.matrixWorld),_.position.copy(m),x?(u=6,L.makeTranslation(-m.x,-m.y,-m.z)):(u=1,f.setFromMatrixPosition(g.target.matrixWorld),_.lookAt(f),_.updateMatrixWorld(),L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),L.multiply(_.projectionMatrix),L.multiply(_.matrixWorldInverse)),e.setRenderTarget(A),e.clear();for(var C=0;C<u;C++){if(x){f.copy(_.position),f.add(w[C]),_.up.copy(M[C]),_.lookAt(f),_.updateMatrixWorld();var P=E[C];o.viewport(P)}l.multiplyMatrices(_.projectionMatrix,_.matrixWorldInverse),c.setFromMatrix(l),a(i,r,_,x)}}else console.warn(\"THREE.WebGLShadowMap:\",g,\"has no shadow.\")}R.needsUpdate=!1}}}function le(e){function t(t,i){var r=t.array,n=t.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW,a=e.createBuffer();e.bindBuffer(i,a),e.bufferData(i,r,n),t.onUploadCallback();var o=e.FLOAT;return r instanceof Float32Array?o=e.FLOAT:r instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):r instanceof Uint16Array?o=e.UNSIGNED_SHORT:r instanceof Int16Array?o=e.SHORT:r instanceof Uint32Array?o=e.UNSIGNED_INT:r instanceof Int32Array?o=e.INT:r instanceof Int8Array?o=e.BYTE:r instanceof Uint8Array&&(o=e.UNSIGNED_BYTE),{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}function i(t,i,r){var n=i.array,a=i.updateRange;e.bindBuffer(r,t),!1===i.dynamic?e.bufferData(r,n,e.STATIC_DRAW):-1===a.count?e.bufferSubData(r,0,n):0===a.count?console.error(\"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"):(e.bufferSubData(r,a.offset*n.BYTES_PER_ELEMENT,n.subarray(a.offset,a.offset+a.count)),a.count=-1)}function r(e){return e.isInterleavedBufferAttribute&&(e=e.data),o[e.uuid]}function n(t){t.isInterleavedBufferAttribute&&(t=t.data);var i=o[t.uuid];i&&(e.deleteBuffer(i.buffer),delete o[t.uuid])}function a(e,r){e.isInterleavedBufferAttribute&&(e=e.data);var n=o[e.uuid];void 0===n?o[e.uuid]=t(e,r):n.version<e.version&&(i(n.buffer,e,r),n.version=e.version)}var o={};return{get:r,remove:n,update:a}}function ue(e,t,i,r){this._x=e||0,this._y=t||0,this._z=i||0,this._order=r||ue.DefaultOrder}function he(){this.mask=1}function de(){function e(){n.setFromEuler(r,!1)}function t(){r.setFromQuaternion(n,void 0,!1)}Object.defineProperty(this,\"id\",{value:os++}),this.uuid=Wo.generateUUID(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=de.DefaultUp.clone();var i=new u,r=new ue,n=new l,a=new u(1,1,1);r.onChange(e),n.onChange(t),Object.defineProperties(this,{position:{enumerable:!0,value:i},rotation:{enumerable:!0,value:r},quaternion:{enumerable:!0,value:n},scale:{enumerable:!0,value:a},modelViewMatrix:{value:new h},normalMatrix:{value:new ae}}),this.matrix=new h,this.matrixWorld=new h,this.matrixAutoUpdate=de.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new he,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function pe(){de.call(this),this.type=\"Camera\",this.matrixWorldInverse=new h,this.projectionMatrix=new h}function fe(e,t,i,r,n,a){pe.call(this),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=r,this.near=void 0!==n?n:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function me(e,t,i,r){pe.call(this),this.type=\"PerspectiveCamera\",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==i?i:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function ve(e,t,i,r,n,a){this.a=e,this.b=t,this.c=i,this.normal=r&&r.isVector3?r:new u,this.vertexNormals=Array.isArray(r)?r:[],this.color=n&&n.isColor?n:new Y,this.vertexColors=Array.isArray(n)?n:[],this.materialIndex=void 0!==a?a:0}function ge(){return ss++}function ye(){Object.defineProperty(this,\"id\",{value:ge()}),this.uuid=Wo.generateUUID(),this.name=\"\",this.type=\"Geometry\",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function xe(e,t,i){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.uuid=Wo.generateUUID(),this.name=\"\",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===i,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function _e(e,t){xe.call(this,new Int8Array(e),t)}function be(e,t){xe.call(this,new Uint8Array(e),t)}function we(e,t){xe.call(this,new Uint8ClampedArray(e),t)}function Me(e,t){xe.call(this,new Int16Array(e),t)}function Ee(e,t){xe.call(this,new Uint16Array(e),t)}function Se(e,t){xe.call(this,new Int32Array(e),t)}function Te(e,t){xe.call(this,new Uint32Array(e),t)}function Ae(e,t){xe.call(this,new Float32Array(e),t)}function Le(e,t){xe.call(this,new Float64Array(e),t)}function Ce(){this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Re(e){if(0===e.length)return-1/0;for(var t=e[0],i=1,r=e.length;i<r;++i)e[i]>t&&(t=e[i]);return t}function Pe(){Object.defineProperty(this,\"id\",{value:ge()}),this.uuid=Wo.generateUUID(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}function De(e,t,i,r,n,a){ye.call(this),this.type=\"BoxGeometry\",this.parameters={width:e,height:t,depth:i,widthSegments:r,heightSegments:n,depthSegments:a},this.fromBufferGeometry(new Ue(e,t,i,r,n,a)),this.mergeVertices()}function Ue(e,t,i,r,n,a){function o(e,t,i,r,n,a,o,m,v,g,y){var x,_,b=a/v,w=o/g,M=a/2,E=o/2,S=m/2,T=v+1,A=g+1,L=0,C=0,R=new u;for(_=0;_<A;_++){var P=_*w-E;for(x=0;x<T;x++){var D=x*b-M;R[e]=D*r,R[t]=P*n,R[i]=S,l.push(R.x,R.y,R.z),R[e]=0,R[t]=0,R[i]=m>0?1:-1,h.push(R.x,R.y,R.z),d.push(x/v),d.push(1-_/g),L+=1}}for(_=0;_<g;_++)for(x=0;x<v;x++){var U=p+x+T*_,I=p+x+T*(_+1),N=p+(x+1)+T*(_+1),O=p+(x+1)+T*_;c.push(U,I,O),c.push(I,N,O),C+=6}s.addGroup(f,C,y),f+=C,p+=L}Pe.call(this),this.type=\"BoxBufferGeometry\",this.parameters={width:e,height:t,depth:i,widthSegments:r,heightSegments:n,depthSegments:a};var s=this;r=Math.floor(r)||1,n=Math.floor(n)||1,a=Math.floor(a)||1;var c=[],l=[],h=[],d=[],p=0,f=0;o(\"z\",\"y\",\"x\",-1,-1,i,t,e,a,n,0),o(\"z\",\"y\",\"x\",1,-1,i,t,-e,a,n,1),o(\"x\",\"z\",\"y\",1,1,e,i,t,r,a,2),o(\"x\",\"z\",\"y\",1,-1,e,i,-t,r,a,3),o(\"x\",\"y\",\"z\",1,-1,e,t,i,r,n,4),o(\"x\",\"y\",\"z\",-1,-1,e,t,-i,r,n,5),this.setIndex(c),this.addAttribute(\"position\",new Ae(l,3)),this.addAttribute(\"normal\",new Ae(h,3)),this.addAttribute(\"uv\",new Ae(d,2))}function Ie(e,t,i,r){ye.call(this),this.type=\"PlaneGeometry\",this.parameters={width:e,height:t,widthSegments:i,heightSegments:r},this.fromBufferGeometry(new Ne(e,t,i,r)),this.mergeVertices()}function Ne(e,t,i,r){Pe.call(this),this.type=\"PlaneBufferGeometry\",this.parameters={width:e,height:t,widthSegments:i,heightSegments:r};var n,a,o=e/2,s=t/2,c=Math.floor(i)||1,l=Math.floor(r)||1,u=c+1,h=l+1,d=e/c,p=t/l,f=[],m=[],v=[],g=[];for(a=0;a<h;a++){var y=a*p-s;for(n=0;n<u;n++){var x=n*d-o;m.push(x,-y,0),v.push(0,0,1),g.push(n/c),g.push(1-a/l)}}for(a=0;a<l;a++)for(n=0;n<c;n++){var _=n+u*a,b=n+u*(a+1),w=n+1+u*(a+1),M=n+1+u*a;f.push(_,b,M),f.push(b,w,M)}this.setIndex(f),this.addAttribute(\"position\",new Ae(m,3)),this.addAttribute(\"normal\",new Ae(v,3)),this.addAttribute(\"uv\",new Ae(g,2))}function Oe(e){$.call(this),this.type=\"MeshBasicMaterial\",this.color=new Y(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)}function Fe(e,t){this.origin=void 0!==e?e:new u,this.direction=void 0!==t?t:new u}function ze(e,t){this.start=void 0!==e?e:new u,this.end=void 0!==t?t:new u}function Be(e,t,i){this.a=void 0!==e?e:new u,this.b=void 0!==t?t:new u,this.c=void 0!==i?i:new u}function Ge(e,t){de.call(this),this.type=\"Mesh\",this.geometry=void 0!==e?e:new Pe,this.material=void 0!==t?t:new Oe({color:16777215*Math.random()}),this.drawMode=Uo,this.updateMorphTargets()}function Ve(e,t,i,r){function n(t,r,n,h){var d=r.background;null===d?a(l,u):d&&d.isColor&&(a(d,1),h=!0),(e.autoClear||h)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),d&&d.isCubeTexture?(void 0===c&&(c=new Ge(new Ue(1,1,1),new ee({uniforms:ns.cube.uniforms,vertexShader:ns.cube.vertexShader,fragmentShader:ns.cube.fragmentShader,side:Kn,depthTest:!0,depthWrite:!1,polygonOffset:!0,fog:!1})),c.geometry.removeAttribute(\"normal\"),c.geometry.removeAttribute(\"uv\"),c.onBeforeRender=function(e,t,i){var r=i.far;this.matrixWorld.makeScale(r,r,r),this.matrixWorld.copyPosition(i.matrixWorld),this.material.polygonOffsetUnits=10*r},i.update(c.geometry)),c.material.uniforms.tCube.value=d,t.push(c,c.geometry,c.material,0,null)):d&&d.isTexture&&(void 0===o&&(o=new fe(-1,1,1,-1,0,1),s=new Ge(new Ne(2,2),new Oe({depthTest:!1,depthWrite:!1,fog:!1})),i.update(s.geometry)),s.material.map=d,e.renderBufferDirect(o,null,s.geometry,s.material,s,null))}function a(e,i){t.buffers.color.setClear(e.r,e.g,e.b,i,r)}var o,s,c,l=new Y(0),u=0;return{getClearColor:function(){return l},setClearColor:function(e,t){l.set(e),u=void 0!==t?t:1,a(l,u)},getClearAlpha:function(){return u},setClearAlpha:function(e){u=e,a(l,u)},render:n}}function He(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program&&t.program&&e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function je(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function ke(){function e(){n=0,a.length=0,o.length=0}function t(e,t,i,s,c){var l=r[n];void 0===l?(l={id:e.id,object:e,geometry:t,material:i,program:i.program,renderOrder:e.renderOrder,z:s,group:c},r[n]=l):(l.id=e.id,l.object=e,l.geometry=t,l.material=i,l.program=i.program,l.renderOrder=e.renderOrder,l.z=s,l.group=c),(!0===i.transparent?o:a).push(l),n++}function i(){a.length>1&&a.sort(He),o.length>1&&o.sort(je)}var r=[],n=0,a=[],o=[];return{opaque:a,transparent:o,init:e,push:t,sort:i}}function We(){function e(e,t){var r=e.id+\",\"+t.id,n=i[r];return void 0===n&&(n=new ke,i[r]=n),n}function t(){i={}}var i={};return{get:e,dispose:t}}function Xe(e,t){return Math.abs(t[1])-Math.abs(e[1])}function qe(e){function t(t,n,a,o){var s=t.morphTargetInfluences,c=s.length,l=i[n.id];if(void 0===l){l=[];for(var u=0;u<c;u++)l[u]=[u,0];i[n.id]=l}for(var h=a.morphTargets&&n.morphAttributes.position,d=a.morphNormals&&n.morphAttributes.normal,u=0;u<c;u++){var p=l[u];0!==p[1]&&(h&&n.removeAttribute(\"morphTarget\"+u),d&&n.removeAttribute(\"morphNormal\"+u))}for(var u=0;u<c;u++){var p=l[u];p[0]=u,p[1]=s[u]}l.sort(Xe);for(var u=0;u<8;u++){var p=l[u];if(p){var f=p[0],m=p[1];if(m){h&&n.addAttribute(\"morphTarget\"+u,h[f]),d&&n.addAttribute(\"morphNormal\"+u,d[f]),r[u]=m;continue}}r[u]=0}o.getUniforms().setValue(e,\"morphTargetInfluences\",r)}var i={},r=new Float32Array(8);return{update:t}}function Ye(e,t,i){function r(e){s=e}function n(e){c=e.type,l=e.bytesPerElement}function a(t,r){e.drawElements(s,r,c,t*l),i.calls++,i.vertices+=r,s===e.TRIANGLES?i.faces+=r/3:s===e.POINTS&&(i.points+=r)}function o(r,n,a){var o=t.get(\"ANGLE_instanced_arrays\");if(null===o)return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");o.drawElementsInstancedANGLE(s,a,c,n*l,r.maxInstancedCount),i.calls++,i.vertices+=a*r.maxInstancedCount,s===e.TRIANGLES?i.faces+=r.maxInstancedCount*a/3:s===e.POINTS&&(i.points+=r.maxInstancedCount*a)}var s,c,l;this.setMode=r,this.setIndex=n,this.render=a,this.renderInstances=o}function Ze(e,t,i){function r(e){o=e}function n(t,r){e.drawArrays(o,t,r),i.calls++,i.vertices+=r,o===e.TRIANGLES?i.faces+=r/3:o===e.POINTS&&(i.points+=r)}function a(r,n,a){var s=t.get(\"ANGLE_instanced_arrays\");if(null===s)return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");var c=r.attributes.position;c.isInterleavedBufferAttribute?(a=c.data.count,s.drawArraysInstancedANGLE(o,0,a,r.maxInstancedCount)):s.drawArraysInstancedANGLE(o,n,a,r.maxInstancedCount),i.calls++,i.vertices+=a*r.maxInstancedCount,o===e.TRIANGLES?i.faces+=r.maxInstancedCount*a/3:o===e.POINTS&&(i.points+=r.maxInstancedCount*a)}var o;this.setMode=r,this.render=n,this.renderInstances=a}function Je(e,t,i){function r(e){var n=e.target,a=s[n.id];null!==a.index&&t.remove(a.index);for(var o in a.attributes)t.remove(a.attributes[o]);n.removeEventListener(\"dispose\",r),delete s[n.id];var l=c[n.id];l&&(t.remove(l),delete c[n.id]),l=c[a.id],l&&(t.remove(l),delete c[a.id]),i.geometries--}function n(e,t){var n=s[t.id];return n||(t.addEventListener(\"dispose\",r),t.isBufferGeometry?n=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new Pe).setFromObject(e)),n=t._bufferGeometry),s[t.id]=n,i.geometries++,n)}function a(i){var r=i.index,n=i.attributes;null!==r&&t.update(r,e.ELEMENT_ARRAY_BUFFER);for(var a in n)t.update(n[a],e.ARRAY_BUFFER);var o=i.morphAttributes;for(var a in o)for(var s=o[a],c=0,l=s.length;c<l;c++)t.update(s[c],e.ARRAY_BUFFER)}function o(i){var r=c[i.id];if(r)return r;var n=[],a=i.index,o=i.attributes;if(null!==a)for(var s=a.array,l=0,u=s.length;l<u;l+=3){var h=s[l+0],d=s[l+1],p=s[l+2];n.push(h,d,d,p,p,h)}else for(var s=o.position.array,l=0,u=s.length/3-1;l<u;l+=3){var h=l+0,d=l+1,p=l+2;n.push(h,d,d,p,p,h)}return r=new(Re(n)>65535?Te:Ee)(n,1),t.update(r,e.ELEMENT_ARRAY_BUFFER),c[i.id]=r,r}var s={},c={};return{get:n,update:a,getWireframeAttribute:o}}function Ke(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var i;switch(t.type){case\"DirectionalLight\":i={direction:new u,color:new Y,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n};break;case\"SpotLight\":i={position:new u,direction:new u,color:new Y,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n};break;case\"PointLight\":i={position:new u,color:new Y,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n,shadowCameraNear:1,shadowCameraFar:1e3};break;case\"HemisphereLight\":i={direction:new u,skyColor:new Y,groundColor:new Y};break;case\"RectAreaLight\":i={color:new Y,position:new u,halfWidth:new u,halfHeight:new u}}return e[t.id]=i,i}}}function Qe(){function e(e,o,s){for(var c=0,l=0,u=0,h=0,d=0,p=0,f=0,m=0,v=s.matrixWorldInverse,g=0,y=e.length;g<y;g++){var x=e[g],_=x.color,b=x.intensity,w=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=_.r*b,l+=_.g*b,u+=_.b*b;else if(x.isDirectionalLight){var E=t.get(x);if(E.color.copy(x.color).multiplyScalar(x.intensity),E.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(r),E.direction.transformDirection(v),E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}i.directionalShadowMap[h]=M,i.directionalShadowMatrix[h]=x.shadow.matrix,i.directional[h]=E,h++}else if(x.isSpotLight){var E=t.get(x);if(E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(_).multiplyScalar(b),E.distance=w,E.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(r),E.direction.transformDirection(v),E.coneCos=Math.cos(x.angle),E.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),E.decay=0===x.distance?0:x.decay,E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}i.spotShadowMap[p]=M,i.spotShadowMatrix[p]=x.shadow.matrix,i.spot[p]=E,p++}else if(x.isRectAreaLight){var E=t.get(x);E.color.copy(_).multiplyScalar(b/(x.width*x.height)),E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),a.identity(),n.copy(x.matrixWorld),n.premultiply(v),a.extractRotation(n),E.halfWidth.set(.5*x.width,0,0),E.halfHeight.set(0,.5*x.height,0),E.halfWidth.applyMatrix4(a),E.halfHeight.applyMatrix4(a),i.rectArea[f]=E,f++}else if(x.isPointLight){var E=t.get(x);if(E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(x.color).multiplyScalar(x.intensity),E.distance=x.distance,E.decay=0===x.distance?0:x.decay,E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize,E.shadowCameraNear=S.camera.near,E.shadowCameraFar=S.camera.far}i.pointShadowMap[d]=M,i.pointShadowMatrix[d]=x.shadow.matrix,i.point[d]=E,d++}else if(x.isHemisphereLight){var E=t.get(x);E.direction.setFromMatrixPosition(x.matrixWorld),E.direction.transformDirection(v),E.direction.normalize(),E.skyColor.copy(x.color).multiplyScalar(b),E.groundColor.copy(x.groundColor).multiplyScalar(b),i.hemi[m]=E,m++}}i.ambient[0]=c,i.ambient[1]=l,i.ambient[2]=u,i.directional.length=h,i.spot.length=p,i.rectArea.length=f,i.point.length=d,i.hemi.length=m,i.hash=h+\",\"+d+\",\"+p+\",\"+f+\",\"+m+\",\"+o.length}var t=new Ke,i={hash:\"\",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},r=new u,n=new h,a=new h;return{setup:e,state:i}}function $e(e,t){function i(i){var r=t.frame,a=i.geometry,o=e.get(i,a);return n[o.id]!==r&&(a.isGeometry&&o.updateFromObject(i),e.update(o),n[o.id]=r),o}function r(){n={}}var n={};return{update:i,clear:r}}function et(e){for(var t=e.split(\"\\n\"),i=0;i<t.length;i++)t[i]=i+1+\": \"+t[i];return t.join(\"\\n\")}function tt(e,t,i){var r=e.createShader(t);return e.shaderSource(r,i),e.compileShader(r),!1===e.getShaderParameter(r,e.COMPILE_STATUS)&&console.error(\"THREE.WebGLShader: Shader couldn't compile.\"),\"\"!==e.getShaderInfoLog(r)&&console.warn(\"THREE.WebGLShader: gl.getShaderInfoLog()\",t===e.VERTEX_SHADER?\"vertex\":\"fragment\",e.getShaderInfoLog(r),et(i)),r}function it(e){switch(e){case Oo:return[\"Linear\",\"( value )\"];case Fo:return[\"sRGB\",\"( value )\"];case Bo:return[\"RGBE\",\"( value )\"];case Go:return[\"RGBM\",\"( value, 7.0 )\"];case Vo:return[\"RGBM\",\"( value, 16.0 )\"];case Ho:return[\"RGBD\",\"( value, 256.0 )\"];case zo:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];default:throw new Error(\"unsupported encoding: \"+e)}}function rt(e,t){var i=it(t);return\"vec4 \"+e+\"( vec4 value ) { return \"+i[0]+\"ToLinear\"+i[1]+\"; }\"}function nt(e,t){var i=it(t);return\"vec4 \"+e+\"( vec4 value ) { return LinearTo\"+i[0]+i[1]+\"; }\"}function at(e,t){var i;switch(t){case Oa:i=\"Linear\";break;case Fa:i=\"Reinhard\";break;case za:i=\"Uncharted2\";break;case Ba:i=\"OptimizedCineon\";break;default:throw new Error(\"unsupported toneMapping: \"+t)}return\"vec3 \"+e+\"( vec3 color ) { return \"+i+\"ToneMapping( color ); }\"}function ot(e,t,i){return e=e||{},[e.derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap||t.flatShading?\"#extension GL_OES_standard_derivatives : enable\":\"\",(e.fragDepth||t.logarithmicDepthBuffer)&&i.get(\"EXT_frag_depth\")?\"#extension GL_EXT_frag_depth : enable\":\"\",e.drawBuffers&&i.get(\"WEBGL_draw_buffers\")?\"#extension GL_EXT_draw_buffers : require\":\"\",(e.shaderTextureLOD||t.envMap)&&i.get(\"EXT_shader_texture_lod\")?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(lt).join(\"\\n\")}function st(e){var t=[];for(var i in e){var r=e[i];!1!==r&&t.push(\"#define \"+i+\" \"+r)}return t.join(\"\\n\")}function ct(e,t,i){for(var r={},n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),a=0;a<n;a++){var o=e.getActiveAttrib(t,a),s=o.name;r[s]=e.getAttribLocation(t,s)}return r}function lt(e){return\"\"!==e}function ut(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function ht(e){function t(e,t){var i=rs[t];if(void 0===i)throw new Error(\"Can not resolve #include <\"+t+\">\");return ht(i)}var i=/^[ \\t]*#include +<([\\w\\d.]+)>/gm;return e.replace(i,t)}function dt(e){function t(e,t,i,r){for(var n=\"\",a=parseInt(t);a<parseInt(i);a++)n+=r.replace(/\\[ i \\]/g,\"[ \"+a+\" ]\");return n}var i=/for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;return e.replace(i,t)}function pt(e,t,i,r,n,a){var o=e.context,s=r.defines,c=n.vertexShader,l=n.fragmentShader,u=\"SHADOWMAP_TYPE_BASIC\";a.shadowMapType===Yn?u=\"SHADOWMAP_TYPE_PCF\":a.shadowMapType===Zn&&(u=\"SHADOWMAP_TYPE_PCF_SOFT\");var h=\"ENVMAP_TYPE_CUBE\",d=\"ENVMAP_MODE_REFLECTION\",p=\"ENVMAP_BLENDING_MULTIPLY\";if(a.envMap){switch(r.envMap.mapping){case Ga:case Va:h=\"ENVMAP_TYPE_CUBE\";break;case Wa:case Xa:h=\"ENVMAP_TYPE_CUBE_UV\";break;case Ha:case ja:h=\"ENVMAP_TYPE_EQUIREC\";break;case ka:h=\"ENVMAP_TYPE_SPHERE\"}switch(r.envMap.mapping){case Va:case ja:d=\"ENVMAP_MODE_REFRACTION\"}switch(r.combine){case Da:p=\"ENVMAP_BLENDING_MULTIPLY\";break;case Ua:p=\"ENVMAP_BLENDING_MIX\";break;case Ia:p=\"ENVMAP_BLENDING_ADD\"}}var f,m,v=e.gammaFactor>0?e.gammaFactor:1,g=ot(r.extensions,a,t),y=st(s),x=o.createProgram();r.isRawShaderMaterial?(f=[y,\"\\n\"].filter(lt).join(\"\\n\"),m=[g,y,\"\\n\"].filter(lt).join(\"\\n\")):(f=[\"precision \"+a.precision+\" float;\",\"precision \"+a.precision+\" int;\",\"#define SHADER_NAME \"+n.name,y,a.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+v,\"#define MAX_BONES \"+a.maxBones,a.useFog&&a.fog?\"#define USE_FOG\":\"\",a.useFog&&a.fogExp?\"#define FOG_EXP2\":\"\",a.map?\"#define USE_MAP\":\"\",a.envMap?\"#define USE_ENVMAP\":\"\",a.envMap?\"#define \"+d:\"\",a.lightMap?\"#define USE_LIGHTMAP\":\"\",a.aoMap?\"#define USE_AOMAP\":\"\",a.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",a.bumpMap?\"#define USE_BUMPMAP\":\"\",a.normalMap?\"#define USE_NORMALMAP\":\"\",a.displacementMap&&a.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",a.specularMap?\"#define USE_SPECULARMAP\":\"\",a.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",a.metalnessMap?\"#define USE_METALNESSMAP\":\"\",a.alphaMap?\"#define USE_ALPHAMAP\":\"\",a.vertexColors?\"#define USE_COLOR\":\"\",a.flatShading?\"#define FLAT_SHADED\":\"\",a.skinning?\"#define USE_SKINNING\":\"\",a.useVertexTexture?\"#define BONE_TEXTURE\":\"\",a.morphTargets?\"#define USE_MORPHTARGETS\":\"\",a.morphNormals&&!1===a.flatShading?\"#define USE_MORPHNORMALS\":\"\",a.doubleSided?\"#define DOUBLE_SIDED\":\"\",a.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+a.numClippingPlanes,a.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",a.shadowMapEnabled?\"#define \"+u:\"\",a.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",a.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",a.logarithmicDepthBuffer&&t.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_COLOR\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(lt).join(\"\\n\"),m=[g,\"precision \"+a.precision+\" float;\",\"precision \"+a.precision+\" int;\",\"#define SHADER_NAME \"+n.name,y,a.alphaTest?\"#define ALPHATEST \"+a.alphaTest:\"\",\"#define GAMMA_FACTOR \"+v,a.useFog&&a.fog?\"#define USE_FOG\":\"\",a.useFog&&a.fogExp?\"#define FOG_EXP2\":\"\",a.map?\"#define USE_MAP\":\"\",a.envMap?\"#define USE_ENVMAP\":\"\",a.envMap?\"#define \"+h:\"\",a.envMap?\"#define \"+d:\"\",a.envMap?\"#define \"+p:\"\",a.lightMap?\"#define USE_LIGHTMAP\":\"\",a.aoMap?\"#define USE_AOMAP\":\"\",a.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",a.bumpMap?\"#define USE_BUMPMAP\":\"\",a.normalMap?\"#define USE_NORMALMAP\":\"\",a.specularMap?\"#define USE_SPECULARMAP\":\"\",a.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",a.metalnessMap?\"#define USE_METALNESSMAP\":\"\",a.alphaMap?\"#define USE_ALPHAMAP\":\"\",a.vertexColors?\"#define USE_COLOR\":\"\",a.gradientMap?\"#define USE_GRADIENTMAP\":\"\",a.flatShading?\"#define FLAT_SHADED\":\"\",a.doubleSided?\"#define DOUBLE_SIDED\":\"\",a.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+a.numClippingPlanes,\"#define UNION_CLIPPING_PLANES \"+(a.numClippingPlanes-a.numClipIntersection),a.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",a.shadowMapEnabled?\"#define \"+u:\"\",a.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",a.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",a.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",a.logarithmicDepthBuffer&&t.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",a.envMap&&t.get(\"EXT_shader_texture_lod\")?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",a.toneMapping!==Na?\"#define TONE_MAPPING\":\"\",a.toneMapping!==Na?rs.tonemapping_pars_fragment:\"\",a.toneMapping!==Na?at(\"toneMapping\",a.toneMapping):\"\",a.dithering?\"#define DITHERING\":\"\",a.outputEncoding||a.mapEncoding||a.envMapEncoding||a.emissiveMapEncoding?rs.encodings_pars_fragment:\"\",a.mapEncoding?rt(\"mapTexelToLinear\",a.mapEncoding):\"\",a.envMapEncoding?rt(\"envMapTexelToLinear\",a.envMapEncoding):\"\",a.emissiveMapEncoding?rt(\"emissiveMapTexelToLinear\",a.emissiveMapEncoding):\"\",a.outputEncoding?nt(\"linearToOutputTexel\",a.outputEncoding):\"\",a.depthPacking?\"#define DEPTH_PACKING \"+r.depthPacking:\"\",\"\\n\"].filter(lt).join(\"\\n\")),c=ht(c),c=ut(c,a),l=ht(l),l=ut(l,a),r.isShaderMaterial||(c=dt(c),l=dt(l));var _=f+c,b=m+l,w=tt(o,o.VERTEX_SHADER,_),M=tt(o,o.FRAGMENT_SHADER,b);o.attachShader(x,w),o.attachShader(x,M),void 0!==r.index0AttributeName?o.bindAttribLocation(x,0,r.index0AttributeName):!0===a.morphTargets&&o.bindAttribLocation(x,0,\"position\"),o.linkProgram(x);var E=o.getProgramInfoLog(x),S=o.getShaderInfoLog(w),T=o.getShaderInfoLog(M),A=!0,L=!0;!1===o.getProgramParameter(x,o.LINK_STATUS)?(A=!1,console.error(\"THREE.WebGLProgram: shader error: \",o.getError(),\"gl.VALIDATE_STATUS\",o.getProgramParameter(x,o.VALIDATE_STATUS),\"gl.getProgramInfoLog\",E,S,T)):\"\"!==E?console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",E):\"\"!==S&&\"\"!==T||(L=!1),L&&(this.diagnostics={runnable:A,material:r,programLog:E,vertexShader:{log:S,prefix:f},fragmentShader:{log:T,prefix:m}}),o.deleteShader(w),o.deleteShader(M);var C;this.getUniforms=function(){return void 0===C&&(C=new q(o,x,e)),C};var R;return this.getAttributes=function(){return void 0===R&&(R=ct(o,x)),R},this.destroy=function(){o.deleteProgram(x),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\"),this.getUniforms()}},attributes:{get:function(){return console.warn(\"THREE.WebGLProgram: .attributes is now .getAttributes().\"),this.getAttributes()}}}),this.id=cs++,this.code=i,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=M,this}function ft(e,t,i){function r(e){var t=e.skeleton,r=t.bones;if(i.floatVertexTextures)return 1024;var n=i.maxVertexUniforms,a=Math.floor((n-20)/4),o=Math.min(a,r.length);return o<r.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+r.length+\" bones. This GPU supports \"+o+\".\"),0):o}function n(e,t){var i;return e?e.isTexture?i=e.encoding:e.isWebGLRenderTarget&&(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),i=e.texture.encoding):i=Oo,i===Oo&&t&&(i=zo),i}var a=[],o={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"phong\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\"},s=[\"precision\",\"supportsVertexTextures\",\"map\",\"mapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"lightMap\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"displacementMap\",\"specularMap\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"combine\",\"vertexColors\",\"fog\",\"useFog\",\"fogExp\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"maxMorphTargets\",\"maxMorphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"alphaTest\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\"];this.getParameters=function(t,a,s,c,l,u,h){var d=o[t.type],p=h.isSkinnedMesh?r(h):0,f=i.precision;null!==t.precision&&(f=i.getMaxPrecision(t.precision))!==t.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",t.precision,\"not supported, using\",f,\"instead.\");var m=e.getRenderTarget();return{shaderID:d,precision:f,supportsVertexTextures:i.vertexTextures,outputEncoding:n(m?m.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:n(t.map,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:n(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===Wa||t.envMap.mapping===Xa),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:n(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,combine:t.combine,vertexColors:t.vertexColors,fog:!!c,useFog:t.fog,fogExp:c&&c.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:i.logarithmicDepthBuffer,skinning:t.skinning&&p>0,maxBones:p,useVertexTexture:i.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:a.directional.length,numPointLights:a.point.length,numSpotLights:a.spot.length,numRectAreaLights:a.rectArea.length,numHemiLights:a.hemi.length,numClippingPlanes:l,numClipIntersection:u,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.receiveShadow&&s.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===Qn,flipSided:t.side===Kn,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,i){var r=[];if(i.shaderID?r.push(i.shaderID):(r.push(t.fragmentShader),r.push(t.vertexShader)),void 0!==t.defines)for(var n in t.defines)r.push(n),r.push(t.defines[n]);for(var a=0;a<s.length;a++)r.push(i[s[a]]);return r.push(t.onBeforeCompile.toString()),r.push(e.gammaOutput),r.join()},this.acquireProgram=function(i,r,n,o){for(var s,c=0,l=a.length;c<l;c++){var u=a[c];if(u.code===o){s=u,++s.usedTimes;break}}return void 0===s&&(s=new pt(e,t,o,i,r,n),a.push(s)),s},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=a.indexOf(e);a[t]=a[a.length-1],a.pop(),e.destroy()}},this.programs=a}function mt(e,t,i,r,n,a,o){function s(e,t){if(e.width>t||e.height>t){var i=t/Math.max(e.width,e.height),r=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");r.width=Math.floor(e.width*i),r.height=Math.floor(e.height*i);return r.getContext(\"2d\").drawImage(e,0,0,e.width,e.height,0,0,r.width,r.height),console.warn(\"THREE.WebGLRenderer: image is too big (\"+e.width+\"x\"+e.height+\"). Resized to \"+r.width+\"x\"+r.height,e),r}return e}function c(e){return Wo.isPowerOfTwo(e.width)&&Wo.isPowerOfTwo(e.height)}function l(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){var t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");t.width=Wo.nearestPowerOfTwo(e.width),t.height=Wo.nearestPowerOfTwo(e.height);return t.getContext(\"2d\").drawImage(e,0,0,t.width,t.height),console.warn(\"THREE.WebGLRenderer: image is not power of two (\"+e.width+\"x\"+e.height+\"). Resized to \"+t.width+\"x\"+t.height,e),t}return e}function u(e){return e.wrapS!==Ya||e.wrapT!==Ya||e.minFilter!==Ja&&e.minFilter!==$a}function h(e,t){return e.generateMipmaps&&t&&e.minFilter!==Ja&&e.minFilter!==$a}function d(t){return t===Ja||t===Ka||t===Qa?e.NEAREST:e.LINEAR}function p(e){var t=e.target;t.removeEventListener(\"dispose\",p),m(t),o.textures--}function f(e){var t=e.target;t.removeEventListener(\"dispose\",f),v(t),o.textures--}function m(t){var i=r.get(t);if(t.image&&i.__image__webglTextureCube)e.deleteTexture(i.__image__webglTextureCube);else{if(void 0===i.__webglInit)return;e.deleteTexture(i.__webglTexture)}r.remove(t)}function v(t){var i=r.get(t),n=r.get(t.texture);if(t){if(void 0!==n.__webglTexture&&e.deleteTexture(n.__webglTexture),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLRenderTargetCube)for(var a=0;a<6;a++)e.deleteFramebuffer(i.__webglFramebuffer[a]),i.__webglDepthbuffer&&e.deleteRenderbuffer(i.__webglDepthbuffer[a]);else e.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&e.deleteRenderbuffer(i.__webglDepthbuffer);r.remove(t.texture),r.remove(t)}}function g(t,n){var a=r.get(t);if(t.version>0&&a.__version!==t.version){var o=t.image;if(void 0===o)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\",t);else{if(!1!==o.complete)return void b(a,t,n);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\",t)}}i.activeTexture(e.TEXTURE0+n),i.bindTexture(e.TEXTURE_2D,a.__webglTexture)}function y(t,l){var u=r.get(t);if(6===t.image.length)if(t.version>0&&u.__version!==t.version){u.__image__webglTextureCube||(t.addEventListener(\"dispose\",p),u.__image__webglTextureCube=e.createTexture(),o.textures++),i.activeTexture(e.TEXTURE0+l),i.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY);for(var d=t&&t.isCompressedTexture,f=t.image[0]&&t.image[0].isDataTexture,m=[],v=0;v<6;v++)m[v]=d||f?f?t.image[v].image:t.image[v]:s(t.image[v],n.maxCubemapSize);var g=m[0],y=c(g),x=a.convert(t.format),b=a.convert(t.type);_(e.TEXTURE_CUBE_MAP,t,y);for(var v=0;v<6;v++)if(d)for(var w,M=m[v].mipmaps,E=0,S=M.length;E<S;E++)w=M[E],t.format!==go&&t.format!==vo?i.getCompressedTextureFormats().indexOf(x)>-1?i.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+v,E,x,w.width,w.height,0,w.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+v,E,x,w.width,w.height,0,x,b,w.data);else f?i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,x,m[v].width,m[v].height,0,x,b,m[v].data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,x,x,b,m[v]);h(t,y)&&e.generateMipmap(e.TEXTURE_CUBE_MAP),u.__version=t.version,t.onUpdate&&t.onUpdate(t)}else i.activeTexture(e.TEXTURE0+l),i.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube)}function x(t,n){i.activeTexture(e.TEXTURE0+n),i.bindTexture(e.TEXTURE_CUBE_MAP,r.get(t).__webglTexture)}function _(i,o,s){var c;if(s?(e.texParameteri(i,e.TEXTURE_WRAP_S,a.convert(o.wrapS)),e.texParameteri(i,e.TEXTURE_WRAP_T,a.convert(o.wrapT)),e.texParameteri(i,e.TEXTURE_MAG_FILTER,a.convert(o.magFilter)),e.texParameteri(i,e.TEXTURE_MIN_FILTER,a.convert(o.minFilter))):(e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),o.wrapS===Ya&&o.wrapT===Ya||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\",o),e.texParameteri(i,e.TEXTURE_MAG_FILTER,d(o.magFilter)),e.texParameteri(i,e.TEXTURE_MIN_FILTER,d(o.minFilter)),o.minFilter!==Ja&&o.minFilter!==$a&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\",o)),c=t.get(\"EXT_texture_filter_anisotropic\")){if(o.type===co&&null===t.get(\"OES_texture_float_linear\"))return;if(o.type===lo&&null===t.get(\"OES_texture_half_float_linear\"))return;(o.anisotropy>1||r.get(o).__currentAnisotropy)&&(e.texParameterf(i,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,n.getMaxAnisotropy())),r.get(o).__currentAnisotropy=o.anisotropy)}}function b(t,r,d){void 0===t.__webglInit&&(t.__webglInit=!0,r.addEventListener(\"dispose\",p),t.__webglTexture=e.createTexture(),o.textures++),i.activeTexture(e.TEXTURE0+d),i.bindTexture(e.TEXTURE_2D,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment);var f=s(r.image,n.maxTextureSize);u(r)&&!1===c(f)&&(f=l(f));var m=c(f),v=a.convert(r.format),g=a.convert(r.type);_(e.TEXTURE_2D,r,m);var y,x=r.mipmaps;if(r.isDepthTexture){var b=e.DEPTH_COMPONENT;if(r.type===co){if(!L)throw new Error(\"Float Depth Texture only supported in WebGL2.0\");b=e.DEPTH_COMPONENT32F}else L&&(b=e.DEPTH_COMPONENT16);r.format===_o&&b===e.DEPTH_COMPONENT&&r.type!==ao&&r.type!==so&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),r.type=ao,g=a.convert(r.type)),r.format===bo&&(b=e.DEPTH_STENCIL,r.type!==fo&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),r.type=fo,g=a.convert(r.type))),i.texImage2D(e.TEXTURE_2D,0,b,f.width,f.height,0,v,g,null)}else if(r.isDataTexture)if(x.length>0&&m){for(var w=0,M=x.length;w<M;w++)y=x[w],i.texImage2D(e.TEXTURE_2D,w,v,y.width,y.height,0,v,g,y.data);r.generateMipmaps=!1}else i.texImage2D(e.TEXTURE_2D,0,v,f.width,f.height,0,v,g,f.data);else if(r.isCompressedTexture)for(var w=0,M=x.length;w<M;w++)y=x[w],r.format!==go&&r.format!==vo?i.getCompressedTextureFormats().indexOf(v)>-1?i.compressedTexImage2D(e.TEXTURE_2D,w,v,y.width,y.height,0,y.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):i.texImage2D(e.TEXTURE_2D,w,v,y.width,y.height,0,v,g,y.data);else if(x.length>0&&m){for(var w=0,M=x.length;w<M;w++)y=x[w],i.texImage2D(e.TEXTURE_2D,w,v,v,g,y);r.generateMipmaps=!1}else i.texImage2D(e.TEXTURE_2D,0,v,v,g,f);h(r,m)&&e.generateMipmap(e.TEXTURE_2D),t.__version=r.version,r.onUpdate&&r.onUpdate(r)}function w(t,n,o,s){var c=a.convert(n.texture.format),l=a.convert(n.texture.type);i.texImage2D(s,0,c,n.width,n.height,0,c,l,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,o,s,r.get(n.texture).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function M(t,i){e.bindRenderbuffer(e.RENDERBUFFER,t),i.depthBuffer&&!i.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,i.width,i.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)):i.depthBuffer&&i.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,i.width,i.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)):e.renderbufferStorage(e.RENDERBUFFER,e.RGBA4,i.width,i.height),e.bindRenderbuffer(e.RENDERBUFFER,null)}function E(t,i){if(i&&i.isWebGLRenderTargetCube)throw new Error(\"Depth Texture with cube render targets is not supported\");if(e.bindFramebuffer(e.FRAMEBUFFER,t),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");r.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),g(i.depthTexture,0);var n=r.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===_o)e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,n,0);else{if(i.depthTexture.format!==bo)throw new Error(\"Unknown depthTexture format\");e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,n,0)}}function S(t){var i=r.get(t),n=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(n)throw new Error(\"target.depthTexture not supported in Cube render targets\");E(i.__webglFramebuffer,t)}else if(n){i.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(e.FRAMEBUFFER,i.__webglFramebuffer[a]),i.__webglDepthbuffer[a]=e.createRenderbuffer(),M(i.__webglDepthbuffer[a],t)}else e.bindFramebuffer(e.FRAMEBUFFER,i.__webglFramebuffer),i.__webglDepthbuffer=e.createRenderbuffer(),M(i.__webglDepthbuffer,t);e.bindFramebuffer(e.FRAMEBUFFER,null)}function T(t){var n=r.get(t),a=r.get(t.texture);t.addEventListener(\"dispose\",f),a.__webglTexture=e.createTexture(),o.textures++;var s=!0===t.isWebGLRenderTargetCube,l=c(t);if(s){n.__webglFramebuffer=[];for(var u=0;u<6;u++)n.__webglFramebuffer[u]=e.createFramebuffer()}else n.__webglFramebuffer=e.createFramebuffer();if(s){i.bindTexture(e.TEXTURE_CUBE_MAP,a.__webglTexture),_(e.TEXTURE_CUBE_MAP,t.texture,l);for(var u=0;u<6;u++)w(n.__webglFramebuffer[u],t,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+u);h(t.texture,l)&&e.generateMipmap(e.TEXTURE_CUBE_MAP),i.bindTexture(e.TEXTURE_CUBE_MAP,null)}else i.bindTexture(e.TEXTURE_2D,a.__webglTexture),_(e.TEXTURE_2D,t.texture,l),w(n.__webglFramebuffer,t,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),h(t.texture,l)&&e.generateMipmap(e.TEXTURE_2D),i.bindTexture(e.TEXTURE_2D,null);t.depthBuffer&&S(t)}function A(t){var n=t.texture;if(h(n,c(t))){var a=t.isWebGLRenderTargetCube?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,o=r.get(n).__webglTexture;i.bindTexture(a,o),e.generateMipmap(a),i.bindTexture(a,null)}}var L=\"undefined\"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext;this.setTexture2D=g,this.setTextureCube=y,this.setTextureCubeDynamic=x,this.setupRenderTarget=T,this.updateRenderTargetMipmap=A}function vt(){function e(e){var t=e.uuid,i=r[t];return void 0===i&&(i={},r[t]=i),i}function t(e){delete r[e.uuid]}function i(){r={}}var r={};return{get:e,remove:t,clear:i}}function gt(e,t,i){function r(){var t=!1,i=new o,r=null,n=new o(0,0,0,0);return{setMask:function(i){r===i||t||(e.colorMask(i,i,i,i),r=i)},setLocked:function(e){t=e},setClear:function(t,r,a,o,s){!0===s&&(t*=o,r*=o,a*=o),i.set(t,r,a,o),!1===n.equals(i)&&(e.clearColor(t,r,a,o),n.copy(i))},reset:function(){t=!1,r=null,n.set(-1,0,0,0)}}}function n(){var t=!1,i=null,r=null,n=null;return{setTest:function(t){t?d(e.DEPTH_TEST):p(e.DEPTH_TEST)},setMask:function(r){i===r||t||(e.depthMask(r),i=r)},setFunc:function(t){if(r!==t){if(t)switch(t){case Ea:e.depthFunc(e.NEVER);break;case Sa:e.depthFunc(e.ALWAYS);break;case Ta:e.depthFunc(e.LESS);break;case Aa:e.depthFunc(e.LEQUAL);break;case La:e.depthFunc(e.EQUAL);break;case Ca:e.depthFunc(e.GEQUAL);break;case Ra:e.depthFunc(e.GREATER);break;case Pa:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);r=t}},setLocked:function(e){t=e},setClear:function(t){n!==t&&(e.clearDepth(t),n=t)},reset:function(){t=!1,i=null,r=null,n=null}}}function a(){var t=!1,i=null,r=null,n=null,a=null,o=null,s=null,c=null,l=null;return{setTest:function(t){t?d(e.STENCIL_TEST):p(e.STENCIL_TEST)},setMask:function(r){i===r||t||(e.stencilMask(r),i=r)},setFunc:function(t,i,o){r===t&&n===i&&a===o||(e.stencilFunc(t,i,o),r=t,n=i,a=o)},setOp:function(t,i,r){o===t&&s===i&&c===r||(e.stencilOp(t,i,r),o=t,s=i,c=r)},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearStencil(t),l=t)},reset:function(){t=!1,i=null,r=null,n=null,a=null,o=null,s=null,c=null,l=null}}}function s(t,i,r){var n=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var o=0;o<r;o++)e.texImage2D(i+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,n);return a}function c(){for(var e=0,t=I.length;e<t;e++)I[e]=0}function l(i){if(I[i]=1,0===N[i]&&(e.enableVertexAttribArray(i),N[i]=1),0!==O[i]){t.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(i,0),O[i]=0}}function u(i,r){if(I[i]=1,0===N[i]&&(e.enableVertexAttribArray(i),N[i]=1),O[i]!==r){t.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(i,r),O[i]=r}}function h(){for(var t=0,i=N.length;t!==i;++t)N[t]!==I[t]&&(e.disableVertexAttribArray(t),N[t]=0)}function d(t){!0!==F[t]&&(e.enable(t),F[t]=!0)}function p(t){!1!==F[t]&&(e.disable(t),F[t]=!1)}function f(){if(null===z&&(z=[],t.get(\"WEBGL_compressed_texture_pvrtc\")||t.get(\"WEBGL_compressed_texture_s3tc\")||t.get(\"WEBGL_compressed_texture_etc1\")))for(var i=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),r=0;r<i.length;r++)z.push(i[r]);return z}function m(t){return B!==t&&(e.useProgram(t),B=t,!0)}function v(t,r,n,a,o,s,c,l){if(t!==ia?d(e.BLEND):p(e.BLEND),t!==sa){if(t!==G||l!==q)switch(t){case na:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE));break;case aa:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR));break;case oa:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR));break;default:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA))}V=null,H=null,j=null,k=null,W=null,X=null}else o=o||r,s=s||n,c=c||a,r===V&&o===k||(e.blendEquationSeparate(i.convert(r),i.convert(o)),V=r,k=o),n===H&&a===j&&s===W&&c===X||(e.blendFuncSeparate(i.convert(n),i.convert(a),i.convert(s),i.convert(c)),H=n,j=a,W=s,X=c);G=t,q=l}function g(t){t.side===Qn?p(e.CULL_FACE):d(e.CULL_FACE),y(t.side===Kn),!0===t.transparent?v(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha):v(ia),P.setFunc(t.depthFunc),P.setTest(t.depthTest),P.setMask(t.depthWrite),R.setMask(t.colorWrite),b(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)}function y(t){Y!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),Y=t)}function x(t){t!==kn?(d(e.CULL_FACE),t!==Z&&(t===Wn?e.cullFace(e.BACK):t===Xn?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):p(e.CULL_FACE),Z=t}function _(t){t!==J&&(te&&e.lineWidth(t),J=t)}function b(t,i,r){t?(d(e.POLYGON_OFFSET_FILL),K===i&&Q===r||(e.polygonOffset(i,r),K=i,Q=r)):p(e.POLYGON_OFFSET_FILL)}function w(t){t?d(e.SCISSOR_TEST):p(e.SCISSOR_TEST)}function M(t){void 0===t&&(t=e.TEXTURE0+$-1),ie!==t&&(e.activeTexture(t),ie=t)}function E(t,i){null===ie&&M();var r=re[ie];void 0===r&&(r={type:void 0,texture:void 0},re[ie]=r),r.type===t&&r.texture===i||(e.bindTexture(t,i||oe[t]),r.type=t,r.texture=i)}function S(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error(\"THREE.WebGLState:\",e)}}function T(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error(\"THREE.WebGLState:\",e)}}function A(t){!1===ne.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),ne.copy(t))}function L(t){!1===ae.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),ae.copy(t))}function C(){for(var t=0;t<N.length;t++)1===N[t]&&(e.disableVertexAttribArray(t),N[t]=0);F={},z=null,ie=null,re={},B=null,G=null,Y=null,Z=null,R.reset(),P.reset(),D.reset()}var R=new r,P=new n,D=new a,U=e.getParameter(e.MAX_VERTEX_ATTRIBS),I=new Uint8Array(U),N=new Uint8Array(U),O=new Uint8Array(U),F={},z=null,B=null,G=null,V=null,H=null,j=null,k=null,W=null,X=null,q=!1,Y=null,Z=null,J=null,K=null,Q=null,$=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),ee=parseFloat(/^WebGL\\ ([0-9])/.exec(e.getParameter(e.VERSION))[1]),te=parseFloat(ee)>=1,ie=null,re={},ne=new o,ae=new o,oe={};return oe[e.TEXTURE_2D]=s(e.TEXTURE_2D,e.TEXTURE_2D,1),oe[e.TEXTURE_CUBE_MAP]=s(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),R.setClear(0,0,0,1),P.setClear(1),D.setClear(0),d(e.DEPTH_TEST),P.setFunc(Aa),y(!1),x(Wn),d(e.CULL_FACE),d(e.BLEND),v(ra),{buffers:{color:R,depth:P,stencil:D},initAttributes:c,enableAttribute:l,enableAttributeAndDivisor:u,disableUnusedAttributes:h,enable:d,disable:p,getCompressedTextureFormats:f,useProgram:m,setBlending:v,setMaterial:g,setFlipSided:y,setCullFace:x,setLineWidth:_,setPolygonOffset:b,setScissorTest:w,activeTexture:M,bindTexture:E,compressedTexImage2D:S,texImage2D:T,scissor:A,viewport:L,reset:C}}function yt(e,t,i){function r(){if(void 0!==a)return a;var i=t.get(\"EXT_texture_filter_anisotropic\");return a=null!==i?e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function n(t){if(\"highp\"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return\"highp\";t=\"mediump\"}return\"mediump\"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?\"mediump\":\"lowp\"}var a,o=void 0!==i.precision?i.precision:\"highp\",s=n(o);s!==o&&(console.warn(\"THREE.WebGLRenderer:\",o,\"not supported, using\",s,\"instead.\"),o=s);var c=!0===i.logarithmicDepthBuffer&&!!t.get(\"EXT_frag_depth\"),l=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),h=e.getParameter(e.MAX_TEXTURE_SIZE),d=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),p=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),m=e.getParameter(e.MAX_VARYING_VECTORS),v=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),g=u>0,y=!!t.get(\"OES_texture_float\");return{getMaxAnisotropy:r,getMaxPrecision:n,precision:o,logarithmicDepthBuffer:c,maxTextures:l,maxVertexTextures:u,maxTextureSize:h,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y}}function xt(e){me.call(this),this.cameras=e||[]}function _t(e){function t(){if(null!==r&&r.isPresenting){var t=r.getEyeParameters(\"left\"),n=t.renderWidth,a=t.renderHeight;f=e.getPixelRatio(),p=e.getSize(),e.setDrawingBufferSize(2*n,a,1)}else i.enabled&&e.setDrawingBufferSize(p.width,p.height,f)}var i=this,r=null,n=null;\"VRFrameData\"in window&&(n=new window.VRFrameData);var a=new h,s=new h,c=new h,l=new me;l.bounds=new o(0,0,.5,1),l.layers.enable(1);var u=new me;u.bounds=new o(.5,0,.5,1),u.layers.enable(2);var d=new xt([l,u]);d.layers.enable(1),d.layers.enable(2);var p,f;window.addEventListener(\"vrdisplaypresentchange\",t,!1),this.enabled=!1,this.standing=!1,this.getDevice=function(){return r},this.setDevice=function(e){void 0!==e&&(r=e)},this.getCamera=function(e){if(null===r)return e;r.depthNear=e.near,r.depthFar=e.far,r.getFrameData(n);var t=n.pose;null!==t.position?e.position.fromArray(t.position):e.position.set(0,0,0),null!==t.orientation&&e.quaternion.fromArray(t.orientation),e.updateMatrixWorld();var i=r.stageParameters;if(this.standing&&i&&(s.fromArray(i.sittingToStandingTransform),c.getInverse(s),e.matrixWorld.multiply(s),e.matrixWorldInverse.multiply(c)),!1===r.isPresenting)return e;l.near=e.near,u.near=e.near,l.far=e.far,u.far=e.far,d.matrixWorld.copy(e.matrixWorld),d.matrixWorldInverse.copy(e.matrixWorldInverse),l.matrixWorldInverse.fromArray(n.leftViewMatrix),u.matrixWorldInverse.fromArray(n.rightViewMatrix),this.standing&&i&&(l.matrixWorldInverse.multiply(c),u.matrixWorldInverse.multiply(c));var o=e.parent;null!==o&&(a.getInverse(o.matrixWorld),l.matrixWorldInverse.multiply(a),u.matrixWorldInverse.multiply(a)),l.matrixWorld.getInverse(l.matrixWorldInverse),u.matrixWorld.getInverse(u.matrixWorldInverse),l.projectionMatrix.fromArray(n.leftProjectionMatrix),u.projectionMatrix.fromArray(n.rightProjectionMatrix),d.projectionMatrix.copy(l.projectionMatrix);var h=r.getLayers();if(h.length){var p=h[0];null!==p.leftBounds&&4===p.leftBounds.length&&l.bounds.fromArray(p.leftBounds),null!==p.rightBounds&&4===p.rightBounds.length&&u.bounds.fromArray(p.rightBounds)}return d},this.getStandingMatrix=function(){return s},this.submitFrame=function(){r&&r.isPresenting&&r.submitFrame()},this.dispose=function(){window.removeEventListener(\"vrdisplaypresentchange\",t)}}function bt(e){var t={};return{get:function(i){if(void 0!==t[i])return t[i];var r;switch(i){case\"WEBGL_depth_texture\":r=e.getExtension(\"WEBGL_depth_texture\")||e.getExtension(\"MOZ_WEBGL_depth_texture\")||e.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":r=e.getExtension(\"EXT_texture_filter_anisotropic\")||e.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||e.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":r=e.getExtension(\"WEBGL_compressed_texture_s3tc\")||e.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||e.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":r=e.getExtension(\"WEBGL_compressed_texture_pvrtc\")||e.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;case\"WEBGL_compressed_texture_etc1\":r=e.getExtension(\"WEBGL_compressed_texture_etc1\");break;default:r=e.getExtension(i)}return null===r&&console.warn(\"THREE.WebGLRenderer: \"+i+\" extension not supported.\"),t[i]=r,r}}}function wt(){function e(){l.value!==r&&(l.value=r,l.needsUpdate=n>0),i.numPlanes=n,i.numIntersection=0}function t(e,t,r,n){var a=null!==e?e.length:0,o=null;if(0!==a){if(o=l.value,!0!==n||null===o){var u=r+4*a,h=t.matrixWorldInverse;c.getNormalMatrix(h),(null===o||o.length<u)&&(o=new Float32Array(u));for(var d=0,p=r;d!==a;++d,p+=4)s.copy(e[d]).applyMatrix4(h,c),s.normal.toArray(o,p),o[p+3]=s.constant}l.value=o,l.needsUpdate=!0}return i.numPlanes=a,o}var i=this,r=null,n=0,a=!1,o=!1,s=new oe,c=new ae,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,i,o){var s=0!==e.length||i||0!==n||a;return a=i,r=t(e,o,0),n=e.length,s},this.beginShadows=function(){o=!0,t(null)},this.endShadows=function(){o=!1,e()},this.setState=function(i,s,c,u,h,d){if(!a||null===i||0===i.length||o&&!c)o?t(null):e();else{var p=o?0:n,f=4*p,m=h.clippingState||null;l.value=m,m=t(i,u,f,d);for(var v=0;v!==f;++v)m[v]=r[v];h.clippingState=m,this.numIntersection=s?this.numPlanes:0,this.numPlanes+=p}}}function Mt(e,t){function i(i){var r;if(i===qa)return e.REPEAT;if(i===Ya)return e.CLAMP_TO_EDGE;if(i===Za)return e.MIRRORED_REPEAT;if(i===Ja)return e.NEAREST;if(i===Ka)return e.NEAREST_MIPMAP_NEAREST;if(i===Qa)return e.NEAREST_MIPMAP_LINEAR;if(i===$a)return e.LINEAR;if(i===eo)return e.LINEAR_MIPMAP_NEAREST;if(i===to)return e.LINEAR_MIPMAP_LINEAR;if(i===io)return e.UNSIGNED_BYTE;if(i===uo)return e.UNSIGNED_SHORT_4_4_4_4;if(i===ho)return e.UNSIGNED_SHORT_5_5_5_1;if(i===po)return e.UNSIGNED_SHORT_5_6_5;if(i===ro)return e.BYTE;if(i===no)return e.SHORT;if(i===ao)return e.UNSIGNED_SHORT;if(i===oo)return e.INT;if(i===so)return e.UNSIGNED_INT;if(i===co)return e.FLOAT;if(i===lo&&null!==(r=t.get(\"OES_texture_half_float\")))return r.HALF_FLOAT_OES;if(i===mo)return e.ALPHA;if(i===vo)return e.RGB;if(i===go)return e.RGBA;if(i===yo)return e.LUMINANCE;if(i===xo)return e.LUMINANCE_ALPHA;if(i===_o)return e.DEPTH_COMPONENT;if(i===bo)return e.DEPTH_STENCIL;if(i===ca)return e.FUNC_ADD;if(i===la)return e.FUNC_SUBTRACT;if(i===ua)return e.FUNC_REVERSE_SUBTRACT;if(i===pa)return e.ZERO;if(i===fa)return e.ONE;if(i===ma)return e.SRC_COLOR;if(i===va)return e.ONE_MINUS_SRC_COLOR;if(i===ga)return e.SRC_ALPHA;if(i===ya)return e.ONE_MINUS_SRC_ALPHA;if(i===xa)return e.DST_ALPHA;if(i===_a)return e.ONE_MINUS_DST_ALPHA;if(i===ba)return e.DST_COLOR;if(i===wa)return e.ONE_MINUS_DST_COLOR;if(i===Ma)return e.SRC_ALPHA_SATURATE;if((i===wo||i===Mo||i===Eo||i===So)&&null!==(r=t.get(\"WEBGL_compressed_texture_s3tc\"))){if(i===wo)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===Mo)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===Eo)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===So)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((i===To||i===Ao||i===Lo||i===Co)&&null!==(r=t.get(\"WEBGL_compressed_texture_pvrtc\"))){if(i===To)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===Ao)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===Lo)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===Co)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(i===Ro&&null!==(r=t.get(\"WEBGL_compressed_texture_etc1\")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((i===ha||i===da)&&null!==(r=t.get(\"EXT_blend_minmax\"))){if(i===ha)return r.MIN_EXT;if(i===da)return r.MAX_EXT}return i===fo&&null!==(r=t.get(\"WEBGL_depth_texture\"))?r.UNSIGNED_INT_24_8_WEBGL:0}return{convert:i}}function Et(e){function t(){return null===ee?me:1}function i(){Ce=new bt(Ae),Ce.get(\"WEBGL_depth_texture\"),Ce.get(\"OES_texture_float\"),Ce.get(\"OES_texture_float_linear\"),Ce.get(\"OES_texture_half_float\"),Ce.get(\"OES_texture_half_float_linear\"),Ce.get(\"OES_standard_derivatives\"),Ce.get(\"ANGLE_instanced_arrays\"),Ce.get(\"OES_element_index_uint\")&&(Pe.MaxIndex=4294967296),tt=new Mt(Ae,Ce),Re=new yt(Ae,Ce,e),De=new gt(Ae,Ce,tt),De.scissor(ue.copy(ge).multiplyScalar(me)),De.viewport(oe.copy(ve).multiplyScalar(me)),Ue=new vt,Ie=new mt(Ae,Ce,De,Ue,Re,tt,Se),Ne=new le(Ae),Oe=new Je(Ae,Ne,Se),Fe=new $e(Oe,Te),je=new qe(Ae),Be=new ft(K,Ce,Re),ze=new Qe,Ge=new We,He=new Ve(K,De,Oe,H),ke=new Ze(Ae,Ce,Te),Xe=new Ye(Ae,Ce,Te),Ke=new J(K,Ae,De,Ie,Re),et=new Q(K,Ae,De,Ie,Re),K.info.programs=Be.programs,K.context=Ae,K.capabilities=Re,K.extensions=Ce,K.properties=Ue,K.renderLists=Ge,K.state=De}function r(e){e.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),$=!0}function n(e){console.log(\"THREE.WebGLRenderer: Context Restored.\"),$=!1,i()}function a(e){var t=e.target;t.removeEventListener(\"dispose\",a),s(t)}function s(e){c(e),Ue.remove(e)}function c(e){var t=Ue.get(e).program;e.program=void 0,void 0!==t&&Be.releaseProgram(t)}function l(e,t,i){e.render(function(e){K.renderBufferImmediate(e,t,i)})}function p(e,t,i,r){if(i&&i.isInstancedBufferGeometry&&null===Ce.get(\"ANGLE_instanced_arrays\"))return void console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");void 0===r&&(r=0),De.initAttributes();var n=i.attributes,a=t.getAttributes(),o=e.defaultAttributeValues;for(var s in a){var c=a[s];if(c>=0){var l=n[s];if(void 0!==l){var u=l.normalized,h=l.itemSize,d=Ne.get(l);if(void 0===d)continue;var p=d.buffer,f=d.type,m=d.bytesPerElement;if(l.isInterleavedBufferAttribute){var v=l.data,g=v.stride,y=l.offset;v&&v.isInstancedInterleavedBuffer?(De.enableAttributeAndDivisor(c,v.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=v.meshPerAttribute*v.count)):De.enableAttribute(c),Ae.bindBuffer(Ae.ARRAY_BUFFER,p),Ae.vertexAttribPointer(c,h,f,u,g*m,(r*g+y)*m)}else l.isInstancedBufferAttribute?(De.enableAttributeAndDivisor(c,l.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=l.meshPerAttribute*l.count)):De.enableAttribute(c),Ae.bindBuffer(Ae.ARRAY_BUFFER,p),Ae.vertexAttribPointer(c,h,f,u,0,r*h*m)}else if(void 0!==o){var x=o[s];if(void 0!==x)switch(x.length){case 2:Ae.vertexAttrib2fv(c,x);break;case 3:Ae.vertexAttrib3fv(c,x);break;case 4:Ae.vertexAttrib4fv(c,x);break;default:Ae.vertexAttrib1fv(c,x)}}}}De.disableUnusedAttributes()}function f(){nt||((it.getDevice()||window).requestAnimationFrame(m),nt=!0)}function m(e){null!==at&&at(e),(it.getDevice()||window).requestAnimationFrame(m)}function v(e,t,i){if(e.visible){if(e.layers.test(t.layers))if(e.isLight)k.push(e),e.castShadow&&W.push(e);else if(e.isSprite)e.frustumCulled&&!xe.intersectsSprite(e)||Y.push(e);else if(e.isLensFlare)Z.push(e);else if(e.isImmediateRenderObject)i&&Ee.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Me),X.push(e,null,e.material,Ee.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||xe.intersectsObject(e))){i&&Ee.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Me);var r=Fe.update(e),n=e.material;if(Array.isArray(n))for(var a=r.groups,o=0,s=a.length;o<s;o++){var c=a[o],l=n[c.materialIndex];l&&l.visible&&X.push(e,r,l,Ee.z,c)}else n.visible&&X.push(e,r,n,Ee.z,null)}for(var u=e.children,o=0,s=u.length;o<s;o++)v(u[o],t,i)}}function g(e,t,i,r){for(var n=0,a=e.length;n<a;n++){var o=e[n],s=o.object,c=o.geometry,l=void 0===r?o.material:r,u=o.group;if(i.isArrayCamera){ae=i;for(var h=i.cameras,d=0,p=h.length;d<p;d++){var f=h[d];if(s.layers.test(f.layers)){var m=f.bounds,v=m.x*pe,g=m.y*fe,x=m.z*pe,_=m.w*fe;De.viewport(oe.set(v,g,x,_).multiplyScalar(me)),y(s,t,f,c,l,u)}}}else ae=null,y(s,t,i,c,l,u)}}function y(e,t,i,r,n,a){if(e.onBeforeRender(K,t,i,r,n,a),e.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){De.setMaterial(n);var o=_(i,t.fog,n,e);re=\"\",l(e,o,n)}else K.renderBufferDirect(i,t.fog,r,n,e,a);e.onAfterRender(K,t,i,r,n,a)}function x(e,t,i){var r=Ue.get(e),n=Be.getParameters(e,ze.state,W,t,_e.numPlanes,_e.numIntersection,i),o=Be.getProgramCode(e,n),s=r.program,l=!0;if(void 0===s)e.addEventListener(\"dispose\",a);else if(s.code!==o)c(e);else{if(void 0!==n.shaderID)return;l=!1}if(l){if(n.shaderID){var u=ns[n.shaderID];r.shader={name:e.type,uniforms:is.clone(u.uniforms),vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}}else r.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(r.shader),s=Be.acquireProgram(e,r.shader,n,o),r.program=s,e.program=s}var h=s.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var d=0;d<K.maxMorphTargets;d++)h[\"morphTarget\"+d]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(var d=0;d<K.maxMorphNormals;d++)h[\"morphNormal\"+d]>=0&&e.numSupportedMorphNormals++}var p=r.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(r.numClippingPlanes=_e.numPlanes,r.numIntersection=_e.numIntersection,p.clippingPlanes=_e.uniform),r.fog=t,r.lightsHash=ze.state.hash,e.lights&&(p.ambientLightColor.value=ze.state.ambient,p.directionalLights.value=ze.state.directional,p.spotLights.value=ze.state.spot,p.rectAreaLights.value=ze.state.rectArea,p.pointLights.value=ze.state.point,p.hemisphereLights.value=ze.state.hemi,p.directionalShadowMap.value=ze.state.directionalShadowMap,p.directionalShadowMatrix.value=ze.state.directionalShadowMatrix,p.spotShadowMap.value=ze.state.spotShadowMap,p.spotShadowMatrix.value=ze.state.spotShadowMatrix,p.pointShadowMap.value=ze.state.pointShadowMap,p.pointShadowMatrix.value=ze.state.pointShadowMatrix);var f=r.program.getUniforms(),m=q.seqWithValue(f.seq,p);r.uniformsList=m}function _(e,t,i,r){de=0;var n=Ue.get(i);if(be&&(we||e!==ne)){var a=e===ne&&i.id===ie;_e.setState(i.clippingPlanes,i.clipIntersection,i.clipShadows,e,n,a)}!1===i.needsUpdate&&(void 0===n.program?i.needsUpdate=!0:i.fog&&n.fog!==t?i.needsUpdate=!0:i.lights&&n.lightsHash!==ze.state.hash?i.needsUpdate=!0:void 0===n.numClippingPlanes||n.numClippingPlanes===_e.numPlanes&&n.numIntersection===_e.numIntersection||(i.needsUpdate=!0)),i.needsUpdate&&(x(i,t,r),i.needsUpdate=!1);var o=!1,s=!1,c=!1,l=n.program,u=l.getUniforms(),h=n.shader.uniforms;if(De.useProgram(l.program)&&(o=!0,s=!0,c=!0),i.id!==ie&&(ie=i.id,s=!0),o||e!==ne){if(u.setValue(Ae,\"projectionMatrix\",e.projectionMatrix),Re.logarithmicDepthBuffer&&u.setValue(Ae,\"logDepthBufFC\",2/(Math.log(e.far+1)/Math.LN2)),ne!==(ae||e)&&(ne=ae||e,s=!0,c=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshStandardMaterial||i.envMap){var p=u.map.cameraPosition;void 0!==p&&p.setValue(Ae,Ee.setFromMatrixPosition(e.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.skinning)&&u.setValue(Ae,\"viewMatrix\",e.matrixWorldInverse)}if(i.skinning){u.setOptional(Ae,r,\"bindMatrix\"),u.setOptional(Ae,r,\"bindMatrixInverse\");var f=r.skeleton;if(f){var m=f.bones;if(Re.floatVertexTextures){if(void 0===f.boneTexture){var v=Math.sqrt(4*m.length);v=Wo.nextPowerOfTwo(Math.ceil(v)),v=Math.max(v,4);var g=new Float32Array(v*v*4);g.set(f.boneMatrices);var y=new d(g,v,v,go,co);f.boneMatrices=g,f.boneTexture=y,f.boneTextureSize=v}u.setValue(Ae,\"boneTexture\",f.boneTexture),u.setValue(Ae,\"boneTextureSize\",f.boneTextureSize)}else u.setOptional(Ae,f,\"boneMatrices\")}}return s&&(u.setValue(Ae,\"toneMappingExposure\",K.toneMappingExposure),u.setValue(Ae,\"toneMappingWhitePoint\",K.toneMappingWhitePoint),i.lights&&I(h,c),t&&i.fog&&S(h,t),i.isMeshBasicMaterial?b(h,i):i.isMeshLambertMaterial?(b(h,i),T(h,i)):i.isMeshPhongMaterial?(b(h,i),i.isMeshToonMaterial?L(h,i):A(h,i)):i.isMeshStandardMaterial?(b(h,i),i.isMeshPhysicalMaterial?R(h,i):C(h,i)):i.isMeshDepthMaterial?(b(h,i),P(h,i)):i.isMeshDistanceMaterial?(b(h,i),D(h,i)):i.isMeshNormalMaterial?(b(h,i),U(h,i)):i.isLineBasicMaterial?(w(h,i),i.isLineDashedMaterial&&M(h,i)):i.isPointsMaterial?E(h,i):i.isShadowMaterial&&(h.color.value=i.color,h.opacity.value=i.opacity),void 0!==h.ltcMat&&(h.ltcMat.value=ts.LTC_MAT_TEXTURE),void 0!==h.ltcMag&&(h.ltcMag.value=ts.LTC_MAG_TEXTURE),q.upload(Ae,n.uniformsList,h,K)),u.setValue(Ae,\"modelViewMatrix\",r.modelViewMatrix),u.setValue(Ae,\"normalMatrix\",r.normalMatrix),u.setValue(Ae,\"modelMatrix\",r.matrixWorld),l}function b(e,t){e.opacity.value=t.opacity,t.color&&(e.diffuse.value=t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap&&t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity);var i;if(t.map?i=t.map:t.specularMap?i=t.specularMap:t.displacementMap?i=t.displacementMap:t.normalMap?i=t.normalMap:t.bumpMap?i=t.bumpMap:t.roughnessMap?i=t.roughnessMap:t.metalnessMap?i=t.metalnessMap:t.alphaMap?i=t.alphaMap:t.emissiveMap&&(i=t.emissiveMap),void 0!==i){i.isWebGLRenderTarget&&(i=i.texture);var r=i.offset,n=i.repeat;e.offsetRepeat.value.set(r.x,r.y,n.x,n.y)}}function w(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity}function M(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function E(e,t){if(e.diffuse.value=t.color,e.opacity.value=t.opacity,e.size.value=t.size*me,e.scale.value=.5*fe,e.map.value=t.map,null!==t.map){var i=t.map.offset,r=t.map.repeat;e.offsetRepeat.value.set(i.x,i.y,r.x,r.y)}}function S(e,t){e.fogColor.value=t.color,t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}function T(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}function A(e,t){e.specular.value=t.specular,e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function L(e,t){A(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function C(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function R(e,t){e.clearCoat.value=t.clearCoat,e.clearCoatRoughness.value=t.clearCoatRoughness,C(e,t)}function P(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function D(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}function U(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function I(e,t){e.ambientLightColor.needsUpdate=t,e.directionalLights.needsUpdate=t,e.pointLights.needsUpdate=t,e.spotLights.needsUpdate=t,e.rectAreaLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function N(){var e=de;return e>=Re.maxTextures&&console.warn(\"THREE.WebGLRenderer: Trying to use \"+e+\" texture units while this GPU supports only \"+Re.maxTextures),de+=1,e}console.log(\"THREE.WebGLRenderer\",Hn),e=e||{};var O=void 0!==e.canvas?e.canvas:document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"),F=void 0!==e.context?e.context:null,z=void 0!==e.alpha&&e.alpha,B=void 0===e.depth||e.depth,G=void 0===e.stencil||e.stencil,V=void 0!==e.antialias&&e.antialias,H=void 0===e.premultipliedAlpha||e.premultipliedAlpha,j=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,k=[],W=[],X=null,Y=[],Z=[];this.domElement=O,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=Oa,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var K=this,$=!1,ee=null,te=null,ie=-1,re=\"\",ne=null,ae=null,oe=new o,ue=new o,he=null,de=0,pe=O.width,fe=O.height,me=1,ve=new o(0,0,pe,fe),ge=new o(0,0,pe,fe),ye=!1,xe=new se,_e=new wt,be=!1,we=!1,Me=new h,Ee=new u,Se={geometries:0,textures:0},Te={frame:0,calls:0,vertices:0,faces:0,points:0};this.info={render:Te,memory:Se,programs:null};var Ae;try{var Le={alpha:z,depth:B,stencil:G,antialias:V,premultipliedAlpha:H,preserveDrawingBuffer:j};if(null===(Ae=F||O.getContext(\"webgl\",Le)||O.getContext(\"experimental-webgl\",Le)))throw null!==O.getContext(\"webgl\")?\"Error creating WebGL context with your selected attributes.\":\"Error creating WebGL context.\";void 0===Ae.getShaderPrecisionFormat&&(Ae.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),O.addEventListener(\"webglcontextlost\",r,!1),O.addEventListener(\"webglcontextrestored\",n,!1)}catch(e){console.error(\"THREE.WebGLRenderer: \"+e)}var Ce,Re,De,Ue,Ie,Ne,Oe,Fe,ze,Be,Ge,He,je,ke,Xe,Ke,et,tt;i();var it=new _t(K);this.vr=it;var rt=new ce(K,Fe,Re.maxTextureSize);this.shadowMap=rt,this.getContext=function(){return Ae},this.getContextAttributes=function(){return Ae.getContextAttributes()},this.forceContextLoss=function(){var e=Ce.get(\"WEBGL_lose_context\");e&&e.loseContext()},this.forceContextRestore=function(){var e=Ce.get(\"WEBGL_lose_context\");e&&e.restoreContext()},this.getPixelRatio=function(){return me},this.setPixelRatio=function(e){void 0!==e&&(me=e,this.setSize(pe,fe,!1))},this.getSize=function(){return{width:pe,height:fe}},this.setSize=function(e,t,i){var r=it.getDevice();if(r&&r.isPresenting)return void console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\");pe=e,fe=t,O.width=e*me,O.height=t*me,!1!==i&&(O.style.width=e+\"px\",O.style.height=t+\"px\"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(){return{width:pe*me,height:fe*me}},this.setDrawingBufferSize=function(e,t,i){pe=e,fe=t,me=i,O.width=e*i,O.height=t*i,this.setViewport(0,0,e,t)},this.setViewport=function(e,t,i,r){ve.set(e,fe-t-r,i,r),De.viewport(oe.copy(ve).multiplyScalar(me))},this.setScissor=function(e,t,i,r){ge.set(e,fe-t-r,i,r),De.scissor(ue.copy(ge).multiplyScalar(me))},this.setScissorTest=function(e){De.setScissorTest(ye=e)},this.getClearColor=He.getClearColor,this.setClearColor=He.setClearColor,this.getClearAlpha=He.getClearAlpha,this.setClearAlpha=He.setClearAlpha,this.clear=function(e,t,i){var r=0;(void 0===e||e)&&(r|=Ae.COLOR_BUFFER_BIT),(void 0===t||t)&&(r|=Ae.DEPTH_BUFFER_BIT),(void 0===i||i)&&(r|=Ae.STENCIL_BUFFER_BIT),Ae.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,t,i,r){this.setRenderTarget(e),this.clear(t,i,r)},this.dispose=function(){O.removeEventListener(\"webglcontextlost\",r,!1),O.removeEventListener(\"webglcontextrestored\",n,!1),Ge.dispose(),it.dispose()},this.renderBufferImmediate=function(e,t,i){De.initAttributes();var r=Ue.get(e);e.hasPositions&&!r.position&&(r.position=Ae.createBuffer()),e.hasNormals&&!r.normal&&(r.normal=Ae.createBuffer()),e.hasUvs&&!r.uv&&(r.uv=Ae.createBuffer()),e.hasColors&&!r.color&&(r.color=Ae.createBuffer());var n=t.getAttributes();if(e.hasPositions&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,r.position),Ae.bufferData(Ae.ARRAY_BUFFER,e.positionArray,Ae.DYNAMIC_DRAW),De.enableAttribute(n.position),Ae.vertexAttribPointer(n.position,3,Ae.FLOAT,!1,0,0)),e.hasNormals){if(Ae.bindBuffer(Ae.ARRAY_BUFFER,r.normal),!i.isMeshPhongMaterial&&!i.isMeshStandardMaterial&&!i.isMeshNormalMaterial&&!0===i.flatShading)for(var a=0,o=3*e.count;a<o;a+=9){var s=e.normalArray,c=(s[a+0]+s[a+3]+s[a+6])/3,l=(s[a+1]+s[a+4]+s[a+7])/3,u=(s[a+2]+s[a+5]+s[a+8])/3;s[a+0]=c,s[a+1]=l,s[a+2]=u,s[a+3]=c,s[a+4]=l,s[a+5]=u,s[a+6]=c,s[a+7]=l,s[a+8]=u}Ae.bufferData(Ae.ARRAY_BUFFER,e.normalArray,Ae.DYNAMIC_DRAW),De.enableAttribute(n.normal),Ae.vertexAttribPointer(n.normal,3,Ae.FLOAT,!1,0,0)}e.hasUvs&&i.map&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,r.uv),Ae.bufferData(Ae.ARRAY_BUFFER,e.uvArray,Ae.DYNAMIC_DRAW),De.enableAttribute(n.uv),Ae.vertexAttribPointer(n.uv,2,Ae.FLOAT,!1,0,0)),e.hasColors&&i.vertexColors!==$n&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,r.color),Ae.bufferData(Ae.ARRAY_BUFFER,e.colorArray,Ae.DYNAMIC_DRAW),De.enableAttribute(n.color),Ae.vertexAttribPointer(n.color,3,Ae.FLOAT,!1,0,0)),De.disableUnusedAttributes(),Ae.drawArrays(Ae.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,i,r,n,a,o){De.setMaterial(n);var s=_(e,i,n,a),c=r.id+\"_\"+s.id+\"_\"+(!0===n.wireframe),l=!1;c!==re&&(re=c,l=!0),a.morphTargetInfluences&&(je.update(a,r,n,s),l=!0);var u=r.index,h=r.attributes.position,d=1;!0===n.wireframe&&(u=Oe.getWireframeAttribute(r),d=2);var f,m=ke;null!==u&&(f=Ne.get(u),m=Xe,m.setIndex(f)),l&&(p(n,s,r),null!==u&&Ae.bindBuffer(Ae.ELEMENT_ARRAY_BUFFER,f.buffer));var v=0;null!==u?v=u.count:void 0!==h&&(v=h.count);var g=r.drawRange.start*d,y=r.drawRange.count*d,x=null!==o?o.start*d:0,b=null!==o?o.count*d:1/0,w=Math.max(g,x),M=Math.min(v,g+y,x+b)-1,E=Math.max(0,M-w+1);if(0!==E){if(a.isMesh)if(!0===n.wireframe)De.setLineWidth(n.wireframeLinewidth*t()),m.setMode(Ae.LINES);else switch(a.drawMode){case Uo:m.setMode(Ae.TRIANGLES);break;case Io:m.setMode(Ae.TRIANGLE_STRIP);break;case No:m.setMode(Ae.TRIANGLE_FAN)}else if(a.isLine){var S=n.linewidth;void 0===S&&(S=1),De.setLineWidth(S*t()),a.isLineSegments?m.setMode(Ae.LINES):a.isLineLoop?m.setMode(Ae.LINE_LOOP):m.setMode(Ae.LINE_STRIP)}else a.isPoints&&m.setMode(Ae.POINTS);r&&r.isInstancedBufferGeometry?r.maxInstancedCount>0&&m.renderInstances(r,w,E):m.render(w,E)}},this.compile=function(e,t){k.length=0,W.length=0,e.traverse(function(e){e.isLight&&(k.push(e),e.castShadow&&W.push(e))}),ze.setup(k,W,t),e.traverse(function(t){if(t.material)if(Array.isArray(t.material))for(var i=0;i<t.material.length;i++)x(t.material[i],e.fog,t);else x(t.material,e.fog,t)})};var nt=!1,at=null;this.animate=function(e){at=e,f()},this.render=function(e,t,i,r){if(!t||!t.isCamera)return void console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");if(!$){re=\"\",ie=-1,ne=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),it.enabled&&(t=it.getCamera(t)),Me.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),xe.setFromMatrix(Me),k.length=0,W.length=0,Y.length=0,Z.length=0,we=this.localClippingEnabled,be=_e.init(this.clippingPlanes,we,t),X=Ge.get(e,t),X.init(),v(e,t,K.sortObjects),!0===K.sortObjects&&X.sort(),be&&_e.beginShadows(),rt.render(W,e,t),ze.setup(k,W,t),be&&_e.endShadows(),Te.frame++,Te.calls=0,Te.vertices=0,Te.faces=0,Te.points=0,void 0===i&&(i=null),this.setRenderTarget(i),He.render(X,e,t,r);var n=X.opaque,a=X.transparent;if(e.overrideMaterial){var o=e.overrideMaterial;n.length&&g(n,e,t,o),a.length&&g(a,e,t,o)}else n.length&&g(n,e,t),a.length&&g(a,e,t);et.render(Y,e,t),Ke.render(Z,e,t,oe),i&&Ie.updateRenderTargetMipmap(i),De.buffers.depth.setTest(!0),De.buffers.depth.setMask(!0),De.buffers.color.setMask(!0),De.setPolygonOffset(!1),it.enabled&&it.submitFrame()}},this.setFaceCulling=function(e,t){De.setCullFace(e),De.setFlipSided(t===qn)},this.allocTextureUnit=N,this.setTexture2D=function(){var e=!1;return function(t,i){t&&t.isWebGLRenderTarget&&(e||(console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"),e=!0),t=t.texture),Ie.setTexture2D(t,i)}}(),this.setTexture=function(){var e=!1;return function(t,i){e||(console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"),e=!0),Ie.setTexture2D(t,i)}}(),this.setTextureCube=function(){var e=!1;return function(t,i){t&&t.isWebGLRenderTargetCube&&(e||(console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),e=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?Ie.setTextureCube(t,i):Ie.setTextureCubeDynamic(t,i)}}(),this.getRenderTarget=function(){return ee},this.setRenderTarget=function(e){ee=e,e&&void 0===Ue.get(e).__webglFramebuffer&&Ie.setupRenderTarget(e);var t=null,i=!1;if(e){var r=Ue.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(t=r[e.activeCubeFace],i=!0):t=r,oe.copy(e.viewport),ue.copy(e.scissor),he=e.scissorTest}else oe.copy(ve).multiplyScalar(me),ue.copy(ge).multiplyScalar(me),he=ye;if(te!==t&&(Ae.bindFramebuffer(Ae.FRAMEBUFFER,t),te=t),De.viewport(oe),De.scissor(ue),De.setScissorTest(he),i){var n=Ue.get(e.texture);Ae.framebufferTexture2D(Ae.FRAMEBUFFER,Ae.COLOR_ATTACHMENT0,Ae.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,n.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,t,i,r,n,a){if(!e||!e.isWebGLRenderTarget)return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");var o=Ue.get(e).__webglFramebuffer;if(o){var s=!1;o!==te&&(Ae.bindFramebuffer(Ae.FRAMEBUFFER,o),s=!0);try{var c=e.texture,l=c.format,u=c.type;if(l!==go&&tt.convert(l)!==Ae.getParameter(Ae.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");if(!(u===io||tt.convert(u)===Ae.getParameter(Ae.IMPLEMENTATION_COLOR_READ_TYPE)||u===co&&(Ce.get(\"OES_texture_float\")||Ce.get(\"WEBGL_color_buffer_float\"))||u===lo&&Ce.get(\"EXT_color_buffer_half_float\")))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");Ae.checkFramebufferStatus(Ae.FRAMEBUFFER)===Ae.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-r&&i>=0&&i<=e.height-n&&Ae.readPixels(t,i,r,n,tt.convert(l),tt.convert(u),a):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{s&&Ae.bindFramebuffer(Ae.FRAMEBUFFER,te)}}}}function St(e,t){this.name=\"\",this.color=new Y(e),this.density=void 0!==t?t:25e-5}function Tt(e,t,i){this.name=\"\",this.color=new Y(e),this.near=void 0!==t?t:1,this.far=void 0!==i?i:1e3}function At(){de.call(this),this.type=\"Scene\",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Lt(e,t,i,r,n){de.call(this),this.lensFlares=[],this.positionScreen=new u,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,t,i,r,n)}function Ct(e){$.call(this),this.type=\"SpriteMaterial\",this.color=new Y(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)}function Rt(e){de.call(this),this.type=\"Sprite\",this.material=void 0!==e?e:new Ct}function Pt(){de.call(this),this.type=\"LOD\",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Dt(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn(\"THREE.Skeleton boneInverses is the wrong length.\"),this.boneInverses=[];for(var i=0,r=this.bones.length;i<r;i++)this.boneInverses.push(new h)}}function Ut(){de.call(this),this.type=\"Bone\"}function It(e,t){Ge.call(this,e,t),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new h,this.bindMatrixInverse=new h;var i=this.initBones(),r=new Dt(i);this.bind(r,this.matrixWorld),this.normalizeSkinWeights()}function Nt(e){$.call(this),this.type=\"LineBasicMaterial\",this.color=new Y(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.lights=!1,this.setValues(e)}function Ot(e,t,i){if(1===i)return console.warn(\"THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.\"),new Ft(e,t);de.call(this),this.type=\"Line\",this.geometry=void 0!==e?e:new Pe,this.material=void 0!==t?t:new Nt({color:16777215*Math.random()})}function Ft(e,t){Ot.call(this,e,t),this.type=\"LineSegments\"}function zt(e,t){Ot.call(this,e,t),this.type=\"LineLoop\"}function Bt(e){$.call(this),this.type=\"PointsMaterial\",this.color=new Y(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)}function Gt(e,t){de.call(this),this.type=\"Points\",this.geometry=void 0!==e?e:new Pe,this.material=void 0!==t?t:new Bt({color:16777215*Math.random()})}function Vt(){de.call(this),this.type=\"Group\"}function Ht(e,t,i,r,n,o,s,c,l){function u(){requestAnimationFrame(u),e.readyState>=e.HAVE_CURRENT_DATA&&(h.needsUpdate=!0)}a.call(this,e,t,i,r,n,o,s,c,l),this.generateMipmaps=!1;var h=this;u()}function jt(e,t,i,r,n,o,s,c,l,u,h,d){a.call(this,null,o,s,c,l,u,r,n,h,d),this.image={width:t,height:i},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function kt(e,t,i,r,n,o,s,c,l,u){if((u=void 0!==u?u:_o)!==_o&&u!==bo)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===i&&u===_o&&(i=ao),void 0===i&&u===bo&&(i=fo),a.call(this,null,r,n,o,s,c,u,i,l),this.image={width:e,height:t},this.magFilter=void 0!==s?s:Ja,this.minFilter=void 0!==c?c:Ja,this.flipY=!1,this.generateMipmaps=!1}function Wt(e){Pe.call(this),this.type=\"WireframeGeometry\";var t,i,r,n,a,o,s,c,l,h,d=[],p=[0,0],f={},m=[\"a\",\"b\",\"c\"];if(e&&e.isGeometry){var v=e.faces;for(t=0,r=v.length;t<r;t++){var g=v[t];for(i=0;i<3;i++)s=g[m[i]],c=g[m[(i+1)%3]],p[0]=Math.min(s,c),p[1]=Math.max(s,c),l=p[0]+\",\"+p[1],void 0===f[l]&&(f[l]={index1:p[0],index2:p[1]})}for(l in f)o=f[l],h=e.vertices[o.index1],d.push(h.x,h.y,h.z),h=e.vertices[o.index2],d.push(h.x,h.y,h.z)}else if(e&&e.isBufferGeometry){var y,x,_,b,w,M,E,S;if(h=new u,null!==e.index){for(y=e.attributes.position,x=e.index,_=e.groups,0===_.length&&(_=[{start:0,count:x.count,materialIndex:0}]),n=0,a=_.length;n<a;++n)for(b=_[n],w=b.start,M=b.count,t=w,r=w+M;t<r;t+=3)for(i=0;i<3;i++)s=x.getX(t+i),c=x.getX(t+(i+1)%3),p[0]=Math.min(s,c),p[1]=Math.max(s,c),l=p[0]+\",\"+p[1],void 0===f[l]&&(f[l]={index1:p[0],index2:p[1]});for(l in f)o=f[l],h.fromBufferAttribute(y,o.index1),d.push(h.x,h.y,h.z),h.fromBufferAttribute(y,o.index2),d.push(h.x,h.y,h.z)}else for(y=e.attributes.position,t=0,r=y.count/3;t<r;t++)for(i=0;i<3;i++)E=3*t+i,h.fromBufferAttribute(y,E),d.push(h.x,h.y,h.z),S=3*t+(i+1)%3,h.fromBufferAttribute(y,S),d.push(h.x,h.y,h.z)}this.addAttribute(\"position\",new Ae(d,3))}function Xt(e,t,i){ye.call(this),this.type=\"ParametricGeometry\",this.parameters={func:e,slices:t,stacks:i},this.fromBufferGeometry(new qt(e,t,i)),this.mergeVertices()}function qt(e,t,i){Pe.call(this),this.type=\"ParametricBufferGeometry\",this.parameters={func:e,slices:t,stacks:i};var r,n,a=[],o=[],s=[],c=[],l=new u,h=new u,d=new u,p=new u,f=new u,m=t+1;for(r=0;r<=i;r++){var v=r/i;for(n=0;n<=t;n++){var g=n/t;h=e(g,v,h),o.push(h.x,h.y,h.z),g-1e-5>=0?(d=e(g-1e-5,v,d),p.subVectors(h,d)):(d=e(g+1e-5,v,d),p.subVectors(d,h)),v-1e-5>=0?(d=e(g,v-1e-5,d),f.subVectors(h,d)):(d=e(g,v+1e-5,d),f.subVectors(d,h)),l.crossVectors(p,f).normalize(),s.push(l.x,l.y,l.z),c.push(g,v)}}for(r=0;r<i;r++)for(n=0;n<t;n++){var y=r*m+n,x=r*m+n+1,_=(r+1)*m+n+1,b=(r+1)*m+n;a.push(y,x,b),a.push(x,_,b)}this.setIndex(a),this.addAttribute(\"position\",new Ae(o,3)),this.addAttribute(\"normal\",new Ae(s,3)),this.addAttribute(\"uv\",new Ae(c,2))}function Yt(e,t,i,r){ye.call(this),this.type=\"PolyhedronGeometry\",this.parameters={vertices:e,indices:t,radius:i,detail:r},this.fromBufferGeometry(new Zt(e,t,i,r)),this.mergeVertices()}function Zt(e,t,i,r){function a(e,t,i,r){var n,a,o=Math.pow(2,r),c=[];for(n=0;n<=o;n++){c[n]=[];var l=e.clone().lerp(i,n/o),u=t.clone().lerp(i,n/o),h=o-n;for(a=0;a<=h;a++)c[n][a]=0===a&&n===o?l:l.clone().lerp(u,a/h)}for(n=0;n<o;n++)for(a=0;a<2*(o-n)-1;a++){var d=Math.floor(a/2);a%2==0?(s(c[n][d+1]),s(c[n+1][d]),s(c[n][d])):(s(c[n][d+1]),s(c[n+1][d+1]),s(c[n+1][d]))}}function o(){for(var e=0;e<m.length;e+=6){var t=m[e+0],i=m[e+2],r=m[e+4],n=Math.max(t,i,r),a=Math.min(t,i,r);n>.9&&a<.1&&(t<.2&&(m[e+0]+=1),i<.2&&(m[e+2]+=1),r<.2&&(m[e+4]+=1))}}function s(e){f.push(e.x,e.y,e.z)}function c(t,i){var r=3*t;i.x=e[r+0],i.y=e[r+1],i.z=e[r+2]}function l(){for(var e=new u,t=new u,i=new u,r=new u,a=new n,o=new n,s=new n,c=0,l=0;c<f.length;c+=9,l+=6){e.set(f[c+0],f[c+1],f[c+2]),t.set(f[c+3],f[c+4],f[c+5]),i.set(f[c+6],f[c+7],f[c+8]),a.set(m[l+0],m[l+1]),o.set(m[l+2],m[l+3]),s.set(m[l+4],m[l+5]),r.copy(e).add(t).add(i).divideScalar(3);var p=d(r);h(a,l+0,e,p),h(o,l+2,t,p),h(s,l+4,i,p)}}function h(e,t,i,r){r<0&&1===e.x&&(m[t]=e.x-1),0===i.x&&0===i.z&&(m[t]=r/2/Math.PI+.5)}function d(e){return Math.atan2(e.z,-e.x)}function p(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}Pe.call(this),this.type=\"PolyhedronBufferGeometry\",this.parameters={vertices:e,indices:t,radius:i,detail:r},i=i||1,r=r||0;var f=[],m=[];!function(e){for(var i=new u,r=new u,n=new u,o=0;o<t.length;o+=3)c(t[o+0],i),c(t[o+1],r),c(t[o+2],n),a(i,r,n,e)}(r),function(e){for(var t=new u,i=0;i<f.length;i+=3)t.x=f[i+0],t.y=f[i+1],t.z=f[i+2],t.normalize().multiplyScalar(e),f[i+0]=t.x,f[i+1]=t.y,f[i+2]=t.z}(i),function(){for(var e=new u,t=0;t<f.length;t+=3){e.x=f[t+0],e.y=f[t+1],e.z=f[t+2];var i=d(e)/2/Math.PI+.5,r=p(e)/Math.PI+.5;m.push(i,1-r)}l(),o()}(),this.addAttribute(\"position\",new Ae(f,3)),this.addAttribute(\"normal\",new Ae(f.slice(),3)),this.addAttribute(\"uv\",new Ae(m,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function Jt(e,t){ye.call(this),this.type=\"TetrahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Kt(e,t)),this.mergeVertices()}function Kt(e,t){var i=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],r=[2,1,0,0,3,2,1,3,0,2,3,1];Zt.call(this,i,r,e,t),this.type=\"TetrahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function Qt(e,t){ye.call(this),this.type=\"OctahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new $t(e,t)),this.mergeVertices()}function $t(e,t){var i=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],r=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];Zt.call(this,i,r,e,t),this.type=\"OctahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function ei(e,t){ye.call(this),this.type=\"IcosahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ti(e,t)),this.mergeVertices()}function ti(e,t){var i=(1+Math.sqrt(5))/2,r=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],n=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];Zt.call(this,r,n,e,t),this.type=\"IcosahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function ii(e,t){ye.call(this),this.type=\"DodecahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ri(e,t)),this.mergeVertices()}function ri(e,t){var i=(1+Math.sqrt(5))/2,r=1/i,n=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-i,0,-r,i,0,r,-i,0,r,i,-r,-i,0,-r,i,0,r,-i,0,r,i,0,-i,0,-r,i,0,-r,-i,0,r,i,0,r],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];Zt.call(this,n,a,e,t),this.type=\"DodecahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function ni(e,t,i,r,n,a){ye.call(this),this.type=\"TubeGeometry\",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:r,closed:n},void 0!==a&&console.warn(\"THREE.TubeGeometry: taper has been removed.\");var o=new ai(e,t,i,r,n);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function ai(e,t,i,r,a){function o(n){var a=e.getPointAt(n/t),o=l.normals[n],s=l.binormals[n];for(d=0;d<=r;d++){var c=d/r*Math.PI*2,u=Math.sin(c),h=-Math.cos(c);f.x=h*o.x+u*s.x,f.y=h*o.y+u*s.y,f.z=h*o.z+u*s.z,f.normalize(),g.push(f.x,f.y,f.z),p.x=a.x+i*f.x,p.y=a.y+i*f.y,p.z=a.z+i*f.z,v.push(p.x,p.y,p.z)}}function s(){for(d=1;d<=t;d++)for(h=1;h<=r;h++){var e=(r+1)*(d-1)+(h-1),i=(r+1)*d+(h-1),n=(r+1)*d+h,a=(r+1)*(d-1)+h;x.push(e,i,a),x.push(i,n,a)}}function c(){for(h=0;h<=t;h++)for(d=0;d<=r;d++)m.x=h/t,m.y=d/r,y.push(m.x,m.y)}Pe.call(this),this.type=\"TubeBufferGeometry\",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:r,closed:a},t=t||64,i=i||1,r=r||8,a=a||!1;var l=e.computeFrenetFrames(t,a);this.tangents=l.tangents,this.normals=l.normals,this.binormals=l.binormals;var h,d,p=new u,f=new u,m=new n,v=[],g=[],y=[],x=[];!function(){for(h=0;h<t;h++)o(h);o(!1===a?t:0),c(),s()}(),this.setIndex(x),this.addAttribute(\"position\",new Ae(v,3)),this.addAttribute(\"normal\",new Ae(g,3)),this.addAttribute(\"uv\",new Ae(y,2))}function oi(e,t,i,r,n,a,o){ye.call(this),this.type=\"TorusKnotGeometry\",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:r,p:n,q:a},void 0!==o&&console.warn(\"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\"),this.fromBufferGeometry(new si(e,t,i,r,n,a)),this.mergeVertices()}function si(e,t,i,r,n,a){function o(e,t,i,r,n){var a=Math.cos(e),o=Math.sin(e),s=i/t*e,c=Math.cos(s);n.x=r*(2+c)*.5*a,n.y=r*(2+c)*o*.5,n.z=r*Math.sin(s)*.5}Pe.call(this),this.type=\"TorusKnotBufferGeometry\",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:r,p:n,q:a},e=e||100,t=t||40,i=Math.floor(i)||64,r=Math.floor(r)||8,n=n||2,a=a||3;var s,c,l=[],h=[],d=[],p=[],f=new u,m=new u,v=new u,g=new u,y=new u,x=new u,_=new u;for(s=0;s<=i;++s){var b=s/i*n*Math.PI*2;for(o(b,n,a,e,v),o(b+.01,n,a,e,g),x.subVectors(g,v),_.addVectors(g,v),y.crossVectors(x,_),_.crossVectors(y,x),y.normalize(),_.normalize(),c=0;c<=r;++c){var w=c/r*Math.PI*2,M=-t*Math.cos(w),E=t*Math.sin(w);f.x=v.x+(M*_.x+E*y.x),f.y=v.y+(M*_.y+E*y.y),f.z=v.z+(M*_.z+E*y.z),h.push(f.x,f.y,f.z),m.subVectors(f,v).normalize(),d.push(m.x,m.y,m.z),p.push(s/i),p.push(c/r)}}for(c=1;c<=i;c++)for(s=1;s<=r;s++){var S=(r+1)*(c-1)+(s-1),T=(r+1)*c+(s-1),A=(r+1)*c+s,L=(r+1)*(c-1)+s;l.push(S,T,L),l.push(T,A,L)}this.setIndex(l),this.addAttribute(\"position\",new Ae(h,3)),this.addAttribute(\"normal\",new Ae(d,3)),this.addAttribute(\"uv\",new Ae(p,2))}function ci(e,t,i,r,n){ye.call(this),this.type=\"TorusGeometry\",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:r,arc:n},this.fromBufferGeometry(new li(e,t,i,r,n)),this.mergeVertices()}function li(e,t,i,r,n){Pe.call(this),this.type=\"TorusBufferGeometry\",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:r,arc:n},e=e||100,t=t||40,i=Math.floor(i)||8,r=Math.floor(r)||6,n=n||2*Math.PI;var a,o,s=[],c=[],l=[],h=[],d=new u,p=new u,f=new u;for(a=0;a<=i;a++)for(o=0;o<=r;o++){var m=o/r*n,v=a/i*Math.PI*2;p.x=(e+t*Math.cos(v))*Math.cos(m),p.y=(e+t*Math.cos(v))*Math.sin(m),p.z=t*Math.sin(v),c.push(p.x,p.y,p.z),d.x=e*Math.cos(m),d.y=e*Math.sin(m),f.subVectors(p,d).normalize(),l.push(f.x,f.y,f.z),h.push(o/r),h.push(a/i)}for(a=1;a<=i;a++)for(o=1;o<=r;o++){var g=(r+1)*a+o-1,y=(r+1)*(a-1)+o-1,x=(r+1)*(a-1)+o,_=(r+1)*a+o;s.push(g,y,_),s.push(y,x,_)}this.setIndex(s),this.addAttribute(\"position\",new Ae(c,3)),this.addAttribute(\"normal\",new Ae(l,3)),this.addAttribute(\"uv\",new Ae(h,2))}function ui(e,t){ye.call(this),this.type=\"ExtrudeGeometry\",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new hi(e,t)),this.mergeVertices()}function hi(e,t){void 0!==e&&(Pe.call(this),this.type=\"ExtrudeBufferGeometry\",e=Array.isArray(e)?e:[e],this.addShapeList(e,t),this.computeVertexNormals())}function di(e,t){ye.call(this),this.type=\"TextGeometry\",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new pi(e,t)),this.mergeVertices()}function pi(e,t){t=t||{};var i=t.font;if(!i||!i.isFont)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new ye;var r=i.generateShapes(e,t.size,t.curveSegments);t.amount=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),hi.call(this,r,t),this.type=\"TextBufferGeometry\"}function fi(e,t,i,r,n,a,o){ye.call(this),this.type=\"SphereGeometry\",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:r,phiLength:n,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new mi(e,t,i,r,n,a,o)),this.mergeVertices()}function mi(e,t,i,r,n,a,o){Pe.call(this),this.type=\"SphereBufferGeometry\",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:r,phiLength:n,thetaStart:a,thetaLength:o},e=e||50,t=Math.max(3,Math.floor(t)||8),i=Math.max(2,Math.floor(i)||6),r=void 0!==r?r:0,n=void 0!==n?n:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,c,l=a+o,h=0,d=[],p=new u,f=new u,m=[],v=[],g=[],y=[];for(c=0;c<=i;c++){var x=[],_=c/i;for(s=0;s<=t;s++){var b=s/t;p.x=-e*Math.cos(r+b*n)*Math.sin(a+_*o),p.y=e*Math.cos(a+_*o),p.z=e*Math.sin(r+b*n)*Math.sin(a+_*o),v.push(p.x,p.y,p.z),f.set(p.x,p.y,p.z).normalize(),g.push(f.x,f.y,f.z),y.push(b,1-_),x.push(h++)}d.push(x)}for(c=0;c<i;c++)for(s=0;s<t;s++){var w=d[c][s+1],M=d[c][s],E=d[c+1][s],S=d[c+1][s+1];(0!==c||a>0)&&m.push(w,M,S),(c!==i-1||l<Math.PI)&&m.push(M,E,S)}this.setIndex(m),this.addAttribute(\"position\",new Ae(v,3)),this.addAttribute(\"normal\",new Ae(g,3)),this.addAttribute(\"uv\",new Ae(y,2))}function vi(e,t,i,r,n,a){ye.call(this),this.type=\"RingGeometry\",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:r,thetaStart:n,thetaLength:a},this.fromBufferGeometry(new gi(e,t,i,r,n,a)),this.mergeVertices()}function gi(e,t,i,r,a,o){Pe.call(this),this.type=\"RingBufferGeometry\",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:r,thetaStart:a,thetaLength:o},e=e||20,t=t||50,a=void 0!==a?a:0,o=void 0!==o?o:2*Math.PI,i=void 0!==i?Math.max(3,i):8,r=void 0!==r?Math.max(1,r):1;var s,c,l,h=[],d=[],p=[],f=[],m=e,v=(t-e)/r,g=new u,y=new n;for(c=0;c<=r;c++){for(l=0;l<=i;l++)s=a+l/i*o,g.x=m*Math.cos(s),g.y=m*Math.sin(s),d.push(g.x,g.y,g.z),p.push(0,0,1),y.x=(g.x/t+1)/2,y.y=(g.y/t+1)/2,f.push(y.x,y.y);m+=v}for(c=0;c<r;c++){var x=c*(i+1);for(l=0;l<i;l++){s=l+x;var _=s,b=s+i+1,w=s+i+2,M=s+1;h.push(_,b,M),h.push(b,w,M)}}this.setIndex(h),this.addAttribute(\"position\",new Ae(d,3)),this.addAttribute(\"normal\",new Ae(p,3)),this.addAttribute(\"uv\",new Ae(f,2))}function yi(e,t,i,r){ye.call(this),this.type=\"LatheGeometry\",this.parameters={points:e,segments:t,phiStart:i,phiLength:r},this.fromBufferGeometry(new xi(e,t,i,r)),this.mergeVertices()}function xi(e,t,i,r){Pe.call(this),this.type=\"LatheBufferGeometry\",this.parameters={points:e,segments:t,phiStart:i,phiLength:r},t=Math.floor(t)||12,i=i||0,r=r||2*Math.PI,r=Wo.clamp(r,0,2*Math.PI);var a,o,s,c=[],l=[],h=[],d=1/t,p=new u,f=new n;for(o=0;o<=t;o++){var m=i+o*d*r,v=Math.sin(m),g=Math.cos(m);for(s=0;s<=e.length-1;s++)p.x=e[s].x*v,p.y=e[s].y,p.z=e[s].x*g,l.push(p.x,p.y,p.z),f.x=o/t,f.y=s/(e.length-1),h.push(f.x,f.y)}for(o=0;o<t;o++)for(s=0;s<e.length-1;s++){a=s+o*e.length;var y=a,x=a+e.length,_=a+e.length+1,b=a+1;c.push(y,x,b),c.push(x,_,b)}if(this.setIndex(c),this.addAttribute(\"position\",new Ae(l,3)),this.addAttribute(\"uv\",new Ae(h,2)),this.computeVertexNormals(),r===2*Math.PI){var w=this.attributes.normal.array,M=new u,E=new u,S=new u;for(a=t*e.length*3,o=0,s=0;o<e.length;o++,s+=3)M.x=w[s+0],M.y=w[s+1],M.z=w[s+2],E.x=w[a+s+0],E.y=w[a+s+1],E.z=w[a+s+2],S.addVectors(M,E).normalize(),w[s+0]=w[a+s+0]=S.x,w[s+1]=w[a+s+1]=S.y,w[s+2]=w[a+s+2]=S.z}}function _i(e,t){ye.call(this),this.type=\"ShapeGeometry\",\"object\"==typeof t&&(console.warn(\"THREE.ShapeGeometry: Options parameter has been removed.\"),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new bi(e,t)),this.mergeVertices()}function bi(e,t){function i(e){var i,s,l,u=n.length/3,h=e.extractPoints(t),d=h.shape,p=h.holes;if(!1===ls.isClockWise(d))for(d=d.reverse(),i=0,s=p.length;i<s;i++)l=p[i],!0===ls.isClockWise(l)&&(p[i]=l.reverse());var f=ls.triangulateShape(d,p);for(i=0,s=p.length;i<s;i++)l=p[i],d=d.concat(l);for(i=0,s=d.length;i<s;i++){var m=d[i];n.push(m.x,m.y,0),a.push(0,0,1),o.push(m.x,m.y)}for(i=0,s=f.length;i<s;i++){var v=f[i],g=v[0]+u,y=v[1]+u,x=v[2]+u;r.push(g,y,x),c+=3}}Pe.call(this),this.type=\"ShapeBufferGeometry\",this.parameters={shapes:e,curveSegments:t},t=t||12;var r=[],n=[],a=[],o=[],s=0,c=0;if(!1===Array.isArray(e))i(e);else for(var l=0;l<e.length;l++)i(e[l]),this.addGroup(s,c,l),s+=c,c=0;this.setIndex(r),this.addAttribute(\"position\",new Ae(n,3)),this.addAttribute(\"normal\",new Ae(a,3)),this.addAttribute(\"uv\",new Ae(o,2))}function wi(e,t){Pe.call(this),this.type=\"EdgesGeometry\",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var i,r,n,a,o=[],s=Math.cos(Wo.DEG2RAD*t),c=[0,0],l={},u=[\"a\",\"b\",\"c\"];e.isBufferGeometry?(a=new ye,a.fromBufferGeometry(e)):a=e.clone(),a.mergeVertices(),a.computeFaceNormals();for(var h=a.vertices,d=a.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],v=0;v<3;v++)i=m[u[v]],r=m[u[(v+1)%3]],c[0]=Math.min(i,r),c[1]=Math.max(i,r),n=c[0]+\",\"+c[1],void 0===l[n]?l[n]={index1:c[0],index2:c[1],face1:p,face2:void 0}:l[n].face2=p;for(n in l){var g=l[n];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=s){var y=h[g.index1];o.push(y.x,y.y,y.z),y=h[g.index2],o.push(y.x,y.y,y.z)}}this.addAttribute(\"position\",new Ae(o,3))}function Mi(e,t,i,r,n,a,o,s){ye.call(this),this.type=\"CylinderGeometry\",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:r,heightSegments:n,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new Ei(e,t,i,r,n,a,o,s)),this.mergeVertices()}function Ei(e,t,i,r,a,o,s,c){function l(i){var a,o,l,g=new n,_=new u,b=0,w=!0===i?e:t,M=!0===i?1:-1;for(o=v,a=1;a<=r;a++)p.push(0,y*M,0),f.push(0,M,0),m.push(.5,.5),v++;for(l=v,a=0;a<=r;a++){var E=a/r,S=E*c+s,T=Math.cos(S),A=Math.sin(S);_.x=w*A,_.y=y*M,_.z=w*T,p.push(_.x,_.y,_.z),f.push(0,M,0),g.x=.5*T+.5,g.y=.5*A*M+.5,m.push(g.x,g.y),v++}for(a=0;a<r;a++){var L=o+a,C=l+a;!0===i?d.push(C,C+1,L):d.push(C+1,C,L),b+=3}h.addGroup(x,b,!0===i?1:2),x+=b}Pe.call(this),this.type=\"CylinderBufferGeometry\",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:r,heightSegments:a,openEnded:o,thetaStart:s,thetaLength:c};var h=this;e=void 0!==e?e:20,t=void 0!==t?t:20,i=void 0!==i?i:100,r=Math.floor(r)||8,a=Math.floor(a)||1,o=void 0!==o&&o,s=void 0!==s?s:0,c=void 0!==c?c:2*Math.PI;var d=[],p=[],f=[],m=[],v=0,g=[],y=i/2,x=0;!function(){var n,o,l=new u,_=new u,b=0,w=(t-e)/i;for(o=0;o<=a;o++){var M=[],E=o/a,S=E*(t-e)+e;for(n=0;n<=r;n++){var T=n/r,A=T*c+s,L=Math.sin(A),C=Math.cos(A);_.x=S*L,_.y=-E*i+y,_.z=S*C,p.push(_.x,_.y,_.z),l.set(L,w,C).normalize(),f.push(l.x,l.y,l.z),m.push(T,1-E),M.push(v++)}g.push(M)}for(n=0;n<r;n++)for(o=0;o<a;o++){var R=g[o][n],P=g[o+1][n],D=g[o+1][n+1],U=g[o][n+1];d.push(R,P,U),d.push(P,D,U),b+=6}h.addGroup(x,b,0),x+=b}(),!1===o&&(e>0&&l(!0),t>0&&l(!1)),this.setIndex(d),this.addAttribute(\"position\",new Ae(p,3)),this.addAttribute(\"normal\",new Ae(f,3)),this.addAttribute(\"uv\",new Ae(m,2))}function Si(e,t,i,r,n,a,o){Mi.call(this,0,e,t,i,r,n,a,o),this.type=\"ConeGeometry\",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:r,openEnded:n,thetaStart:a,thetaLength:o}}function Ti(e,t,i,r,n,a,o){Ei.call(this,0,e,t,i,r,n,a,o),this.type=\"ConeBufferGeometry\",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:r,openEnded:n,thetaStart:a,thetaLength:o}}function Ai(e,t,i,r){ye.call(this),this.type=\"CircleGeometry\",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:r},this.fromBufferGeometry(new Li(e,t,i,r)),this.mergeVertices()}function Li(e,t,i,r){Pe.call(this),this.type=\"CircleBufferGeometry\",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:r},e=e||50,t=void 0!==t?Math.max(3,t):8,i=void 0!==i?i:0,r=void 0!==r?r:2*Math.PI;var a,o,s=[],c=[],l=[],h=[],d=new u,p=new n;for(c.push(0,0,0),l.push(0,0,1),h.push(.5,.5),o=0,a=3;o<=t;o++,a+=3){var f=i+o/t*r;d.x=e*Math.cos(f),d.y=e*Math.sin(f),c.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(c[a]/e+1)/2,p.y=(c[a+1]/e+1)/2,h.push(p.x,p.y)}for(a=1;a<=t;a++)s.push(a,a+1,0);this.setIndex(s),this.addAttribute(\"position\",new Ae(c,3)),this.addAttribute(\"normal\",new Ae(l,3)),this.addAttribute(\"uv\",new Ae(h,2))}function Ci(e){$.call(this),this.type=\"ShadowMaterial\",this.color=new Y(0),this.opacity=1,this.lights=!0,this.transparent=!0,this.setValues(e)}function Ri(e){ee.call(this,e),this.type=\"RawShaderMaterial\"}function Pi(e){$.call(this),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new Y(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Di(e){Pi.call(this),this.defines={PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)}function Ui(e){$.call(this),this.type=\"MeshPhongMaterial\",this.color=new Y(16777215),this.specular=new Y(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Ii(e){Ui.call(this),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.gradientMap=null,this.setValues(e)}function Ni(e){$.call(this),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Oi(e){$.call(this),this.type=\"MeshLambertMaterial\",this.color=new Y(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Fi(e){Nt.call(this),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}function zi(e,t,i){var r=this,n=!1,a=0,o=0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.itemStart=function(e){o++,!1===n&&void 0!==r.onStart&&r.onStart(e,a,o),n=!0},this.itemEnd=function(e){a++,void 0!==r.onProgress&&r.onProgress(e,a,o),a===o&&(n=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)}}function Bi(e){this.manager=void 0!==e?e:ps}function Gi(e){this.manager=void 0!==e?e:ps,this._parser=null}function Vi(e){this.manager=void 0!==e?e:ps,this._parser=null}function Hi(e){this.manager=void 0!==e?e:ps}function ji(e){this.manager=void 0!==e?e:ps}function ki(e){this.manager=void 0!==e?e:ps}function Wi(e,t){de.call(this),this.type=\"Light\",this.color=new Y(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Xi(e,t,i){Wi.call(this,e,i),this.type=\"HemisphereLight\",this.castShadow=void 0,this.position.copy(de.DefaultUp),this.updateMatrix(),this.groundColor=new Y(t)}function qi(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new n(512,512),this.map=null,this.matrix=new h}function Yi(){qi.call(this,new me(50,1,.5,500))}function Zi(e,t,i,r,n,a){Wi.call(this,e,t),this.type=\"SpotLight\",this.position.copy(de.DefaultUp),this.updateMatrix(),this.target=new de,Object.defineProperty(this,\"power\",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==i?i:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==n?n:0,this.decay=void 0!==a?a:1,this.shadow=new Yi}function Ji(e,t,i,r){Wi.call(this,e,t),this.type=\"PointLight\",Object.defineProperty(this,\"power\",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==i?i:0,this.decay=void 0!==r?r:1,this.shadow=new qi(new me(90,1,.5,500))}function Ki(){qi.call(this,new fe(-5,5,5,-5,.5,500))}function Qi(e,t){Wi.call(this,e,t),this.type=\"DirectionalLight\",this.position.copy(de.DefaultUp),this.updateMatrix(),this.target=new de,this.shadow=new Ki}function $i(e,t){Wi.call(this,e,t),this.type=\"AmbientLight\",this.castShadow=void 0}function er(e,t,i,r){Wi.call(this,e,t),this.type=\"RectAreaLight\",this.position.set(0,1,0),this.updateMatrix(),this.width=void 0!==i?i:10,this.height=void 0!==r?r:10}function tr(e,t,i,r){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new t.constructor(i),this.sampleValues=t,this.valueSize=i}function ir(e,t,i,r){tr.call(this,e,t,i,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function rr(e,t,i,r){tr.call(this,e,t,i,r)}function nr(e,t,i,r){tr.call(this,e,t,i,r)}function ar(e,t,i,r){if(void 0===e)throw new Error(\"track name is undefined\");if(void 0===t||0===t.length)throw new Error(\"no keyframes in track named \"+e);this.name=e,this.times=fs.convertArray(t,this.TimeBufferType),this.values=fs.convertArray(i,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation),this.validate(),this.optimize()}function or(e,t,i,r){ar.call(this,e,t,i,r)}function sr(e,t,i,r){tr.call(this,e,t,i,r)}function cr(e,t,i,r){ar.call(this,e,t,i,r)}function lr(e,t,i,r){ar.call(this,e,t,i,r)}function ur(e,t,i,r){ar.call(this,e,t,i,r)}function hr(e,t,i){ar.call(this,e,t,i)}function dr(e,t,i,r){ar.call(this,e,t,i,r)}function pr(e,t,i,r){ar.apply(this,arguments)}function fr(e,t,i){this.name=e,this.tracks=i,this.duration=void 0!==t?t:-1,this.uuid=Wo.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function mr(e){this.manager=void 0!==e?e:ps,this.textures={}}function vr(e){this.manager=void 0!==e?e:ps}function gr(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}}function yr(e){\"boolean\"==typeof e&&(console.warn(\"THREE.JSONLoader: showStatus parameter has been removed from constructor.\"),e=void 0),this.manager=void 0!==e?e:ps,this.withCredentials=!1}function xr(e){this.manager=void 0!==e?e:ps,this.texturePath=\"\"}function _r(e,t,i,r,n){var a=.5*(r-t),o=.5*(n-i),s=e*e;return(2*i-2*r+a+o)*(e*s)+(-3*i+3*r-2*a-o)*s+a*e+i}function br(e,t){var i=1-e;return i*i*t}function wr(e,t){return 2*(1-e)*e*t}function Mr(e,t){return e*e*t}function Er(e,t,i,r){return br(e,t)+wr(e,i)+Mr(e,r)}function Sr(e,t){var i=1-e;return i*i*i*t}function Tr(e,t){var i=1-e;return 3*i*i*e*t}function Ar(e,t){return 3*(1-e)*e*e*t}function Lr(e,t){return e*e*e*t}function Cr(e,t,i,r,n){return Sr(e,t)+Tr(e,i)+Ar(e,r)+Lr(e,n)}function Rr(){this.arcLengthDivisions=200}function Pr(e,t){Rr.call(this),this.v1=e,this.v2=t}function Dr(){Rr.call(this),this.curves=[],this.autoClose=!1}function Ur(e,t,i,r,n,a,o,s){Rr.call(this),this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=r,this.aStartAngle=n,this.aEndAngle=a,this.aClockwise=o,this.aRotation=s||0}function Ir(e){Rr.call(this),this.points=void 0===e?[]:e}function Nr(e,t,i,r){Rr.call(this),this.v0=e,this.v1=t,this.v2=i,this.v3=r}function Or(e,t,i){Rr.call(this),this.v0=e,this.v1=t,this.v2=i}function Fr(e){Dr.call(this),this.currentPoint=new n,e&&this.fromPoints(e)}function zr(){Fr.apply(this,arguments),this.holes=[]}function Br(){this.subPaths=[],this.currentPath=null}function Gr(e){this.data=e}function Vr(e){this.manager=void 0!==e?e:ps}function Hr(e){this.manager=void 0!==e?e:ps}function jr(){this.type=\"StereoCamera\",this.aspect=1,this.eyeSep=.064,this.cameraL=new me,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new me,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function kr(e,t,i){de.call(this),this.type=\"CubeCamera\";var r=new me(90,1,e,t);r.up.set(0,-1,0),r.lookAt(new u(1,0,0)),this.add(r);var n=new me(90,1,e,t);n.up.set(0,-1,0),n.lookAt(new u(-1,0,0)),this.add(n);var a=new me(90,1,e,t);a.up.set(0,0,1),a.lookAt(new u(0,1,0)),this.add(a);var o=new me(90,1,e,t);o.up.set(0,0,-1),o.lookAt(new u(0,-1,0)),this.add(o);var s=new me(90,1,e,t);s.up.set(0,-1,0),s.lookAt(new u(0,0,1)),this.add(s);var l=new me(90,1,e,t);l.up.set(0,-1,0),l.lookAt(new u(0,0,-1)),this.add(l);var h={format:vo,magFilter:$a,minFilter:$a};this.renderTarget=new c(i,i,h),this.renderTarget.texture.name=\"CubeCamera\",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var i=this.renderTarget,c=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,i.activeCubeFace=0,e.render(t,r,i),i.activeCubeFace=1,e.render(t,n,i),i.activeCubeFace=2,e.render(t,a,i),i.activeCubeFace=3,e.render(t,o,i),i.activeCubeFace=4,e.render(t,s,i),i.texture.generateMipmaps=c,i.activeCubeFace=5,e.render(t,l,i),e.setRenderTarget(null)},this.clear=function(e,t,i,r){for(var n=this.renderTarget,a=0;a<6;a++)n.activeCubeFace=a,e.setRenderTarget(n),e.clear(t,i,r);e.setRenderTarget(null)}}function Wr(){de.call(this),this.type=\"AudioListener\",this.context=ws.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function Xr(e){de.call(this),this.type=\"Audio\",this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType=\"empty\",this.filters=[]}function qr(e){Xr.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function Yr(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function Zr(e,t,i){this.binding=e,this.valueSize=i;var r,n=Float64Array;switch(t){case\"quaternion\":r=this._slerp;break;case\"string\":case\"bool\":n=Array,r=this._select;break;default:r=this._lerp}this.buffer=new n(4*i),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}function Jr(e,t,i){var r=i||Kr.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,r)}function Kr(e,t,i){this.path=t,this.parsedPath=i||Kr.parseTrackName(t),this.node=Kr.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function Qr(e){this.uuid=Wo.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var i=0,r=arguments.length;i!==r;++i)t[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}function $r(e,t,i){this._mixer=e,this._clip=t,this._localRoot=i||null;for(var r=t.tracks,n=r.length,a=new Array(n),o={endingStart:Do,endingEnd:Do},s=0;s!==n;++s){var c=r[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(n),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Po,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function en(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function tn(e){\"string\"==typeof e&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),e=arguments[1]),this.value=e}function rn(){Pe.call(this),this.type=\"InstancedBufferGeometry\",this.maxInstancedCount=void 0}function nn(e,t,i,r){this.uuid=Wo.generateUUID(),this.data=e,this.itemSize=t,this.offset=i,this.normalized=!0===r}function an(e,t){this.uuid=Wo.generateUUID(),this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function on(e,t,i){an.call(this,e,t),this.meshPerAttribute=i||1}function sn(e,t,i){xe.call(this,e,t),this.meshPerAttribute=i||1}function cn(e,t,i,r){this.ray=new Fe(e,t),this.near=i||0,this.far=r||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn(\"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\"),this.Points}}})}function ln(e,t){return e.distance-t.distance}function un(e,t,i,r){if(!1!==e.visible&&(e.raycast(t,i),!0===r))for(var n=e.children,a=0,o=n.length;a<o;a++)un(n[a],t,i,!0)}function hn(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function dn(e,t,i){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==i?i:0,this}function pn(e,t,i){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==i?i:0,this}function fn(e){de.call(this),this.material=e,this.render=function(e){}}function mn(e,t,i,r){this.object=e,this.size=void 0!==t?t:1;var n=void 0!==i?i:16711680,a=void 0!==r?r:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var c=new Pe,l=new Ae(2*o*3,3);c.addAttribute(\"position\",l),Ft.call(this,c,new Nt({color:n,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function vn(e,t){de.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var i=new Pe,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],n=0,a=1;n<32;n++,a++){var o=n/32*Math.PI*2,s=a/32*Math.PI*2;r.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}i.addAttribute(\"position\",new Ae(r,3));var c=new Nt({fog:!1});this.cone=new Ft(i,c),this.add(this.cone),this.update()}function gn(e){var t=[];e&&e.isBone&&t.push(e);for(var i=0;i<e.children.length;i++)t.push.apply(t,gn(e.children[i]));return t}function yn(e){for(var t=gn(e),i=new Pe,r=[],n=[],a=new Y(0,0,1),o=new Y(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),n.push(a.r,a.g,a.b),n.push(o.r,o.g,o.b))}i.addAttribute(\"position\",new Ae(r,3)),i.addAttribute(\"color\",new Ae(n,3));var l=new Nt({vertexColors:ta,depthTest:!1,depthWrite:!1,transparent:!0});Ft.call(this,i,l),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.onBeforeRender()}function xn(e,t,i){this.light=e,this.light.updateMatrixWorld(),this.color=i;var r=new mi(t,4,2),n=new Oe({wireframe:!0,fog:!1});Ge.call(this,r,n),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function _n(e,t){de.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;var i=new Nt({fog:!1}),r=new Pe;r.addAttribute(\"position\",new xe(new Float32Array(15),3)),this.line=new Ot(r,i),this.add(this.line),this.update()}function bn(e,t,i){de.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i;var r=new $t(t);r.rotateY(.5*Math.PI),this.material=new Oe({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=ta);var n=r.getAttribute(\"position\"),a=new Float32Array(3*n.count);r.addAttribute(\"color\",new xe(a,3)),this.add(new Ge(r,this.material)),this.update()}function wn(e,t,i,r){e=e||10,t=t||10,i=new Y(void 0!==i?i:4473924),r=new Y(void 0!==r?r:8947848);for(var n=t/2,a=e/t,o=e/2,s=[],c=[],l=0,u=0,h=-o;l<=t;l++,h+=a){s.push(-o,0,h,o,0,h),s.push(h,0,-o,h,0,o);var d=l===n?i:r;d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3}var p=new Pe;p.addAttribute(\"position\",new Ae(s,3)),p.addAttribute(\"color\",new Ae(c,3));var f=new Nt({vertexColors:ta});Ft.call(this,p,f)}function Mn(e,t,i,r,n,a){e=e||10,t=t||16,i=i||8,r=r||64,n=new Y(void 0!==n?n:4473924),a=new Y(void 0!==a?a:8947848);var o,s,c,l,u,h,d,p=[],f=[];for(l=0;l<=t;l++)c=l/t*(2*Math.PI),o=Math.sin(c)*e,s=Math.cos(c)*e,p.push(0,0,0),p.push(o,0,s),d=1&l?n:a,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(l=0;l<=i;l++)for(d=1&l?n:a,h=e-e/i*l,u=0;u<r;u++)c=u/r*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b),c=(u+1)/r*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b);var m=new Pe;m.addAttribute(\"position\",new Ae(p,3)),m.addAttribute(\"color\",new Ae(f,3));var v=new Nt({vertexColors:ta});Ft.call(this,m,v)}function En(e,t,i,r){this.object=e,this.size=void 0!==t?t:1;var n=void 0!==i?i:16776960,a=void 0!==r?r:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn(\"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\");var c=new Pe,l=new Ae(2*o*3,3);c.addAttribute(\"position\",l),Ft.call(this,c,new Nt({color:n,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function Sn(e,t,i){de.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,void 0===t&&(t=1);var r=new Pe;r.addAttribute(\"position\",new Ae([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var n=new Nt({fog:!1});this.lightPlane=new Ot(r,n),this.add(this.lightPlane),r=new Pe,r.addAttribute(\"position\",new Ae([0,0,0,0,0,1],3)),this.targetLine=new Ot(r,n),this.add(this.targetLine),this.update()}function Tn(e){function t(e,t,r){i(e,r),i(t,r)}function i(e,t){a.push(0,0,0),o.push(t.r,t.g,t.b),void 0===s[e]&&(s[e]=[]),s[e].push(a.length/3-1)}var r=new Pe,n=new Nt({color:16777215,vertexColors:ea}),a=[],o=[],s={},c=new Y(16755200),l=new Y(16711680),u=new Y(43775),h=new Y(16777215),d=new Y(3355443);t(\"n1\",\"n2\",c),t(\"n2\",\"n4\",c),t(\"n4\",\"n3\",c),t(\"n3\",\"n1\",c),t(\"f1\",\"f2\",c),t(\"f2\",\"f4\",c),t(\"f4\",\"f3\",c),t(\"f3\",\"f1\",c),t(\"n1\",\"f1\",c),t(\"n2\",\"f2\",c),t(\"n3\",\"f3\",c),t(\"n4\",\"f4\",c),t(\"p\",\"n1\",l),t(\"p\",\"n2\",l),t(\"p\",\"n3\",l),t(\"p\",\"n4\",l),t(\"u1\",\"u2\",u),t(\"u2\",\"u3\",u),t(\"u3\",\"u1\",u),t(\"c\",\"t\",h),t(\"p\",\"c\",d),t(\"cn1\",\"cn2\",d),t(\"cn3\",\"cn4\",d),t(\"cf1\",\"cf2\",d),t(\"cf3\",\"cf4\",d),r.addAttribute(\"position\",new Ae(a,3)),r.addAttribute(\"color\",new Ae(o,3)),Ft.call(this,r,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update()}function An(e,t){this.object=e,void 0===t&&(t=16776960);var i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),n=new Pe;n.setIndex(new xe(i,1)),n.addAttribute(\"position\",new xe(r,3)),Ft.call(this,n,new Nt({color:t})),this.matrixAutoUpdate=!1,this.update()}function Ln(e,t){this.type=\"Box3Helper\",this.box=e;var i=void 0!==t?t:16776960,r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],a=new Pe;a.setIndex(new xe(r,1)),a.addAttribute(\"position\",new Ae(n,3)),Ft.call(this,a,new Nt({color:i})),this.geometry.computeBoundingSphere(),this.onBeforeRender()}function Cn(e,t,i){this.type=\"PlaneHelper\",this.plane=e,this.size=void 0===t?1:t;var r=void 0!==i?i:16776960,n=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],a=new Pe;a.addAttribute(\"position\",new Ae(n,3)),a.computeBoundingSphere(),Ot.call(this,a,new Nt({color:r}));var o=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],s=new Pe;s.addAttribute(\"position\",new Ae(o,3)),s.computeBoundingSphere(),this.add(new Ge(s,new Oe({color:r,opacity:.2,transparent:!0,depthWrite:!1}))),this.onBeforeRender()}function Rn(e,t,i,r,n,a){de.call(this),void 0===r&&(r=16776960),void 0===i&&(i=1),void 0===n&&(n=.2*i),void 0===a&&(a=.2*n),void 0===Ms&&(Ms=new Pe,Ms.addAttribute(\"position\",new Ae([0,0,0,0,1,0],3)),Es=new Ei(0,.5,1,5,1),Es.translate(0,-.5,0)),this.position.copy(t),this.line=new Ot(Ms,new Nt({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ge(Es,new Oe({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(i,n,a)}function Pn(e){e=e||1;var t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],i=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],r=new Pe;r.addAttribute(\"position\",new Ae(t,3)),r.addAttribute(\"color\",new Ae(i,3));var n=new Nt({vertexColors:ta});Ft.call(this,r,n)}function Dn(){function e(e,a,o,s){t=e,i=o,r=-3*e+3*a-2*o-s,n=2*e-2*a+o+s}var t=0,i=0,r=0,n=0;return{initCatmullRom:function(t,i,r,n,a){e(i,r,a*(r-t),a*(n-i))},initNonuniformCatmullRom:function(t,i,r,n,a,o,s){var c=(i-t)/a-(r-t)/(a+o)+(r-i)/o,l=(r-i)/o-(n-i)/(o+s)+(n-r)/s;c*=o,l*=o,e(i,r,c,l)},calc:function(e){var a=e*e;return t+i*e+r*a+n*(a*e)}}}function Un(e){Rr.call(this),e.length<2&&console.warn(\"THREE.CatmullRomCurve3: Points array needs at least two entries.\"),this.points=e||[],this.closed=!1}function In(e,t,i,r){Rr.call(this),this.v0=e,this.v1=t,this.v2=i,this.v3=r}function Nn(e,t,i){Rr.call(this),this.v0=e,this.v1=t,this.v2=i}function On(e,t){Rr.call(this),this.v1=e,this.v2=t}function Fn(e,t,i,r,n,a){Ur.call(this,e,t,i,i,r,n,a)}function zn(e){console.warn(\"THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Un.call(this,e),this.type=\"catmullrom\",this.closed=!0}function Bn(e){console.warn(\"THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Un.call(this,e),this.type=\"catmullrom\"}function Gn(e){console.warn(\"THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.\"),Un.call(this,e),this.type=\"catmullrom\"}function Vn(e){return console.warn(\"THREE.XHRLoader has been renamed to THREE.FileLoader.\"),new Bi(e)}i.d(t,\"_53\",function(){return s}),i.d(t,\"_34\",function(){return ns}),i.d(t,\"_46\",function(){return is}),i.d(t,\"_33\",function(){return rs}),i.d(t,\"_31\",function(){return At}),i.d(t,\"_3\",function(){return Ge}),i.d(t,\"u\",function(){return d}),i.d(t,\"_41\",function(){return a}),i.d(t,\"p\",function(){return Gi}),i.d(t,\"_42\",function(){return ki}),i.d(t,\"v\",function(){return ps}),i.d(t,\"F\",function(){return Bi}),i.d(t,\"W\",function(){return gr}),i.d(t,\"_16\",function(){return me}),i.d(t,\"_14\",function(){return fe}),i.d(t,\"k\",function(){return Pe}),i.d(t,\"N\",function(){return ye}),i.d(t,\"E\",function(){return ve}),i.d(t,\"_12\",function(){return de}),i.d(t,\"C\",function(){return r}),i.d(t,\"_2\",function(){return Wo}),i.d(t,\"_39\",function(){return dn}),i.d(t,\"_49\",function(){return u}),i.d(t,\"_48\",function(){return n}),i.d(t,\"_18\",function(){return l}),i.d(t,\"m\",function(){return Y}),i.d(t,\"S\",function(){return fn}),i.d(t,\"_17\",function(){return Ne}),i.d(t,\"_35\",function(){return ee}),i.d(t,\"_7\",function(){return Ui}),i.d(t,\"_6\",function(){return Oi}),i.d(t,\"_5\",function(){return te}),i.d(t,\"_4\",function(){return Oe}),i.d(t,\"j\",function(){return xe}),i.d(t,\"Y\",function(){return jn}),i.d(t,\"L\",function(){return Jn}),i.d(t,\"_9\",function(){return ia}),i.d(t,\"b\",function(){return na}),i.d(t,\"_27\",function(){return qa}),i.d(t,\"U\",function(){return $a}),i.d(t,\"V\",function(){return to}),i.d(t,\"I\",function(){return co}),i.d(t,\"_22\",function(){return vo}),i.d(t,\"_19\",function(){return go}),i.d(t,\"_25\",function(){return wo}),i.d(t,\"_20\",function(){return Eo}),i.d(t,\"_21\",function(){return So}),i.d(t,\"_24\",function(){return Ro}),i.d(t,\"_54\",function(){return Vn}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return\"number\"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1]}}),void 0===Object.assign&&function(){Object.assign=function(e){if(void 0===e||null===e)throw new TypeError(\"Cannot convert undefined or null to object\");for(var t=Object(e),i=1;i<arguments.length;i++){var r=arguments[i];if(void 0!==r&&null!==r)for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}}(),Object.assign(r.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[e]&&(i[e]=[]),-1===i[e].indexOf(t)&&i[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var i=this._listeners;return void 0!==i[e]&&-1!==i[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var i=this._listeners,r=i[e];if(void 0!==r){var n=r.indexOf(t);-1!==n&&r.splice(n,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners,i=t[e.type];if(void 0!==i){e.target=this;for(var r=i.slice(0),n=0,a=r.length;n<a;n++)r[n].call(this,e)}}}});var Hn=\"87\",jn={LEFT:0,MIDDLE:1,RIGHT:2},kn=0,Wn=1,Xn=2,qn=0,Yn=1,Zn=2,Jn=0,Kn=1,Qn=2,$n=0,ea=1,ta=2,ia=0,ra=1,na=2,aa=3,oa=4,sa=5,ca=100,la=101,ua=102,ha=103,da=104,pa=200,fa=201,ma=202,va=203,ga=204,ya=205,xa=206,_a=207,ba=208,wa=209,Ma=210,Ea=0,Sa=1,Ta=2,Aa=3,La=4,Ca=5,Ra=6,Pa=7,Da=0,Ua=1,Ia=2,Na=0,Oa=1,Fa=2,za=3,Ba=4,Ga=301,Va=302,Ha=303,ja=304,ka=305,Wa=306,Xa=307,qa=1e3,Ya=1001,Za=1002,Ja=1003,Ka=1004,Qa=1005,$a=1006,eo=1007,to=1008,io=1009,ro=1010,no=1011,ao=1012,oo=1013,so=1014,co=1015,lo=1016,uo=1017,ho=1018,po=1019,fo=1020,mo=1021,vo=1022,go=1023,yo=1024,xo=1025,_o=1026,bo=1027,wo=2001,Mo=2002,Eo=2003,So=2004,To=2100,Ao=2101,Lo=2102,Co=2103,Ro=2151,Po=2201,Do=2400,Uo=0,Io=1,No=2,Oo=3e3,Fo=3001,zo=3007,Bo=3002,Go=3004,Vo=3005,Ho=3006,jo=3200,ko=3201,Wo={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\"),i=new Array(36),r=0;return function(){for(var n=0;n<36;n++)8===n||13===n||18===n||23===n?i[n]=\"-\":14===n?i[n]=\"4\":(r<=2&&(r=33554432+16777216*Math.random()|0),e=15&r,r>>=4,i[n]=t[19===n?3&e|8:e]);return i.join(\"\")}}(),clamp:function(e,t,i){return Math.max(t,Math.min(i,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,i,r,n){return r+(e-t)*(n-r)/(i-t)},lerp:function(e,t,i){return(1-i)*e+i*t},smoothstep:function(e,t,i){return e<=t?0:e>=i?1:(e=(e-t)/(i-t))*e*(3-2*e)},smootherstep:function(e,t,i){return e<=t?0:e>=i?1:(e=(e-t)/(i-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*Wo.DEG2RAD},radToDeg:function(e){return e*Wo.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},nearestPowerOfTwo:function(e){return Math.pow(2,Math.round(Math.log(e)/Math.LN2))},nextPowerOfTwo:function(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,++e}};Object.defineProperties(n.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(n.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(){var e=new n,t=new n;return function(i,r){return e.set(i,i),t.set(r,r),this.clamp(e,t)}}(),clampLength:function(e,t){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,i=this.y-e.y;return t*t+i*i},distanceToManhattan:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,i){return this.subVectors(t,e).multiplyScalar(i).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,i){return void 0!==i&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var i=Math.cos(t),r=Math.sin(t),n=this.x-e.x,a=this.y-e.y;return this.x=n*i-a*r+e.x,this.y=n*r+a*i+e.y,this}});var Xo=0;a.DEFAULT_IMAGE=void 0,a.DEFAULT_MAPPING=300,Object.defineProperty(a.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(a.prototype,r.prototype,{constructor:a,isTexture:!0,clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){if(void 0!==e.textures[this.uuid])return e.textures[this.uuid];var t={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var i=this.image;void 0===i.uuid&&(i.uuid=Wo.generateUUID()),void 0===e.images[i.uuid]&&(e.images[i.uuid]={uuid:i.uuid,url:function(e){var t;if(e instanceof HTMLCanvasElement)t=e;else{t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"),t.width=e.width,t.height=e.height;var i=t.getContext(\"2d\");e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0,e.width,e.height)}return t.width>2048||t.height>2048?t.toDataURL(\"image/jpeg\",.6):t.toDataURL(\"image/png\")}(i)}),t.image=i.uuid}return e.textures[this.uuid]=t,t},dispose:function(){this.dispatchEvent({type:\"dispose\"})},transformUv:function(e){if(300===this.mapping){if(e.multiply(this.repeat),e.add(this.offset),e.x<0||e.x>1)switch(this.wrapS){case qa:e.x=e.x-Math.floor(e.x);break;case Ya:e.x=e.x<0?0:1;break;case Za:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case qa:e.y=e.y-Math.floor(e.y);break;case Ya:e.y=e.y<0?0:1;break;case Za:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}}),Object.assign(o.prototype,{isVector4:!0,set:function(e,t,i,r){return this.x=e,this.y=t,this.z=i,this.w=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,i=this.y,r=this.z,n=this.w,a=e.elements;return this.x=a[0]*t+a[4]*i+a[8]*r+a[12]*n,this.y=a[1]*t+a[5]*i+a[9]*r+a[13]*n,this.z=a[2]*t+a[6]*i+a[10]*r+a[14]*n,this.w=a[3]*t+a[7]*i+a[11]*r+a[15]*n,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,i,r,n,a=e.elements,o=a[0],s=a[4],c=a[8],l=a[1],u=a[5],h=a[9],d=a[2],p=a[6],f=a[10];if(Math.abs(s-l)<.01&&Math.abs(c-d)<.01&&Math.abs(h-p)<.01){if(Math.abs(s+l)<.1&&Math.abs(c+d)<.1&&Math.abs(h+p)<.1&&Math.abs(o+u+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(o+1)/2,v=(u+1)/2,g=(f+1)/2,y=(s+l)/4,x=(c+d)/4,_=(h+p)/4;return m>v&&m>g?m<.01?(i=0,r=.707106781,n=.707106781):(i=Math.sqrt(m),r=y/i,n=x/i):v>g?v<.01?(i=.707106781,r=0,n=.707106781):(r=Math.sqrt(v),i=y/r,n=_/r):g<.01?(i=.707106781,r=.707106781,n=0):(n=Math.sqrt(g),i=x/n,r=_/n),this.set(i,r,n,t),this}var b=Math.sqrt((p-h)*(p-h)+(c-d)*(c-d)+(l-s)*(l-s));return Math.abs(b)<.001&&(b=1),this.x=(p-h)/b,this.y=(c-d)/b,this.z=(l-s)/b,this.w=Math.acos((o+u+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(){var e,t;return function(i,r){return void 0===e&&(e=new o,t=new o),e.set(i,i,i,i),t.set(r,r,r,r),this.clamp(e,t)}}(),clampLength:function(e,t){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,i){return this.subVectors(t,e).multiplyScalar(i).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,i){return void 0!==i&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),Object.assign(s.prototype,r.prototype,{isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),c.prototype=Object.create(s.prototype),c.prototype.constructor=c,c.prototype.isWebGLRenderTargetCube=!0,Object.assign(l,{slerp:function(e,t,i,r){return i.copy(e).slerp(t,r)},slerpFlat:function(e,t,i,r,n,a,o){var s=i[r+0],c=i[r+1],l=i[r+2],u=i[r+3],h=n[a+0],d=n[a+1],p=n[a+2],f=n[a+3];if(u!==f||s!==h||c!==d||l!==p){var m=1-o,v=s*h+c*d+l*p+u*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),_=Math.atan2(x,v*g);m=Math.sin(m*_)/x,o=Math.sin(o*_)/x}var b=o*g;if(s=s*m+h*b,c=c*m+d*b,l=l*m+p*b,u=u*m+f*b,m===1-o){var w=1/Math.sqrt(s*s+c*c+l*l+u*u);s*=w,c*=w,l*=w,u*=w}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=u}}),Object.defineProperties(l.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this.onChangeCallback()}}}),Object.assign(l.prototype,{set:function(e,t,i,r){return this._x=e,this._y=t,this._z=i,this._w=r,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");var i=e._x,r=e._y,n=e._z,a=e.order,o=Math.cos,s=Math.sin,c=o(i/2),l=o(r/2),u=o(n/2),h=s(i/2),d=s(r/2),p=s(n/2);return\"XYZ\"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):\"YXZ\"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):\"ZXY\"===a?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):\"ZYX\"===a?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):\"YZX\"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u-h*d*p):\"XZY\"===a&&(this._x=h*l*u-c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u+h*d*p),!1!==t&&this.onChangeCallback(),this},setFromAxisAngle:function(e,t){var i=t/2,r=Math.sin(i);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(i),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var t,i=e.elements,r=i[0],n=i[4],a=i[8],o=i[1],s=i[5],c=i[9],l=i[2],u=i[6],h=i[10],d=r+s+h;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(u-c)*t,this._y=(a-l)*t,this._z=(o-n)*t):r>s&&r>h?(t=2*Math.sqrt(1+r-s-h),this._w=(u-c)/t,this._x=.25*t,this._y=(n+o)/t,this._z=(a+l)/t):s>h?(t=2*Math.sqrt(1+s-r-h),this._w=(a-l)/t,this._x=(n+o)/t,this._y=.25*t,this._z=(c+u)/t):(t=2*Math.sqrt(1+h-r-s),this._w=(o-n)/t,this._x=(a+l)/t,this._y=(c+u)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,t=new u;return function(i,r){return void 0===t&&(t=new u),e=i.dot(r)+1,e<1e-6?(e=0,Math.abs(i.x)>Math.abs(i.z)?t.set(-i.y,i.x,0):t.set(0,-i.z,i.y)):t.crossVectors(i,r),this._x=t.x,this._y=t.y,this._z=t.z,this._w=e,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var i=e._x,r=e._y,n=e._z,a=e._w,o=t._x,s=t._y,c=t._z,l=t._w;return this._x=i*l+a*o+r*c-n*s,this._y=r*l+a*s+n*o-i*c,this._z=n*l+a*c+i*s-r*o,this._w=a*l-i*o-r*s-n*c,this.onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var i=this._x,r=this._y,n=this._z,a=this._w,o=a*e._w+i*e._x+r*e._y+n*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=i,this._y=r,this._z=n,this;var s=Math.sqrt(1-o*o);if(Math.abs(s)<.001)return this._w=.5*(a+this._w),this._x=.5*(i+this._x),this._y=.5*(r+this._y),this._z=.5*(n+this._z),this;var c=Math.atan2(s,o),l=Math.sin((1-t)*c)/s,u=Math.sin(t*c)/s;return this._w=a*l+this._w*u,this._x=i*l+this._x*u,this._y=r*l+this._y*u,this._z=n*l+this._z*u,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(u.prototype,{isVector3:!0,set:function(e,t,i){return this.x=e,this.y=t,this.z=i,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(){var e=new l;return function(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(e.setFromEuler(t))}}(),applyAxisAngle:function(){var e=new l;return function(t,i){return this.applyQuaternion(e.setFromAxisAngle(t,i))}}(),applyMatrix3:function(e){var t=this.x,i=this.y,r=this.z,n=e.elements;return this.x=n[0]*t+n[3]*i+n[6]*r,this.y=n[1]*t+n[4]*i+n[7]*r,this.z=n[2]*t+n[5]*i+n[8]*r,this},applyMatrix4:function(e){var t=this.x,i=this.y,r=this.z,n=e.elements,a=1/(n[3]*t+n[7]*i+n[11]*r+n[15]);return this.x=(n[0]*t+n[4]*i+n[8]*r+n[12])*a,this.y=(n[1]*t+n[5]*i+n[9]*r+n[13])*a,this.z=(n[2]*t+n[6]*i+n[10]*r+n[14])*a,this},applyQuaternion:function(e){var t=this.x,i=this.y,r=this.z,n=e.x,a=e.y,o=e.z,s=e.w,c=s*t+a*r-o*i,l=s*i+o*t-n*r,u=s*r+n*i-a*t,h=-n*t-a*i-o*r;return this.x=c*s+h*-n+l*-o-u*-a,this.y=l*s+h*-a+u*-n-c*-o,this.z=u*s+h*-o+c*-a-l*-n,this},project:function(){var e=new h;return function(t){return e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyMatrix4(e)}}(),unproject:function(){var e=new h;return function(t){return e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyMatrix4(e)}}(),transformDirection:function(e){var t=this.x,i=this.y,r=this.z,n=e.elements;return this.x=n[0]*t+n[4]*i+n[8]*r,this.y=n[1]*t+n[5]*i+n[9]*r,this.z=n[2]*t+n[6]*i+n[10]*r,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(){var e=new u,t=new u;return function(i,r){return e.set(i,i,i),t.set(r,r,r),this.clamp(e,t)}}(),clampLength:function(e,t){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,i){return this.subVectors(t,e).multiplyScalar(i).add(e)},cross:function(e,t){if(void 0!==t)return console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(e,t);var i=this.x,r=this.y,n=this.z;return this.x=r*e.z-n*e.y,this.y=n*e.x-i*e.z,this.z=i*e.y-r*e.x,this},crossVectors:function(e,t){var i=e.x,r=e.y,n=e.z,a=t.x,o=t.y,s=t.z;return this.x=r*s-n*o,this.y=n*a-i*s,this.z=i*o-r*a,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(){var e=new u;return function(t){return e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e=new u;return function(t){return this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(Wo.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,i=this.y-e.y,r=this.z-e.z;return t*t+i*i+r*r},distanceToManhattan:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){var t=Math.sin(e.phi)*e.radius;return this.x=t*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=t*Math.cos(e.theta),this},setFromCylindrical:function(e){return this.x=e.radius*Math.sin(e.theta),this.y=e.y,this.z=e.radius*Math.cos(e.theta),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=r,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,i){return void 0!==i&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}}),Object.assign(h.prototype,{isMatrix4:!0,set:function(e,t,i,r,n,a,o,s,c,l,u,h,d,p,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=i,v[12]=r,v[1]=n,v[5]=a,v[9]=o,v[13]=s,v[2]=c,v[6]=l,v[10]=u,v[14]=h,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new h).fromArray(this.elements)},copy:function(e){var t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this},copyPosition:function(e){var t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this},extractBasis:function(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this},extractRotation:function(){var e=new u;return function(t){var i=this.elements,r=t.elements,n=1/e.setFromMatrixColumn(t,0).length(),a=1/e.setFromMatrixColumn(t,1).length(),o=1/e.setFromMatrixColumn(t,2).length();return i[0]=r[0]*n,i[1]=r[1]*n,i[2]=r[2]*n,i[4]=r[4]*a,i[5]=r[5]*a,i[6]=r[6]*a,i[8]=r[8]*o,i[9]=r[9]*o,i[10]=r[10]*o,this}}(),makeRotationFromEuler:function(e){e&&e.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var t=this.elements,i=e.x,r=e.y,n=e.z,a=Math.cos(i),o=Math.sin(i),s=Math.cos(r),c=Math.sin(r),l=Math.cos(n),u=Math.sin(n);if(\"XYZ\"===e.order){var h=a*l,d=a*u,p=o*l,f=o*u;t[0]=s*l,t[4]=-s*u,t[8]=c,t[1]=d+p*c,t[5]=h-f*c,t[9]=-o*s,t[2]=f-h*c,t[6]=p+d*c,t[10]=a*s}else if(\"YXZ\"===e.order){var m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m+y*o,t[4]=g*o-v,t[8]=a*c,t[1]=a*u,t[5]=a*l,t[9]=-o,t[2]=v*o-g,t[6]=y+m*o,t[10]=a*s}else if(\"ZXY\"===e.order){var m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m-y*o,t[4]=-a*u,t[8]=g+v*o,t[1]=v+g*o,t[5]=a*l,t[9]=y-m*o,t[2]=-a*c,t[6]=o,t[10]=a*s}else if(\"ZYX\"===e.order){var h=a*l,d=a*u,p=o*l,f=o*u;t[0]=s*l,t[4]=p*c-d,t[8]=h*c+f,t[1]=s*u,t[5]=f*c+h,t[9]=d*c-p,t[2]=-c,t[6]=o*s,t[10]=a*s}else if(\"YZX\"===e.order){var x=a*s,_=a*c,b=o*s,w=o*c;t[0]=s*l,t[4]=w-x*u,t[8]=b*u+_,t[1]=u,t[5]=a*l,t[9]=-o*l,t[2]=-c*l,t[6]=_*u+b,t[10]=x-w*u}else if(\"XZY\"===e.order){var x=a*s,_=a*c,b=o*s,w=o*c;t[0]=s*l,t[4]=-u,t[8]=c*l,t[1]=x*u+w,t[5]=a*l,t[9]=_*u-b,t[2]=b*u-_,t[6]=o*l,t[10]=w*u+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){var t=this.elements,i=e._x,r=e._y,n=e._z,a=e._w,o=i+i,s=r+r,c=n+n,l=i*o,u=i*s,h=i*c,d=r*s,p=r*c,f=n*c,m=a*o,v=a*s,g=a*c;return t[0]=1-(d+f),t[4]=u-g,t[8]=h+v,t[1]=u+g,t[5]=1-(l+f),t[9]=p-m,t[2]=h-v,t[6]=p+m,t[10]=1-(l+d),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},lookAt:function(){var e=new u,t=new u,i=new u;return function(r,n,a){var o=this.elements;return i.subVectors(r,n),0===i.lengthSq()&&(i.z=1),i.normalize(),e.crossVectors(a,i),0===e.lengthSq()&&(1===Math.abs(a.z)?i.x+=1e-4:i.z+=1e-4,i.normalize(),e.crossVectors(a,i)),e.normalize(),t.crossVectors(i,e),o[0]=e.x,o[4]=t.x,o[8]=i.x,o[1]=e.y,o[5]=t.y,o[9]=i.y,o[2]=e.z,o[6]=t.z,o[10]=i.z,this}}(),multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var i=e.elements,r=t.elements,n=this.elements,a=i[0],o=i[4],s=i[8],c=i[12],l=i[1],u=i[5],h=i[9],d=i[13],p=i[2],f=i[6],m=i[10],v=i[14],g=i[3],y=i[7],x=i[11],_=i[15],b=r[0],w=r[4],M=r[8],E=r[12],S=r[1],T=r[5],A=r[9],L=r[13],C=r[2],R=r[6],P=r[10],D=r[14],U=r[3],I=r[7],N=r[11],O=r[15];return n[0]=a*b+o*S+s*C+c*U,n[4]=a*w+o*T+s*R+c*I,n[8]=a*M+o*A+s*P+c*N,n[12]=a*E+o*L+s*D+c*O,n[1]=l*b+u*S+h*C+d*U,n[5]=l*w+u*T+h*R+d*I,n[9]=l*M+u*A+h*P+d*N,n[13]=l*E+u*L+h*D+d*O,n[2]=p*b+f*S+m*C+v*U,n[6]=p*w+f*T+m*R+v*I,n[10]=p*M+f*A+m*P+v*N,n[14]=p*E+f*L+m*D+v*O,n[3]=g*b+y*S+x*C+_*U,n[7]=g*w+y*T+x*R+_*I,n[11]=g*M+y*A+x*P+_*N,n[15]=g*E+y*L+x*D+_*O,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(){var e=new u;return function(t){for(var i=0,r=t.count;i<r;i++)e.x=t.getX(i),e.y=t.getY(i),e.z=t.getZ(i),e.applyMatrix4(this),t.setXYZ(i,e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],i=e[4],r=e[8],n=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],u=e[6],h=e[10],d=e[14];return e[3]*(+n*s*u-r*c*u-n*o*h+i*c*h+r*o*d-i*s*d)+e[7]*(+t*s*d-t*c*h+n*a*h-r*a*d+r*c*l-n*s*l)+e[11]*(+t*c*u-t*o*d-n*a*u+i*a*d+n*o*l-i*c*l)+e[15]*(-r*o*l-t*s*u+t*o*h+r*a*u-i*a*h+i*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var i=this.elements,r=e.elements,n=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],u=r[6],h=r[7],d=r[8],p=r[9],f=r[10],m=r[11],v=r[12],g=r[13],y=r[14],x=r[15],_=p*y*h-g*f*h+g*u*m-l*y*m-p*u*x+l*f*x,b=v*f*h-d*y*h-v*u*m+c*y*m+d*u*x-c*f*x,w=d*g*h-v*p*h+v*l*m-c*g*m-d*l*x+c*p*x,M=v*p*u-d*g*u-v*l*f+c*g*f+d*l*y-c*p*y,E=n*_+a*b+o*w+s*M;if(0===E){var S=\"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";if(!0===t)throw new Error(S);return console.warn(S),this.identity()}var T=1/E;return i[0]=_*T,i[1]=(g*f*s-p*y*s-g*o*m+a*y*m+p*o*x-a*f*x)*T,i[2]=(l*y*s-g*u*s+g*o*h-a*y*h-l*o*x+a*u*x)*T,i[3]=(p*u*s-l*f*s-p*o*h+a*f*h+l*o*m-a*u*m)*T,i[4]=b*T,i[5]=(d*y*s-v*f*s+v*o*m-n*y*m-d*o*x+n*f*x)*T,i[6]=(v*u*s-c*y*s-v*o*h+n*y*h+c*o*x-n*u*x)*T,i[7]=(c*f*s-d*u*s+d*o*h-n*f*h-c*o*m+n*u*m)*T,i[8]=w*T,i[9]=(v*p*s-d*g*s-v*a*m+n*g*m+d*a*x-n*p*x)*T,i[10]=(c*g*s-v*l*s+v*a*h-n*g*h-c*a*x+n*l*x)*T,i[11]=(d*l*s-c*p*s-d*a*h+n*p*h+c*a*m-n*l*m)*T,i[12]=M*T,i[13]=(d*g*o-v*p*o+v*a*f-n*g*f-d*a*y+n*p*y)*T,i[14]=(v*l*o-c*g*o-v*a*u+n*g*u+c*a*y-n*l*y)*T,i[15]=(c*p*o-d*l*o+d*a*u-n*p*u-c*a*f+n*l*f)*T,this},scale:function(e){var t=this.elements,i=e.x,r=e.y,n=e.z;return t[0]*=i,t[4]*=r,t[8]*=n,t[1]*=i,t[5]*=r,t[9]*=n,t[2]*=i,t[6]*=r,t[10]*=n,t[3]*=i,t[7]*=r,t[11]*=n,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,r))},makeTranslation:function(e,t,i){return this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var i=Math.cos(t),r=Math.sin(t),n=1-i,a=e.x,o=e.y,s=e.z,c=n*a,l=n*o;return this.set(c*a+i,c*o-r*s,c*s+r*o,0,c*o+r*s,l*o+i,l*s-r*a,0,c*s-r*o,l*s+r*a,n*s*s+i,0,0,0,0,1),this},makeScale:function(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this},makeShear:function(e,t,i){return this.set(1,t,i,0,e,1,i,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,i){return this.makeRotationFromQuaternion(t),this.scale(i),this.setPosition(e),this},decompose:function(){var e=new u,t=new h;return function(i,r,n){var a=this.elements,o=e.set(a[0],a[1],a[2]).length(),s=e.set(a[4],a[5],a[6]).length(),c=e.set(a[8],a[9],a[10]).length();this.determinant()<0&&(o=-o),i.x=a[12],i.y=a[13],i.z=a[14],t.copy(this);var l=1/o,u=1/s,h=1/c;return t.elements[0]*=l,t.elements[1]*=l,t.elements[2]*=l,t.elements[4]*=u,t.elements[5]*=u,t.elements[6]*=u,t.elements[8]*=h,t.elements[9]*=h,t.elements[10]*=h,r.setFromRotationMatrix(t),n.x=o,n.y=s,n.z=c,this}}(),makePerspective:function(e,t,i,r,n,a){void 0===a&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");var o=this.elements,s=2*n/(t-e),c=2*n/(i-r),l=(t+e)/(t-e),u=(i+r)/(i-r),h=-(a+n)/(a-n),d=-2*a*n/(a-n);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(e,t,i,r,n,a){var o=this.elements,s=1/(t-e),c=1/(i-r),l=1/(a-n),u=(t+e)*s,h=(i+r)*c,d=(a+n)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,i=e.elements,r=0;r<16;r++)if(t[r]!==i[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var i=0;i<16;i++)this.elements[i]=e[i+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}),d.prototype=Object.create(a.prototype),d.prototype.constructor=d,d.prototype.isDataTexture=!0,p.prototype=Object.create(a.prototype),p.prototype.constructor=p,p.prototype.isCubeTexture=!0,Object.defineProperty(p.prototype,\"images\",{get:function(){return this.image},set:function(e){this.image=e}});var qo=new a,Yo=new p,Zo=[],Jo=[],Ko=new Float32Array(16),Qo=new Float32Array(9);k.prototype.setValue=function(e,t){for(var i=this.seq,r=0,n=i.length;r!==n;++r){var a=i[r];a.setValue(e,t[a.id])}};var $o=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g;q.prototype.setValue=function(e,t,i){var r=this.map[t];void 0!==r&&r.setValue(e,i,this.renderer)},q.prototype.setOptional=function(e,t,i){var r=t[i];void 0!==r&&this.setValue(e,i,r)},q.upload=function(e,t,i,r){for(var n=0,a=t.length;n!==a;++n){var o=t[n],s=i[o.id];!1!==s.needsUpdate&&o.setValue(e,s.value,r)}},q.seqWithValue=function(e,t){for(var i=[],r=0,n=e.length;r!==n;++r){var a=e[r];a.id in t&&i.push(a)}return i};var es={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object.assign(Y.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):\"number\"==typeof e?this.setHex(e):\"string\"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,i){return this.r=e,this.g=t,this.b=i,this},setHSL:function(){function e(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+6*(t-e)*(2/3-i):e}return function(t,i,r){if(t=Wo.euclideanModulo(t,1),i=Wo.clamp(i,0,1),r=Wo.clamp(r,0,1),0===i)this.r=this.g=this.b=r;else{var n=r<=.5?r*(1+i):r+i-r*i,a=2*r-n;this.r=e(a,n,t+1/3),this.g=e(a,n,t),this.b=e(a,n,t-1/3)}return this}}(),setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn(\"THREE.Color: Alpha component of \"+e+\" will be ignored.\")}var i;if(i=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(e)){var r,n=i[1],a=i[2];switch(n){case\"rgb\":case\"rgba\":if(r=/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,t(r[5]),this;if(r=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,t(r[5]),this;break;case\"hsl\":case\"hsla\":if(r=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(a)){var o=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return t(r[5]),this.setHSL(o,s,c)}}}else if(i=/^\\#([A-Fa-f0-9]+)$/.exec(e)){var l=i[1],u=l.length;if(3===u)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===u)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}if(e&&e.length>0){var l=es[e];void 0!==l?this.setHex(l):console.warn(\"THREE.Color: Unknown color \"+e)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var i=t>0?1/t:1;return this.r=Math.pow(e.r,i),this.g=Math.pow(e.g,i),this.b=Math.pow(e.b,i),this},convertGammaToLinear:function(){var e=this.r,t=this.g,i=this.b;return this.r=e*e,this.g=t*t,this.b=i*i,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return(\"000000\"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){var t,i,r=e||{h:0,s:0,l:0},n=this.r,a=this.g,o=this.b,s=Math.max(n,a,o),c=Math.min(n,a,o),l=(c+s)/2;if(c===s)t=0,i=0;else{var u=s-c;switch(i=l<=.5?u/(s+c):u/(2-s-c),s){case n:t=(a-o)/u+(a<o?6:0);break;case a:t=(o-n)/u+2;break;case o:t=(n-a)/u+4}t/=6}return r.h=t,r.s=i,r.l=l,r},getStyle:function(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"},offsetHSL:function(e,t,i){var r=this.getHSL();return r.h+=e,r.s+=t,r.l+=i,this.setHSL(r.h,r.s,r.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}});var ts={common:{diffuse:{value:new Y(15658734)},opacity:{value:1},map:{value:null},offsetRepeat:{value:new o(0,0,1,1)},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new n(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Y(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Y(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},offsetRepeat:{value:new o(0,0,1,1)}}},is={merge:function(e){for(var t={},i=0;i<e.length;i++){var r=this.clone(e[i]);for(var n in r)t[n]=r[n]}return t},clone:function(e){var t={};for(var i in e){t[i]={};for(var r in e[i]){var n=e[i][r];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture)?t[i][r]=n.clone():Array.isArray(n)?t[i][r]=n.slice():t[i][r]=n}}return t}},rs={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\",alphatest_fragment:\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"\\nvec3 transformed = vec3( position );\\n\",beginnormal_vertex:\"\\nvec3 objectNormal = vec3( normal );\\n\",bsdfs:\"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\",color_fragment:\"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\",color_pars_vertex:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\",common:\"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transpose( const in mat3 v ) {\\n\\tmat3 tmp;\\n\\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\\n\\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\\n\\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\\n\\treturn tmp;\\n}\\n\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\",defaultnormal_vertex:\"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\",encodings_fragment:\"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\",envmap_pars_fragment:\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\",fog_vertex:\"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\",gradientmap_pars_fragment:\"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",lights_pars:\"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\",lights_template:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\",logdepthbuf_fragment:\"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\",map_particle_fragment:\"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\",map_particle_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\",normal_fragment:\"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\",project_vertex:\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\",dithering_fragment:\"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\",dithering_pars_fragment:\"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\",tonemapping_pars_fragment:\"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\",uv_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\",uv_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\",cube_frag:\"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\",cube_vert:\"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\",equirect_vert:\"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshphysical_frag:\"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshphysical_vert:\"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",normal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\",normal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n}\\n\",shadow_vert:\"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\"},ns={basic:{uniforms:is.merge([ts.common,ts.specularmap,ts.envmap,ts.aomap,ts.lightmap,ts.fog]),vertexShader:rs.meshbasic_vert,fragmentShader:rs.meshbasic_frag},lambert:{uniforms:is.merge([ts.common,ts.specularmap,ts.envmap,ts.aomap,ts.lightmap,ts.emissivemap,ts.fog,ts.lights,{emissive:{value:new Y(0)}}]),vertexShader:rs.meshlambert_vert,fragmentShader:rs.meshlambert_frag},phong:{uniforms:is.merge([ts.common,ts.specularmap,ts.envmap,ts.aomap,ts.lightmap,ts.emissivemap,ts.bumpmap,ts.normalmap,ts.displacementmap,ts.gradientmap,ts.fog,ts.lights,{emissive:{value:new Y(0)},specular:{value:new Y(1118481)},shininess:{value:30}}]),vertexShader:rs.meshphong_vert,fragmentShader:rs.meshphong_frag},standard:{uniforms:is.merge([ts.common,ts.envmap,ts.aomap,ts.lightmap,ts.emissivemap,ts.bumpmap,ts.normalmap,ts.displacementmap,ts.roughnessmap,ts.metalnessmap,ts.fog,ts.lights,{emissive:{value:new Y(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:rs.meshphysical_vert,fragmentShader:rs.meshphysical_frag},points:{uniforms:is.merge([ts.points,ts.fog]),vertexShader:rs.points_vert,fragmentShader:rs.points_frag},dashed:{uniforms:is.merge([ts.common,ts.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:rs.linedashed_vert,fragmentShader:rs.linedashed_frag},depth:{uniforms:is.merge([ts.common,ts.displacementmap]),vertexShader:rs.depth_vert,fragmentShader:rs.depth_frag},normal:{uniforms:is.merge([ts.common,ts.bumpmap,ts.normalmap,ts.displacementmap,{opacity:{value:1}}]),vertexShader:rs.normal_vert,fragmentShader:rs.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:rs.cube_vert,fragmentShader:rs.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:rs.equirect_vert,fragmentShader:rs.equirect_frag},distanceRGBA:{uniforms:is.merge([ts.common,ts.displacementmap,{referencePosition:{value:new u},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:rs.distanceRGBA_vert,fragmentShader:rs.distanceRGBA_frag},shadow:{uniforms:is.merge([ts.lights,{color:{value:new Y(0)},opacity:{value:1}}]),vertexShader:rs.shadow_vert,fragmentShader:rs.shadow_frag}};ns.physical={uniforms:is.merge([ns.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:rs.meshphysical_vert,fragmentShader:rs.meshphysical_frag},Object.assign(Z.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new n;return function(t,i){var r=e.copy(i).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){var t=e||new n;return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){var t=e||new n;return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return(t||new n).set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return(t||new n).copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new n;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),K.prototype=Object.create(a.prototype),K.prototype.constructor=K;var as=0;Object.assign($.prototype,r.prototype,{isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var i=e[t];if(void 0!==i)if(\"shading\"!==t){var r=this[t];void 0!==r?r&&r.isColor?r.set(i):r&&r.isVector3&&i&&i.isVector3?r.copy(i):this[t]=\"overdraw\"===t?Number(i):i:console.warn(\"THREE.\"+this.type+\": '\"+t+\"' is not a property of this material.\")}else console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===i;else console.warn(\"THREE.Material: '\"+t+\"' parameter is undefined.\")}},toJSON:function(e){function t(e){var t=[];for(var i in e){var r=e[i];delete r.metadata,t.push(r)}return t}var i=void 0===e;i&&(e={textures:{},images:{}});var r={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};if(r.uuid=this.uuid,r.type=this.type,\"\"!==this.name&&(r.name=this.name),this.color&&this.color.isColor&&(r.color=this.color.getHex()),void 0!==this.roughness&&(r.roughness=this.roughness),void 0!==this.metalness&&(r.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(r.emissive=this.emissive.getHex()),this.specular&&this.specular.isColor&&(r.specular=this.specular.getHex()),void 0!==this.shininess&&(r.shininess=this.shininess),void 0!==this.clearCoat&&(r.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(r.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(r.map=this.map.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(r.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(r.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap&&this.bumpMap.isTexture&&(r.bumpMap=this.bumpMap.toJSON(e).uuid,r.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(r.normalMap=this.normalMap.toJSON(e).uuid,r.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(r.displacementMap=this.displacementMap.toJSON(e).uuid,r.displacementScale=this.displacementScale,r.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(r.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(r.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(r.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(r.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(r.envMap=this.envMap.toJSON(e).uuid,r.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(r.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(r.size=this.size),void 0!==this.sizeAttenuation&&(r.sizeAttenuation=this.sizeAttenuation),this.blending!==ra&&(r.blending=this.blending),!0===this.flatShading&&(r.flatShading=this.flatShading),this.side!==Jn&&(r.side=this.side),this.vertexColors!==$n&&(r.vertexColors=this.vertexColors),this.opacity<1&&(r.opacity=this.opacity),!0===this.transparent&&(r.transparent=this.transparent),r.depthFunc=this.depthFunc,r.depthTest=this.depthTest,r.depthWrite=this.depthWrite,!0===this.dithering&&(r.dithering=!0),this.alphaTest>0&&(r.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(r.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(r.wireframe=this.wireframe),this.wireframeLinewidth>1&&(r.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(r.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(r.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(r.morphTargets=!0),!0===this.skinning&&(r.skinning=!0),!1===this.visible&&(r.visible=!1),\"{}\"!==JSON.stringify(this.userData)&&(r.userData=this.userData),i){var n=t(e.textures),a=t(e.images);n.length>0&&(r.textures=n),a.length>0&&(r.images=a)}return r},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,i=null;if(null!==t){var r=t.length;i=new Array(r);for(var n=0;n!==r;++n)i[n]=t[n].clone()}return this.clippingPlanes=i,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),ee.prototype=Object.create($.prototype),ee.prototype.constructor=ee,ee.prototype.isShaderMaterial=!0,ee.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=is.clone(e.uniforms),this.defines=e.defines,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},ee.prototype.toJSON=function(e){var t=$.prototype.toJSON.call(this,e);return t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t},te.prototype=Object.create($.prototype),te.prototype.constructor=te,te.prototype.isMeshDepthMaterial=!0,te.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},ie.prototype=Object.create($.prototype),ie.prototype.constructor=ie,ie.prototype.isMeshDistanceMaterial=!0,ie.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this},Object.assign(re.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,i=1/0,r=1/0,n=-1/0,a=-1/0,o=-1/0,s=0,c=e.length;s<c;s+=3){var l=e[s],u=e[s+1],h=e[s+2];l<t&&(t=l),u<i&&(i=u),h<r&&(r=h),l>n&&(n=l),u>a&&(a=u),h>o&&(o=h)}return this.min.set(t,i,r),this.max.set(n,a,o),this},setFromBufferAttribute:function(e){for(var t=1/0,i=1/0,r=1/0,n=-1/0,a=-1/0,o=-1/0,s=0,c=e.count;s<c;s++){var l=e.getX(s),u=e.getY(s),h=e.getZ(s);l<t&&(t=l),u<i&&(i=u),h<r&&(r=h),l>n&&(n=l),u>a&&(a=u),h>o&&(o=h)}return this.min.set(t,i,r),this.max.set(n,a,o),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new u;return function(t,i){var r=e.copy(i).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){var t=e||new u;return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){var t=e||new u;return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(){var e=new u;return function(t){var i=this;return t.updateMatrixWorld(!0),t.traverse(function(t){var r,n,a=t.geometry;if(void 0!==a)if(a.isGeometry){var o=a.vertices;for(r=0,n=o.length;r<n;r++)e.copy(o[r]),e.applyMatrix4(t.matrixWorld),i.expandByPoint(e)}else if(a.isBufferGeometry){var s=a.attributes.position;if(void 0!==s)for(r=0,n=s.count;r<n;r++)e.fromBufferAttribute(s,r).applyMatrix4(t.matrixWorld),i.expandByPoint(e)}}),this}}(),containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return(t||new u).set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e=new u;return function(t){return this.clampPoint(t.center,e),e.distanceToSquared(t.center)<=t.radius*t.radius}}(),intersectsPlane:function(e){var t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=e.constant&&i>=e.constant},clampPoint:function(e,t){return(t||new u).copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new u;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var e=new u;return function(t){var i=t||new ne;return this.getCenter(i.center),i.radius=.5*this.getSize(e).length(),i}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new u,new u,new u,new u,new u,new u,new u,new u];return function(t){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),Object.assign(ne.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(){var e=new re;return function(t,i){var r=this.center;void 0!==i?r.copy(i):e.setFromPoints(t).getCenter(r);for(var n=0,a=0,o=t.length;a<o;a++)n=Math.max(n,r.distanceToSquared(t[a]));return this.radius=Math.sqrt(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var i=this.center.distanceToSquared(e),r=t||new u;return r.copy(e),i>this.radius*this.radius&&(r.sub(this.center).normalize(),r.multiplyScalar(this.radius).add(this.center)),r},getBoundingBox:function(e){var t=e||new re;return t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}}),Object.assign(ae.prototype,{isMatrix3:!0,set:function(e,t,i,r,n,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=r,l[2]=o,l[3]=t,l[4]=n,l[5]=s,l[6]=i,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(){var e=new u;return function(t){for(var i=0,r=t.count;i<r;i++)e.x=t.getX(i),e.y=t.getY(i),e.z=t.getZ(i),e.applyMatrix3(this),t.setXYZ(i,e.x,e.y,e.z);return t}}(),multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var i=e.elements,r=t.elements,n=this.elements,a=i[0],o=i[3],s=i[6],c=i[1],l=i[4],u=i[7],h=i[2],d=i[5],p=i[8],f=r[0],m=r[3],v=r[6],g=r[1],y=r[4],x=r[7],_=r[2],b=r[5],w=r[8];return n[0]=a*f+o*g+s*_,n[3]=a*m+o*y+s*b,n[6]=a*v+o*x+s*w,n[1]=c*f+l*g+u*_,n[4]=c*m+l*y+u*b,n[7]=c*v+l*x+u*w,n[2]=h*f+d*g+p*_,n[5]=h*m+d*y+p*b,n[8]=h*v+d*x+p*w,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],i=e[1],r=e[2],n=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-i*n*l+i*o*s+r*n*c-r*a*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error(\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\");var i=e.elements,r=this.elements,n=i[0],a=i[1],o=i[2],s=i[3],c=i[4],l=i[5],u=i[6],h=i[7],d=i[8],p=d*c-l*h,f=l*u-d*s,m=h*s-c*u,v=n*p+a*f+o*m;if(0===v){var g=\"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return r[0]=p*y,r[1]=(o*h-d*a)*y,r[2]=(l*a-o*c)*y,r[3]=f*y,r[4]=(d*n-o*u)*y,r[5]=(o*s-l*n)*y,r[6]=m*y,r[7]=(a*u-h*n)*y,r[8]=(c*n-a*s)*y,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},equals:function(e){for(var t=this.elements,i=e.elements,r=0;r<9;r++)if(t[r]!==i[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var i=0;i<9;i++)this.elements[i]=e[i+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}}),Object.assign(oe.prototype,{set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,i,r){return this.normal.set(e,t,i),this.constant=r,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new u,t=new u;return function(i,r,n){var a=e.subVectors(n,r).cross(t.subVectors(i,r)).normalize();return this.setFromNormalAndCoplanarPoint(a,i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return(t||new u).copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(){var e=new u;return function(t,i){var r=i||new u,n=t.delta(e),a=this.normal.dot(n);if(0!==a){var o=-(t.start.dot(this.normal)+this.constant)/a;if(!(o<0||o>1))return r.copy(n).multiplyScalar(o).add(t.start)}else if(0===this.distanceToPoint(t.start))return r.copy(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return(e||new u).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new u,t=new ae;return function(i,r){var n=r||t.getNormalMatrix(i),a=this.coplanarPoint(e).applyMatrix4(i),o=this.normal.applyMatrix3(n).normalize();return this.constant=-a.dot(o),this}}(),translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}),Object.assign(se.prototype,{set:function(e,t,i,r,n,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(i),o[3].copy(r),o[4].copy(n),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,i=0;i<6;i++)t[i].copy(e.planes[i]);return this},setFromMatrix:function(e){var t=this.planes,i=e.elements,r=i[0],n=i[1],a=i[2],o=i[3],s=i[4],c=i[5],l=i[6],u=i[7],h=i[8],d=i[9],p=i[10],f=i[11],m=i[12],v=i[13],g=i[14],y=i[15];return t[0].setComponents(o-r,u-s,f-h,y-m).normalize(),t[1].setComponents(o+r,u+s,f+h,y+m).normalize(),t[2].setComponents(o+n,u+c,f+d,y+v).normalize(),t[3].setComponents(o-n,u-c,f-d,y-v).normalize(),t[4].setComponents(o-a,u-l,f-p,y-g).normalize(),t[5].setComponents(o+a,u+l,f+p,y+g).normalize(),this},intersectsObject:function(){var e=new ne;return function(t){var i=t.geometry;return null===i.boundingSphere&&i.computeBoundingSphere(),e.copy(i.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new ne;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,i=e.center,r=-e.radius,n=0;n<6;n++){if(t[n].distanceToPoint(i)<r)return!1}return!0},intersectsBox:function(){var e=new u,t=new u;return function(i){for(var r=this.planes,n=0;n<6;n++){var a=r[n];e.x=a.normal.x>0?i.min.x:i.max.x,t.x=a.normal.x>0?i.max.x:i.min.x,e.y=a.normal.y>0?i.min.y:i.max.y,t.y=a.normal.y>0?i.max.y:i.min.y,e.z=a.normal.z>0?i.min.z:i.max.z,t.z=a.normal.z>0?i.max.z:i.min.z;var o=a.distanceToPoint(e),s=a.distanceToPoint(t);if(o<0&&s<0)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,i=0;i<6;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0}}),ue.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"],ue.DefaultOrder=\"XYZ\",Object.defineProperties(ue.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this.onChangeCallback()}}}),Object.assign(ue.prototype,{isEuler:!0,set:function(e,t,i,r){return this._x=e,this._y=t,this._z=i,this._order=r||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,t,i){var r=Wo.clamp,n=e.elements,a=n[0],o=n[4],s=n[8],c=n[1],l=n[5],u=n[9],h=n[2],d=n[6],p=n[10];return t=t||this._order,\"XYZ\"===t?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-u,p),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(d,l),this._z=0)):\"YXZ\"===t?(this._x=Math.asin(-r(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-h,a),this._z=0)):\"ZXY\"===t?(this._x=Math.asin(r(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-h,p),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):\"ZYX\"===t?(this._y=Math.asin(-r(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):\"YZX\"===t?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-h,a)):(this._x=0,this._y=Math.atan2(s,p))):\"XZY\"===t?(this._z=Math.asin(-r(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(d,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-u,p),this._y=0)):console.warn(\"THREE.Euler: .setFromRotationMatrix() given unsupported order: \"+t),this._order=t,!1!==i&&this.onChangeCallback(),this},setFromQuaternion:function(){var e=new h;return function(t,i,r){return e.makeRotationFromQuaternion(t),this.setFromRotationMatrix(e,i,r)}}(),setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(){var e=new l;return function(t){return e.setFromEuler(this),this.setFromQuaternion(e,t)}}(),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new u(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(he.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},test:function(e){return 0!=(this.mask&e.mask)}});var os=0;de.DefaultUp=new u(0,1,0),de.DefaultMatrixAutoUpdate=!0,Object.assign(de.prototype,r.prototype,{isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new l;return function(t,i){return e.setFromAxisAngle(t,i),this.quaternion.multiply(e),this}}(),rotateX:function(){var e=new u(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new u(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new u(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new u;return function(t,i){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(i)),this}}(),translateX:function(){var e=new u(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new u(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new u(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new h;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new h;return function(t){this.isCamera?e.lookAt(this.position,t,this.up):e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:\"added\"}),this.children.push(e)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var i=this.children.indexOf(e);return-1!==i&&(e.parent=null,e.dispatchEvent({type:\"removed\"}),this.children.splice(i,1)),this},getObjectById:function(e){return this.getObjectByProperty(\"id\",e)},getObjectByName:function(e){return this.getObjectByProperty(\"name\",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var i=0,r=this.children.length;i<r;i++){var n=this.children[i],a=n.getObjectByProperty(e,t);if(void 0!==a)return a}},getWorldPosition:function(e){var t=e||new u;return this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new u,t=new u;return function(i){var r=i||new l;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,r,t),r}}(),getWorldRotation:function(){var e=new l;return function(t){var i=t||new ue;return this.getWorldQuaternion(e),i.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new u,t=new l;return function(i){var r=i||new u;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,r),r}}(),getWorldDirection:function(){var e=new l;return function(t){var i=t||new u;return this.getWorldQuaternion(e),i.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var t=this.children,i=0,r=t.length;i<r;i++)t[i].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,i=0,r=t.length;i<r;i++)t[i].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,i=0,r=t.length;i<r;i++)t[i].updateMatrixWorld(e)},toJSON:function(e){function t(t,i){return void 0===t[i.uuid]&&(t[i.uuid]=i.toJSON(e)),i.uuid}function i(e){var t=[];for(var i in e){var r=e[i];delete r.metadata,t.push(r)}return t}var r=void 0===e||\"\"===e,n={};r&&(e={geometries:{},materials:{},textures:{},images:{}},n.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});var a={};if(a.uuid=this.uuid,a.type=this.type,\"\"!==this.name&&(a.name=this.name),!0===this.castShadow&&(a.castShadow=!0),!0===this.receiveShadow&&(a.receiveShadow=!0),!1===this.visible&&(a.visible=!1),\"{}\"!==JSON.stringify(this.userData)&&(a.userData=this.userData),a.matrix=this.matrix.toArray(),void 0!==this.geometry&&(a.geometry=t(e.geometries,this.geometry)),void 0!==this.material)if(Array.isArray(this.material)){for(var o=[],s=0,c=this.material.length;s<c;s++)o.push(t(e.materials,this.material[s]));a.material=o}else a.material=t(e.materials,this.material);if(this.children.length>0){a.children=[];for(var s=0;s<this.children.length;s++)a.children.push(this.children[s].toJSON(e).object)}if(r){var l=i(e.geometries),u=i(e.materials),h=i(e.textures),d=i(e.images);l.length>0&&(n.geometries=l),u.length>0&&(n.materials=u),h.length>0&&(n.textures=h),d.length>0&&(n.images=d)}return n.object=a,n},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var i=0;i<e.children.length;i++){var r=e.children[i];this.add(r.clone())}return this}}),pe.prototype=Object.assign(Object.create(de.prototype),{constructor:pe,isCamera:!0,copy:function(e,t){return de.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},getWorldDirection:function(){var e=new l;return function(t){var i=t||new u;return this.getWorldQuaternion(e),i.set(0,0,-1).applyQuaternion(e)}}(),updateMatrixWorld:function(e){de.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),fe.prototype=Object.assign(Object.create(pe.prototype),{constructor:fe,isOrthographicCamera:!0,copy:function(e,t){return pe.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,i,r,n,a){this.view={fullWidth:e,fullHeight:t,offsetX:i,offsetY:r,width:n,height:a},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,r=(this.top+this.bottom)/2,n=i-e,a=i+e,o=r+t,s=r-t;if(null!==this.view){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),u=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;n+=u*(this.view.offsetX/c),a=n+u*(this.view.width/c),o-=h*(this.view.offsetY/l),s=o-h*(this.view.height/l)}this.projectionMatrix.makeOrthographic(n,a,o,s,this.near,this.far)},toJSON:function(e){var t=de.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),me.prototype=Object.assign(Object.create(pe.prototype),{constructor:me,isPerspectiveCamera:!0,copy:function(e,t){return pe.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*Wo.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*Wo.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*Wo.RAD2DEG*Math.atan(Math.tan(.5*Wo.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,i,r,n,a){this.aspect=e/t,this.view={fullWidth:e,fullHeight:t,offsetX:i,offsetY:r,width:n,height:a},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*Wo.DEG2RAD*this.fov)/this.zoom,i=2*t,r=this.aspect*i,n=-.5*r,a=this.view;if(null!==a){var o=a.fullWidth,s=a.fullHeight;n+=a.offsetX*r/o,t-=a.offsetY*i/s,r*=a.width/o,i*=a.height/s}var c=this.filmOffset;0!==c&&(n+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(n,n+r,t,t-i,e,this.far)},toJSON:function(e){var t=de.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),Object.assign(ve.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,i=e.vertexNormals.length;t<i;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var t=0,i=e.vertexColors.length;t<i;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var ss=0;Object.assign(ye.prototype,r.prototype,{isGeometry:!0,applyMatrix:function(e){for(var t=(new ae).getNormalMatrix(e),i=0,r=this.vertices.length;i<r;i++){this.vertices[i].applyMatrix4(e)}for(var i=0,r=this.faces.length;i<r;i++){var n=this.faces[i];n.normal.applyMatrix3(t).normalize();for(var a=0,o=n.vertexNormals.length;a<o;a++)n.vertexNormals[a].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e=new h;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new h;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new h;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new h;return function(t,i,r){return e.makeTranslation(t,i,r),this.applyMatrix(e),this}}(),scale:function(){var e=new h;return function(t,i,r){return e.makeScale(t,i,r),this.applyMatrix(e),this}}(),lookAt:function(){var e=new de;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){function t(e,t,r,n){var a=void 0!==s?[d[e].clone(),d[t].clone(),d[r].clone()]:[],o=void 0!==c?[i.colors[e].clone(),i.colors[t].clone(),i.colors[r].clone()]:[],u=new ve(e,t,r,a,o,n);i.faces.push(u),void 0!==l&&i.faceVertexUvs[0].push([p[e].clone(),p[t].clone(),p[r].clone()]),void 0!==h&&i.faceVertexUvs[1].push([f[e].clone(),f[t].clone(),f[r].clone()])}var i=this,r=null!==e.index?e.index.array:void 0,a=e.attributes,o=a.position.array,s=void 0!==a.normal?a.normal.array:void 0,c=void 0!==a.color?a.color.array:void 0,l=void 0!==a.uv?a.uv.array:void 0,h=void 0!==a.uv2?a.uv2.array:void 0;void 0!==h&&(this.faceVertexUvs[1]=[]);for(var d=[],p=[],f=[],m=0,v=0;m<o.length;m+=3,v+=2)i.vertices.push(new u(o[m],o[m+1],o[m+2])),void 0!==s&&d.push(new u(s[m],s[m+1],s[m+2])),void 0!==c&&i.colors.push(new Y(c[m],c[m+1],c[m+2])),void 0!==l&&p.push(new n(l[v],l[v+1])),void 0!==h&&f.push(new n(h[v],h[v+1]));var g=e.groups;if(g.length>0)for(var m=0;m<g.length;m++)for(var y=g[m],x=y.start,_=y.count,v=x,b=x+_;v<b;v+=3)void 0!==r?t(r[v],r[v+1],r[v+2],y.materialIndex):t(v,v+1,v+2,y.materialIndex);else if(void 0!==r)for(var m=0;m<r.length;m+=3)t(r[m],r[m+1],r[m+2]);else for(var m=0;m<o.length/3;m+=3)t(m,m+1,m+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var e=this.boundingBox.getCenter().negate();return this.translate(e.x,e.y,e.z),e},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,i=0===t?1:1/t,r=new h;return r.set(i,0,0,-i*e.x,0,i,0,-i*e.y,0,0,i,-i*e.z,0,0,0,1),this.applyMatrix(r),this},computeFaceNormals:function(){for(var e=new u,t=new u,i=0,r=this.faces.length;i<r;i++){var n=this.faces[i],a=this.vertices[n.a],o=this.vertices[n.b],s=this.vertices[n.c];e.subVectors(s,o),t.subVectors(a,o),e.cross(t),e.normalize(),n.normal.copy(e)}},computeVertexNormals:function(e){void 0===e&&(e=!0);var t,i,r,n,a,o;for(o=new Array(this.vertices.length),t=0,i=this.vertices.length;t<i;t++)o[t]=new u;if(e){var s,c,l,h=new u,d=new u;for(r=0,n=this.faces.length;r<n;r++)a=this.faces[r],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],h.subVectors(l,c),d.subVectors(s,c),h.cross(d),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(this.computeFaceNormals(),r=0,n=this.faces.length;r<n;r++)a=this.faces[r],o[a.a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,i=this.vertices.length;t<i;t++)o[t].normalize();for(r=0,n=this.faces.length;r<n;r++){a=this.faces[r];var p=a.vertexNormals;3===p.length?(p[0].copy(o[a.a]),p[1].copy(o[a.b]),p[2].copy(o[a.c])):(p[0]=o[a.a].clone(),p[1]=o[a.b].clone(),p[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,i;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){i=this.faces[e];var r=i.vertexNormals;3===r.length?(r[0].copy(i.normal),r[1].copy(i.normal),r[2].copy(i.normal)):(r[0]=i.normal.clone(),r[1]=i.normal.clone(),r[2]=i.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,i,r,n;for(i=0,r=this.faces.length;i<r;i++)for(n=this.faces[i],n.__originalFaceNormal?n.__originalFaceNormal.copy(n.normal):n.__originalFaceNormal=n.normal.clone(),n.__originalVertexNormals||(n.__originalVertexNormals=[]),e=0,t=n.vertexNormals.length;e<t;e++)n.__originalVertexNormals[e]?n.__originalVertexNormals[e].copy(n.vertexNormals[e]):n.__originalVertexNormals[e]=n.vertexNormals[e].clone();var a=new ye;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o,s,c=this.morphNormals[e].faceNormals,l=this.morphNormals[e].vertexNormals;for(i=0,r=this.faces.length;i<r;i++)o=new u,s={a:new u,b:new u,c:new u},c.push(o),l.push(s)}var h=this.morphNormals[e];a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals();var o,s;for(i=0,r=this.faces.length;i<r;i++)n=this.faces[i],o=h.faceNormals[i],s=h.vertexNormals[i],o.copy(n.normal),s.a.copy(n.vertexNormals[0]),s.b.copy(n.vertexNormals[1]),s.c.copy(n.vertexNormals[2])}for(i=0,r=this.faces.length;i<r;i++)n=this.faces[i],n.normal=n.__originalFaceNormal,n.vertexNormals=n.__originalVertexNormals},computeLineDistances:function(){for(var e=0,t=this.vertices,i=0,r=t.length;i<r;i++)i>0&&(e+=t[i].distanceTo(t[i-1])),this.lineDistances[i]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new re),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new ne),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,i){if(!e||!e.isGeometry)return void console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",e);var r,n=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.faceVertexUvs[0],u=e.faceVertexUvs[0],h=this.colors,d=e.colors;void 0===i&&(i=0),void 0!==t&&(r=(new ae).getNormalMatrix(t));for(var p=0,f=o.length;p<f;p++){var m=o[p],v=m.clone();void 0!==t&&v.applyMatrix4(t),a.push(v)}for(var p=0,f=d.length;p<f;p++)h.push(d[p].clone());for(p=0,f=c.length;p<f;p++){var g,y,x,_=c[p],b=_.vertexNormals,w=_.vertexColors;g=new ve(_.a+n,_.b+n,_.c+n),g.normal.copy(_.normal),void 0!==r&&g.normal.applyMatrix3(r).normalize();for(var M=0,E=b.length;M<E;M++)y=b[M].clone(),void 0!==r&&y.applyMatrix3(r).normalize(),g.vertexNormals.push(y);g.color.copy(_.color);for(var M=0,E=w.length;M<E;M++)x=w[M],g.vertexColors.push(x.clone());g.materialIndex=_.materialIndex+i,s.push(g)}for(p=0,f=u.length;p<f;p++){var S=u[p],T=[];if(void 0!==S){for(var M=0,E=S.length;M<E;M++)T.push(S[M].clone());l.push(T)}}},mergeMesh:function(e){if(!e||!e.isMesh)return void console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",e);e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)},mergeVertices:function(){var e,t,i,r,n,a,o,s,c={},l=[],u=[],h=Math.pow(10,4);for(i=0,r=this.vertices.length;i<r;i++)e=this.vertices[i],t=Math.round(e.x*h)+\"_\"+Math.round(e.y*h)+\"_\"+Math.round(e.z*h),void 0===c[t]?(c[t]=i,l.push(this.vertices[i]),u[i]=l.length-1):u[i]=u[c[t]];var d=[];for(i=0,r=this.faces.length;i<r;i++){n=this.faces[i],n.a=u[n.a],n.b=u[n.b],n.c=u[n.c],a=[n.a,n.b,n.c];for(var p=0;p<3;p++)if(a[p]===a[(p+1)%3]){d.push(i);break}}for(i=d.length-1;i>=0;i--){var f=d[i];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-l.length;return this.vertices=l,m},sortFacesByMaterialIndex:function(){function e(e,t){return e.materialIndex-t.materialIndex}for(var t=this.faces,i=t.length,r=0;r<i;r++)t[r]._id=r;t.sort(e);var n,a,o=this.faceVertexUvs[0],s=this.faceVertexUvs[1];o&&o.length===i&&(n=[]),s&&s.length===i&&(a=[]);for(var r=0;r<i;r++){var c=t[r]._id;n&&n.push(o[c]),a&&a.push(s[c])}n&&(this.faceVertexUvs[0]=n),a&&(this.faceVertexUvs[1]=a)},toJSON:function(){function e(e,t,i){return i?e|1<<t:e&~(1<<t)}function t(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==d[t]?d[t]:(d[t]=h.length/3,h.push(e.x,e.y,e.z),d[t])}function i(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==f[t]?f[t]:(f[t]=p.length,p.push(e.getHex()),f[t])}function r(e){var t=e.x.toString()+e.y.toString();return void 0!==v[t]?v[t]:(v[t]=m.length/2,m.push(e.x,e.y),v[t])}var n={metadata:{version:4.5,type:\"Geometry\",generator:\"Geometry.toJSON\"}};if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),void 0!==this.parameters){var a=this.parameters;for(var o in a)void 0!==a[o]&&(n[o]=a[o]);return n}for(var s=[],c=0;c<this.vertices.length;c++){var l=this.vertices[c];s.push(l.x,l.y,l.z)}for(var u=[],h=[],d={},p=[],f={},m=[],v={},c=0;c<this.faces.length;c++){var g=this.faces[c],y=void 0!==this.faceVertexUvs[0][c],x=g.normal.length()>0,_=g.vertexNormals.length>0,b=1!==g.color.r||1!==g.color.g||1!==g.color.b,w=g.vertexColors.length>0,M=0;if(M=e(M,0,0),M=e(M,1,!0),M=e(M,2,!1),M=e(M,3,y),M=e(M,4,x),M=e(M,5,_),M=e(M,6,b),M=e(M,7,w),u.push(M),u.push(g.a,g.b,g.c),u.push(g.materialIndex),y){var E=this.faceVertexUvs[0][c];u.push(r(E[0]),r(E[1]),r(E[2]))}if(x&&u.push(t(g.normal)),_){var S=g.vertexNormals;u.push(t(S[0]),t(S[1]),t(S[2]))}if(b&&u.push(i(g.color)),w){var T=g.vertexColors;u.push(i(T[0]),i(T[1]),i(T[2]))}}return n.data={},n.data.vertices=s,n.data.normals=h,p.length>0&&(n.data.colors=p),m.length>0&&(n.data.uvs=[m]),n.data.faces=u,n},clone:function(){return(new ye).copy(this)},copy:function(e){var t,i,r,n,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,i=s.length;t<i;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,i=c.length;t<i;t++)this.colors.push(c[t].clone());var l=e.faces;for(t=0,i=l.length;t<i;t++)this.faces.push(l[t].clone());for(t=0,i=e.faceVertexUvs.length;t<i;t++){var u=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),r=0,n=u.length;r<n;r++){var h=u[r],d=[];for(a=0,o=h.length;a<o;a++){var p=h[a];d.push(p.clone())}this.faceVertexUvs[t].push(d)}}var f=e.morphTargets;for(t=0,i=f.length;t<i;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],r=0,n=f[t].vertices.length;r<n;r++)m.vertices.push(f[t].vertices[r].clone());if(void 0!==f[t].normals)for(m.normals=[],r=0,n=f[t].normals.length;r<n;r++)m.normals.push(f[t].normals[r].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,i=v.length;t<i;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],r=0,n=v[t].vertexNormals.length;r<n;r++){var y=v[t].vertexNormals[r],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],r=0,n=v[t].faceNormals.length;r<n;r++)g.faceNormals.push(v[t].faceNormals[r].clone());this.morphNormals.push(g)}var _=e.skinWeights;for(t=0,i=_.length;t<i;t++)this.skinWeights.push(_[t].clone());var b=e.skinIndices;for(t=0,i=b.length;t<i;t++)this.skinIndices.push(b[t].clone());var w=e.lineDistances;for(t=0,i=w.length;t<i;t++)this.lineDistances.push(w[t]);var M=e.boundingBox;null!==M&&(this.boundingBox=M.clone());var E=e.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),Object.defineProperty(xe.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(xe.prototype,{isBufferAttribute:!0,setArray:function(e){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.count=void 0!==e?e.length/this.itemSize:0,this.array=e},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,i){e*=this.itemSize,i*=t.itemSize;for(var r=0,n=this.itemSize;r<n;r++)this.array[e+r]=t.array[i+r];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,i=0,r=0,n=e.length;r<n;r++){var a=e[r];void 0===a&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",r),a=new Y),t[i++]=a.r,t[i++]=a.g,t[i++]=a.b}return this},copyIndicesArray:function(e){for(var t=this.array,i=0,r=0,n=e.length;r<n;r++){var a=e[r];t[i++]=a.a,t[i++]=a.b,t[i++]=a.c}return this},copyVector2sArray:function(e){for(var t=this.array,i=0,r=0,a=e.length;r<a;r++){var o=e[r];void 0===o&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",r),o=new n),t[i++]=o.x,t[i++]=o.y}return this},copyVector3sArray:function(e){for(var t=this.array,i=0,r=0,n=e.length;r<n;r++){var a=e[r];void 0===a&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",r),a=new u),t[i++]=a.x,t[i++]=a.y,t[i++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,i=0,r=0,n=e.length;r<n;r++){var a=e[r];void 0===a&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",r),a=new o),t[i++]=a.x,t[i++]=a.y,t[i++]=a.z,t[i++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=i,this},setXYZ:function(e,t,i,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=r,this},setXYZW:function(e,t,i,r,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=r,this.array[e+3]=n,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),_e.prototype=Object.create(xe.prototype),_e.prototype.constructor=_e,be.prototype=Object.create(xe.prototype),be.prototype.constructor=be,we.prototype=Object.create(xe.prototype),we.prototype.constructor=we,Me.prototype=Object.create(xe.prototype),Me.prototype.constructor=Me,Ee.prototype=Object.create(xe.prototype),Ee.prototype.constructor=Ee,Se.prototype=Object.create(xe.prototype),Se.prototype.constructor=Se,Te.prototype=Object.create(xe.prototype),Te.prototype.constructor=Te,Ae.prototype=Object.create(xe.prototype),Ae.prototype.constructor=Ae,Le.prototype=Object.create(xe.prototype),Le.prototype.constructor=Le,Object.assign(Ce.prototype,{computeGroups:function(e){for(var t,i=[],r=void 0,n=e.faces,a=0;a<n.length;a++){var o=n[a];o.materialIndex!==r&&(r=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,i.push(t)),t={start:3*a,materialIndex:r})}void 0!==t&&(t.count=3*a-t.start,i.push(t)),this.groups=i},fromGeometry:function(e){var t,i=e.faces,r=e.vertices,a=e.faceVertexUvs,o=a[0]&&a[0].length>0,s=a[1]&&a[1].length>0,c=e.morphTargets,l=c.length;if(l>0){t=[];for(var u=0;u<l;u++)t[u]=[];this.morphTargets.position=t}var h,d=e.morphNormals,p=d.length;if(p>0){h=[];for(var u=0;u<p;u++)h[u]=[];this.morphTargets.normal=h}for(var f=e.skinIndices,m=e.skinWeights,v=f.length===r.length,g=m.length===r.length,u=0;u<i.length;u++){var y=i[u];this.vertices.push(r[y.a],r[y.b],r[y.c]);var x=y.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var _=y.normal;this.normals.push(_,_,_)}var b=y.vertexColors;if(3===b.length)this.colors.push(b[0],b[1],b[2]);else{var w=y.color;this.colors.push(w,w,w)}if(!0===o){var M=a[0][u];void 0!==M?this.uvs.push(M[0],M[1],M[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",u),this.uvs.push(new n,new n,new n))}if(!0===s){var M=a[1][u];void 0!==M?this.uvs2.push(M[0],M[1],M[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",u),this.uvs2.push(new n,new n,new n))}for(var E=0;E<l;E++){var S=c[E].vertices;t[E].push(S[y.a],S[y.b],S[y.c])}for(var E=0;E<p;E++){var T=d[E].vertexNormals[u];h[E].push(T.a,T.b,T.c)}v&&this.skinIndices.push(f[y.a],f[y.b],f[y.c]),g&&this.skinWeights.push(m[y.a],m[y.b],m[y.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this}}),Pe.MaxIndex=65535,Object.assign(Pe.prototype,r.prototype,{isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(Re(e)>65535?Te:Ee)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?\"index\"===e?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),void this.setIndex(t)):(this.attributes[e]=t,this):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),void this.addAttribute(e,new xe(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,i){this.groups.push({start:e,count:t,materialIndex:void 0!==i?i:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var i=this.attributes.normal;if(void 0!==i){(new ae).getNormalMatrix(e).applyToBufferAttribute(i),i.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e=new h;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new h;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new h;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new h;return function(t,i,r){return e.makeTranslation(t,i,r),this.applyMatrix(e),this}}(),scale:function(){var e=new h;return function(t,i,r){return e.makeScale(t,i,r),this.applyMatrix(e),this}}(),lookAt:function(){var e=new de;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){this.computeBoundingBox();var e=this.boundingBox.getCenter().negate();return this.translate(e.x,e.y,e.z),e},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var i=new Ae(3*t.vertices.length,3),r=new Ae(3*t.colors.length,3);if(this.addAttribute(\"position\",i.copyVector3sArray(t.vertices)),this.addAttribute(\"color\",r.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var n=new Ae(t.lineDistances.length,1);this.addAttribute(\"lineDistance\",n.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},updateFromObject:function(e){var t=e.geometry;if(e.isMesh){var i=t.__directGeometry;if(!0===t.elementsNeedUpdate&&(i=void 0,t.elementsNeedUpdate=!1),void 0===i)return this.fromGeometry(t);i.verticesNeedUpdate=t.verticesNeedUpdate,i.normalsNeedUpdate=t.normalsNeedUpdate,i.colorsNeedUpdate=t.colorsNeedUpdate,i.uvsNeedUpdate=t.uvsNeedUpdate,i.groupsNeedUpdate=t.groupsNeedUpdate,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=i}var r;return!0===t.verticesNeedUpdate&&(r=this.attributes.position,void 0!==r&&(r.copyVector3sArray(t.vertices),r.needsUpdate=!0),t.verticesNeedUpdate=!1),!0===t.normalsNeedUpdate&&(r=this.attributes.normal,void 0!==r&&(r.copyVector3sArray(t.normals),r.needsUpdate=!0),t.normalsNeedUpdate=!1),!0===t.colorsNeedUpdate&&(r=this.attributes.color,void 0!==r&&(r.copyColorsArray(t.colors),r.needsUpdate=!0),t.colorsNeedUpdate=!1),t.uvsNeedUpdate&&(r=this.attributes.uv,void 0!==r&&(r.copyVector2sArray(t.uvs),r.needsUpdate=!0),t.uvsNeedUpdate=!1),t.lineDistancesNeedUpdate&&(r=this.attributes.lineDistance,void 0!==r&&(r.copyArray(t.lineDistances),r.needsUpdate=!0),t.lineDistancesNeedUpdate=!1),t.groupsNeedUpdate&&(t.computeGroups(e.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new Ce).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute(\"position\",new xe(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var i=new Float32Array(3*e.normals.length);this.addAttribute(\"normal\",new xe(i,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var r=new Float32Array(3*e.colors.length);this.addAttribute(\"color\",new xe(r,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var n=new Float32Array(2*e.uvs.length);this.addAttribute(\"uv\",new xe(n,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute(\"uv2\",new xe(a,2).copyVector2sArray(e.uvs2))}if(e.indices.length>0){var o=Re(e.indices)>65535?Uint32Array:Uint16Array,s=new o(3*e.indices.length);this.setIndex(new xe(s,1).copyIndicesArray(e.indices))}this.groups=e.groups;for(var c in e.morphTargets){for(var l=[],u=e.morphTargets[c],h=0,d=u.length;h<d;h++){var p=u[h],f=new Ae(3*p.length,3);l.push(f.copyVector3sArray(p))}this.morphAttributes[c]=l}if(e.skinIndices.length>0){var m=new Ae(4*e.skinIndices.length,4);this.addAttribute(\"skinIndex\",m.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var v=new Ae(4*e.skinWeights.length,4);this.addAttribute(\"skinWeight\",v.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new re);var e=this.attributes.position;void 0!==e?this.boundingBox.setFromBufferAttribute(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new re,t=new u;return function(){null===this.boundingSphere&&(this.boundingSphere=new ne);var i=this.attributes.position;if(i){var r=this.boundingSphere.center;e.setFromBufferAttribute(i),e.getCenter(r);for(var n=0,a=0,o=i.count;a<o;a++)t.x=i.getX(a),t.y=i.getY(a),t.z=i.getZ(a),n=Math.max(n,r.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes,i=this.groups;if(t.position){var r=t.position.array;if(void 0===t.normal)this.addAttribute(\"normal\",new xe(new Float32Array(r.length),3));else for(var n=t.normal.array,a=0,o=n.length;a<o;a++)n[a]=0;var s,c,l,h=t.normal.array,d=new u,p=new u,f=new u,m=new u,v=new u;if(e){var g=e.array;0===i.length&&this.addGroup(0,g.length);for(var y=0,x=i.length;y<x;++y)for(var _=i[y],b=_.start,w=_.count,a=b,o=b+w;a<o;a+=3)s=3*g[a+0],c=3*g[a+1],l=3*g[a+2],d.fromArray(r,s),p.fromArray(r,c),f.fromArray(r,l),m.subVectors(f,p),v.subVectors(d,p),m.cross(v),h[s]+=m.x,h[s+1]+=m.y,h[s+2]+=m.z,h[c]+=m.x,h[c+1]+=m.y,h[c+2]+=m.z,h[l]+=m.x,h[l+1]+=m.y,h[l+2]+=m.z}else for(var a=0,o=r.length;a<o;a+=9)d.fromArray(r,a),p.fromArray(r,a+3),f.fromArray(r,a+6),m.subVectors(f,p),v.subVectors(d,p),m.cross(v),h[a]=m.x,h[a+1]=m.y,h[a+2]=m.z,h[a+3]=m.x,h[a+4]=m.y,h[a+5]=m.z,h[a+6]=m.x,h[a+7]=m.y,h[a+8]=m.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(!e||!e.isBufferGeometry)return void console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",e);void 0===t&&(t=0);var i=this.attributes;for(var r in i)if(void 0!==e.attributes[r])for(var n=i[r],a=n.array,o=e.attributes[r],s=o.array,c=o.itemSize,l=0,u=c*t;l<s.length;l++,u++)a[u]=s[l];return this},normalizeNormals:function(){var e=new u;return function(){for(var t=this.attributes.normal,i=0,r=t.count;i<r;i++)e.x=t.getX(i),e.y=t.getY(i),e.z=t.getZ(i),e.normalize(),t.setXYZ(i,e.x,e.y,e.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"),this;var e=new Pe,t=this.index.array,i=this.attributes;for(var r in i){for(var n=i[r],a=n.array,o=n.itemSize,s=new a.constructor(t.length*o),c=0,l=0,u=0,h=t.length;u<h;u++){c=t[u]*o;for(var d=0;d<o;d++)s[l++]=a[c++]}e.addAttribute(r,new xe(s,o))}return e},toJSON:function(){var e={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(e.uuid=this.uuid,e.type=this.type,\"\"!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var i in t)void 0!==t[i]&&(e[i]=t[i]);return e}e.data={attributes:{}};var r=this.index;if(null!==r){var n=Array.prototype.slice.call(r.array);e.data.index={type:r.array.constructor.name,array:n}}var a=this.attributes;for(var i in a){var o=a[i],n=Array.prototype.slice.call(o.array);e.data.attributes[i]={itemSize:o.itemSize,type:o.array.constructor.name,array:n,normalized:o.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new Pe).copy(this)},copy:function(e){var t,i,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var n=e.index;null!==n&&this.setIndex(n.clone());var a=e.attributes;for(t in a){var o=a[t];this.addAttribute(t,o.clone())}var s=e.morphAttributes;for(t in s){var c=[],l=s[t];for(i=0,r=l.length;i<r;i++)c.push(l[i].clone());this.morphAttributes[t]=c}var u=e.groups;for(i=0,r=u.length;i<r;i++){var h=u[i];this.addGroup(h.start,h.count,h.materialIndex)}var d=e.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=e.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),De.prototype=Object.create(ye.prototype),De.prototype.constructor=De,Ue.prototype=Object.create(Pe.prototype),Ue.prototype.constructor=Ue,Ie.prototype=Object.create(ye.prototype),Ie.prototype.constructor=Ie,Ne.prototype=Object.create(Pe.prototype),Ne.prototype.constructor=Ne,Oe.prototype=Object.create($.prototype),Oe.prototype.constructor=Oe,Oe.prototype.isMeshBasicMaterial=!0,Oe.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Object.assign(Fe.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return(t||new u).copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new u;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var i=t||new u;i.subVectors(e,this.origin);var r=i.dot(this.direction);return r<0?i.copy(this.origin):i.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new u;return function(t){var i=e.subVectors(t,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(i).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:function(){var e=new u,t=new u,i=new u;return function(r,n,a,o){e.copy(r).add(n).multiplyScalar(.5),t.copy(n).sub(r).normalize(),i.copy(this.origin).sub(e);var s,c,l,u,h=.5*r.distanceTo(n),d=-this.direction.dot(t),p=i.dot(this.direction),f=-i.dot(t),m=i.lengthSq(),v=Math.abs(1-d*d);if(v>0)if(s=d*f-p,c=d*p-f,u=h*v,s>=0)if(c>=-u)if(c<=u){var g=1/v;s*=g,c*=g,l=s*(s+d*c+2*p)+c*(d*s+c+2*f)+m}else c=h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;else c=-h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;else c<=-u?(s=Math.max(0,-(-d*h+p)),c=s>0?-h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m):c<=u?(s=0,c=Math.min(Math.max(-h,-f),h),l=c*(c+2*f)+m):(s=Math.max(0,-(d*h+p)),c=s>0?h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m);else c=d>0?-h:h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;return a&&a.copy(this.direction).multiplyScalar(s).add(this.origin),o&&o.copy(t).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new u;return function(t,i){e.subVectors(t.center,this.origin);var r=e.dot(this.direction),n=e.dot(e)-r*r,a=t.radius*t.radius;if(n>a)return null;var o=Math.sqrt(a-n),s=r-o,c=r+o;return s<0&&c<0?null:s<0?this.at(c,i):this.at(s,i)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null},intersectPlane:function(e,t){var i=this.distanceToPlane(e);return null===i?null:this.at(i,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var i,r,n,a,o,s,c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,h=this.origin;return c>=0?(i=(e.min.x-h.x)*c,r=(e.max.x-h.x)*c):(i=(e.max.x-h.x)*c,r=(e.min.x-h.x)*c),l>=0?(n=(e.min.y-h.y)*l,a=(e.max.y-h.y)*l):(n=(e.max.y-h.y)*l,a=(e.min.y-h.y)*l),i>a||n>r?null:((n>i||i!==i)&&(i=n),(a<r||r!==r)&&(r=a),u>=0?(o=(e.min.z-h.z)*u,s=(e.max.z-h.z)*u):(o=(e.max.z-h.z)*u,s=(e.min.z-h.z)*u),i>s||o>r?null:((o>i||i!==i)&&(i=o),(s<r||r!==r)&&(r=s),r<0?null:this.at(i>=0?i:r,t)))},intersectsBox:function(){var e=new u;return function(t){return null!==this.intersectBox(t,e)}}(),intersectTriangle:function(){var e=new u,t=new u,i=new u,r=new u;return function(n,a,o,s,c){t.subVectors(a,n),i.subVectors(o,n),r.crossVectors(t,i);var l,u=this.direction.dot(r);if(u>0){if(s)return null;l=1}else{if(!(u<0))return null;l=-1,u=-u}e.subVectors(this.origin,n);var h=l*this.direction.dot(i.crossVectors(e,i));if(h<0)return null;var d=l*this.direction.dot(t.cross(e));if(d<0)return null;if(h+d>u)return null;var p=-l*e.dot(r);return p<0?null:this.at(p/u,c)}}(),applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}),Object.assign(ze.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return(e||new u).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return(e||new u).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){var i=t||new u;return this.delta(i).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new u,t=new u;return function(i,r){e.subVectors(i,this.start),t.subVectors(this.end,this.start);var n=t.dot(t),a=t.dot(e),o=a/n;return r&&(o=Wo.clamp(o,0,1)),o}}(),closestPointToPoint:function(e,t,i){var r=this.closestPointToPointParameter(e,t),n=i||new u;return this.delta(n).multiplyScalar(r).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Object.assign(Be,{normal:function(){var e=new u;return function(t,i,r,n){var a=n||new u;a.subVectors(r,i),e.subVectors(t,i),a.cross(e);var o=a.lengthSq();return o>0?a.multiplyScalar(1/Math.sqrt(o)):a.set(0,0,0)}}(),barycoordFromPoint:function(){var e=new u,t=new u,i=new u;return function(r,n,a,o,s){e.subVectors(o,n),t.subVectors(a,n),i.subVectors(r,n);var c=e.dot(e),l=e.dot(t),h=e.dot(i),d=t.dot(t),p=t.dot(i),f=c*d-l*l,m=s||new u;if(0===f)return m.set(-2,-1,-1);var v=1/f,g=(d*h-l*p)*v,y=(c*p-l*h)*v;return m.set(1-g-y,y,g)}}(),containsPoint:function(){var e=new u;return function(t,i,r,n){var a=Be.barycoordFromPoint(t,i,r,n,e);return a.x>=0&&a.y>=0&&a.x+a.y<=1}}()}),Object.assign(Be.prototype,{set:function(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this},setFromPointsAndIndices:function(e,t,i,r){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},area:function(){var e=new u,t=new u;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),midpoint:function(e){return(e||new u).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(e){return Be.normal(this.a,this.b,this.c,e)},plane:function(e){return(e||new oe).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(e,t){return Be.barycoordFromPoint(e,this.a,this.b,this.c,t)},containsPoint:function(e){return Be.containsPoint(e,this.a,this.b,this.c)},closestPointToPoint:function(){var e=new oe,t=[new ze,new ze,new ze],i=new u,r=new u;return function(n,a){var o=a||new u,s=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(n,i),!0===this.containsPoint(i))o.copy(i);else{t[0].set(this.a,this.b),t[1].set(this.b,this.c),t[2].set(this.c,this.a);for(var c=0;c<t.length;c++){t[c].closestPointToPoint(i,!0,r);var l=i.distanceToSquared(r);l<s&&(s=l,o.copy(r))}}return o}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}),Ge.prototype=Object.assign(Object.create(de.prototype),{constructor:Ge,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return de.prototype.copy.call(this,e),this.drawMode=e.drawMode,this},updateMorphTargets:function(){var e,t,i,r=this.geometry;if(r.isBufferGeometry){var n=r.morphAttributes,a=Object.keys(n);if(a.length>0){var o=n[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)i=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=e}}else{var s=r.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=s.length;e<t;e++)i=s[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=e}},raycast:function(){function e(e,t,i,r,n,a,o){return Be.barycoordFromPoint(e,t,i,r,y),n.multiplyScalar(y.x),a.multiplyScalar(y.y),o.multiplyScalar(y.z),n.add(a).add(o),n.clone()}function t(e,t,i,r,n,a,o,s){if(null===(t.side===Kn?r.intersectTriangle(o,a,n,!0,s):r.intersectTriangle(n,a,o,t.side!==Qn,s)))return null;_.copy(s),_.applyMatrix4(e.matrixWorld);var c=i.ray.origin.distanceTo(_);return c<i.near||c>i.far?null:{distance:c,point:_.clone(),object:e}}function i(i,r,n,a,o,u,h,d){s.fromBufferAttribute(a,u),c.fromBufferAttribute(a,h),l.fromBufferAttribute(a,d);var p=t(i,i.material,r,n,s,c,l,x);return p&&(o&&(m.fromBufferAttribute(o,u),v.fromBufferAttribute(o,h),g.fromBufferAttribute(o,d),p.uv=e(x,s,c,l,m,v,g)),p.face=new ve(u,h,d,Be.normal(s,c,l)),p.faceIndex=u),p}var r=new h,a=new Fe,o=new ne,s=new u,c=new u,l=new u,d=new u,p=new u,f=new u,m=new n,v=new n,g=new n,y=new u,x=new u,_=new u;return function(n,u){var h=this.geometry,y=this.material,_=this.matrixWorld;if(void 0!==y&&(null===h.boundingSphere&&h.computeBoundingSphere(),o.copy(h.boundingSphere),o.applyMatrix4(_),!1!==n.ray.intersectsSphere(o)&&(r.getInverse(_),a.copy(n.ray).applyMatrix4(r),null===h.boundingBox||!1!==a.intersectsBox(h.boundingBox)))){var b;if(h.isBufferGeometry){var w,M,E,S,T,A=h.index,L=h.attributes.position,C=h.attributes.uv;if(null!==A)for(S=0,T=A.count;S<T;S+=3)w=A.getX(S),M=A.getX(S+1),E=A.getX(S+2),(b=i(this,n,a,L,C,w,M,E))&&(b.faceIndex=Math.floor(S/3),u.push(b));else for(S=0,T=L.count;S<T;S+=3)w=S,M=S+1,E=S+2,(b=i(this,n,a,L,C,w,M,E))&&(b.index=w,u.push(b))}else if(h.isGeometry){var R,P,D,U,I=Array.isArray(y),N=h.vertices,O=h.faces,F=h.faceVertexUvs[0];F.length>0&&(U=F);for(var z=0,B=O.length;z<B;z++){var G=O[z],V=I?y[G.materialIndex]:y;if(void 0!==V){if(R=N[G.a],P=N[G.b],D=N[G.c],!0===V.morphTargets){var H=h.morphTargets,j=this.morphTargetInfluences;s.set(0,0,0),c.set(0,0,0),l.set(0,0,0);for(var k=0,W=H.length;k<W;k++){var X=j[k];if(0!==X){var q=H[k].vertices;s.addScaledVector(d.subVectors(q[G.a],R),X),c.addScaledVector(p.subVectors(q[G.b],P),X),l.addScaledVector(f.subVectors(q[G.c],D),X)}}s.add(R),c.add(P),l.add(D),R=s,P=c,D=l}if(b=t(this,V,n,a,R,P,D,x)){if(U&&U[z]){var Y=U[z];m.copy(Y[0]),v.copy(Y[1]),g.copy(Y[2]),b.uv=e(x,R,P,D,m,v,g)}b.face=G,b.faceIndex=z,u.push(b)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var cs=0;xt.prototype=Object.assign(Object.create(me.prototype),{constructor:xt,isArrayCamera:!0}),St.prototype.isFogExp2=!0,St.prototype.clone=function(){return new St(this.color.getHex(),this.density)},St.prototype.toJSON=function(e){return{type:\"FogExp2\",color:this.color.getHex(),density:this.density}},Tt.prototype.isFog=!0,Tt.prototype.clone=function(){return new Tt(this.color.getHex(),this.near,this.far)},Tt.prototype.toJSON=function(e){return{type:\"Fog\",color:this.color.getHex(),near:this.near,far:this.far}},At.prototype=Object.assign(Object.create(de.prototype),{constructor:At,copy:function(e,t){return de.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=de.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t}}),Lt.prototype=Object.assign(Object.create(de.prototype),{constructor:Lt,isLensFlare:!0,copy:function(e){de.prototype.copy.call(this,e),this.positionScreen.copy(e.positionScreen),this.customUpdateCallback=e.customUpdateCallback;for(var t=0,i=e.lensFlares.length;t<i;t++)this.lensFlares.push(e.lensFlares[t]);return this},add:function(e,t,i,r,n,a){void 0===t&&(t=-1),void 0===i&&(i=0),void 0===a&&(a=1),void 0===n&&(n=new Y(16777215)),void 0===r&&(r=ra),i=Math.min(i,Math.max(0,i)),this.lensFlares.push({texture:e,size:t,distance:i,x:0,y:0,z:0,scale:1,rotation:0,opacity:a,color:n,blending:r})},updateLensFlares:function(){var e,t,i=this.lensFlares.length,r=2*-this.positionScreen.x,n=2*-this.positionScreen.y;for(e=0;e<i;e++)t=this.lensFlares[e],t.x=this.positionScreen.x+r*t.distance,t.y=this.positionScreen.y+n*t.distance,t.wantedRotation=t.x*Math.PI*.25,t.rotation+=.25*(t.wantedRotation-t.rotation)}}),Ct.prototype=Object.create($.prototype),Ct.prototype.constructor=Ct,Ct.prototype.isSpriteMaterial=!0,Ct.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},Rt.prototype=Object.assign(Object.create(de.prototype),{constructor:Rt,isSprite:!0,raycast:function(){var e=new u,t=new u,i=new u;return function(r,n){t.setFromMatrixPosition(this.matrixWorld),r.ray.closestPointToPoint(t,e),i.setFromMatrixScale(this.matrixWorld);var a=i.x*i.y/4;if(!(t.distanceToSquared(e)>a)){var o=r.ray.origin.distanceTo(e);o<r.near||o>r.far||n.push({distance:o,point:e.clone(),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),Pt.prototype=Object.assign(Object.create(de.prototype),{constructor:Pt,copy:function(e){de.prototype.copy.call(this,e,!1);for(var t=e.levels,i=0,r=t.length;i<r;i++){var n=t[i];this.addLevel(n.object.clone(),n.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var i=this.levels,r=0;r<i.length&&!(t<i[r].distance);r++);i.splice(r,0,{distance:t,object:e}),this.add(e)},getObjectForDistance:function(e){for(var t=this.levels,i=1,r=t.length;i<r&&!(e<t[i].distance);i++);return t[i-1].object},raycast:function(){var e=new u;return function(t,i){e.setFromMatrixPosition(this.matrixWorld);var r=t.ray.origin.distanceTo(e);this.getObjectForDistance(r).raycast(t,i)}}(),update:function(){var e=new u,t=new u;return function(i){var r=this.levels;if(r.length>1){e.setFromMatrixPosition(i.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var n=e.distanceTo(t);r[0].object.visible=!0;for(var a=1,o=r.length;a<o&&n>=r[a].distance;a++)r[a-1].object.visible=!1,r[a].object.visible=!0;for(;a<o;a++)r[a].object.visible=!1}}}(),toJSON:function(e){var t=de.prototype.toJSON.call(this,e);t.object.levels=[];for(var i=this.levels,r=0,n=i.length;r<n;r++){var a=i[r];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),Object.assign(Dt.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var i=new h;this.bones[e]&&i.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(i)}},pose:function(){var e,t,i;for(t=0,i=this.bones.length;t<i;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,i=this.bones.length;t<i;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new h,t=new h;return function(){for(var i=this.bones,r=this.boneInverses,n=this.boneMatrices,a=this.boneTexture,o=0,s=i.length;o<s;o++){var c=i[o]?i[o].matrixWorld:t;e.multiplyMatrices(c,r[o]),e.toArray(n,16*o)}void 0!==a&&(a.needsUpdate=!0)}}(),clone:function(){return new Dt(this.bones,this.boneInverses)}}),Ut.prototype=Object.assign(Object.create(de.prototype),{constructor:Ut,isBone:!0}),It.prototype=Object.assign(Object.create(Ge.prototype),{constructor:It,isSkinnedMesh:!0,initBones:function(){var e,t,i,r,n=[];if(this.geometry&&void 0!==this.geometry.bones){for(i=0,r=this.geometry.bones.length;i<r;i++)t=this.geometry.bones[i],e=new Ut,n.push(e),e.name=t.name,e.position.fromArray(t.pos),e.quaternion.fromArray(t.rotq),void 0!==t.scl&&e.scale.fromArray(t.scl);for(i=0,r=this.geometry.bones.length;i<r;i++)t=this.geometry.bones[i],-1!==t.parent&&null!==t.parent&&void 0!==n[t.parent]?n[t.parent].add(n[i]):this.add(n[i])}return this.updateMatrixWorld(!0),n},bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var e,t;if(this.geometry&&this.geometry.isGeometry)for(t=0;t<this.geometry.skinWeights.length;t++){var i=this.geometry.skinWeights[t];e=1/i.lengthManhattan(),e!==1/0?i.multiplyScalar(e):i.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var r=new o,n=this.geometry.attributes.skinWeight;for(t=0;t<n.count;t++)r.x=n.getX(t),r.y=n.getY(t),r.z=n.getZ(t),r.w=n.getW(t),e=1/r.lengthManhattan(),e!==1/0?r.multiplyScalar(e):r.set(1,0,0,0),n.setXYZW(t,r.x,r.y,r.z,r.w)}},updateMatrixWorld:function(e){Ge.prototype.updateMatrixWorld.call(this,e),\"attached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):\"detached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Nt.prototype=Object.create($.prototype),Nt.prototype.constructor=Nt,Nt.prototype.isLineBasicMaterial=!0,Nt.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},Ot.prototype=Object.assign(Object.create(de.prototype),{constructor:Ot,isLine:!0,raycast:function(){var e=new h,t=new Fe,i=new ne;return function(r,n){var a=r.linePrecision,o=a*a,s=this.geometry,c=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),i.copy(s.boundingSphere),i.applyMatrix4(c),!1!==r.ray.intersectsSphere(i)){e.getInverse(c),t.copy(r.ray).applyMatrix4(e);var l=new u,h=new u,d=new u,p=new u,f=this&&this.isLineSegments?2:1;if(s.isBufferGeometry){var m=s.index,v=s.attributes,g=v.position.array;if(null!==m)for(var y=m.array,x=0,_=y.length-1;x<_;x+=f){var b=y[x],w=y[x+1];l.fromArray(g,3*b),h.fromArray(g,3*w);var M=t.distanceSqToSegment(l,h,p,d);if(!(M>o)){p.applyMatrix4(this.matrixWorld);var E=r.ray.origin.distanceTo(p);E<r.near||E>r.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else for(var x=0,_=g.length/3-1;x<_;x+=f){l.fromArray(g,3*x),h.fromArray(g,3*x+3);var M=t.distanceSqToSegment(l,h,p,d);if(!(M>o)){p.applyMatrix4(this.matrixWorld);var E=r.ray.origin.distanceTo(p);E<r.near||E>r.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}else if(s.isGeometry)for(var S=s.vertices,T=S.length,x=0;x<T-1;x+=f){var M=t.distanceSqToSegment(S[x],S[x+1],p,d);if(!(M>o)){p.applyMatrix4(this.matrixWorld);var E=r.ray.origin.distanceTo(p);E<r.near||E>r.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ft.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Ft,isLineSegments:!0}),zt.prototype=Object.assign(Object.create(Ot.prototype),{constructor:zt,isLineLoop:!0}),Bt.prototype=Object.create($.prototype),Bt.prototype.constructor=Bt,Bt.prototype.isPointsMaterial=!0,Bt.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},Gt.prototype=Object.assign(Object.create(de.prototype),{constructor:Gt,isPoints:!0,raycast:function(){var e=new h,t=new Fe,i=new ne;return function(r,n){function a(e,i){var a=t.distanceSqToPoint(e);if(a<d){var s=t.closestPointToPoint(e);s.applyMatrix4(c);var l=r.ray.origin.distanceTo(s);if(l<r.near||l>r.far)return;n.push({distance:l,distanceToRay:Math.sqrt(a),point:s.clone(),index:i,face:null,object:o})}}var o=this,s=this.geometry,c=this.matrixWorld,l=r.params.Points.threshold;if(null===s.boundingSphere&&s.computeBoundingSphere(),i.copy(s.boundingSphere),i.applyMatrix4(c),i.radius+=l,!1!==r.ray.intersectsSphere(i)){e.getInverse(c),t.copy(r.ray).applyMatrix4(e);var h=l/((this.scale.x+this.scale.y+this.scale.z)/3),d=h*h,p=new u;if(s.isBufferGeometry){var f=s.index,m=s.attributes,v=m.position.array;if(null!==f)for(var g=f.array,y=0,x=g.length;y<x;y++){var _=g[y];p.fromArray(v,3*_),a(p,_)}else for(var y=0,b=v.length/3;y<b;y++)p.fromArray(v,3*y),a(p,y)}else for(var w=s.vertices,y=0,b=w.length;y<b;y++)a(w[y],y)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Vt.prototype=Object.assign(Object.create(de.prototype),{constructor:Vt}),Ht.prototype=Object.create(a.prototype),Ht.prototype.constructor=Ht,jt.prototype=Object.create(a.prototype),jt.prototype.constructor=jt,jt.prototype.isCompressedTexture=!0,kt.prototype=Object.create(a.prototype),kt.prototype.constructor=kt,kt.prototype.isDepthTexture=!0,Wt.prototype=Object.create(Pe.prototype),Wt.prototype.constructor=Wt,Xt.prototype=Object.create(ye.prototype),Xt.prototype.constructor=Xt,qt.prototype=Object.create(Pe.prototype),qt.prototype.constructor=qt,Yt.prototype=Object.create(ye.prototype),Yt.prototype.constructor=Yt,Zt.prototype=Object.create(Pe.prototype),Zt.prototype.constructor=Zt,Jt.prototype=Object.create(ye.prototype),Jt.prototype.constructor=Jt,Kt.prototype=Object.create(Zt.prototype),Kt.prototype.constructor=Kt,Qt.prototype=Object.create(ye.prototype),Qt.prototype.constructor=Qt,$t.prototype=Object.create(Zt.prototype),$t.prototype.constructor=$t,ei.prototype=Object.create(ye.prototype),ei.prototype.constructor=ei,ti.prototype=Object.create(Zt.prototype),ti.prototype.constructor=ti,ii.prototype=Object.create(ye.prototype),ii.prototype.constructor=ii,ri.prototype=Object.create(Zt.prototype),ri.prototype.constructor=ri,ni.prototype=Object.create(ye.prototype),ni.prototype.constructor=ni,ai.prototype=Object.create(Pe.prototype),ai.prototype.constructor=ai,oi.prototype=Object.create(ye.prototype),oi.prototype.constructor=oi,si.prototype=Object.create(Pe.prototype),si.prototype.constructor=si,ci.prototype=Object.create(ye.prototype),ci.prototype.constructor=ci,li.prototype=Object.create(Pe.prototype),li.prototype.constructor=li;var ls={area:function(e){for(var t=e.length,i=0,r=t-1,n=0;n<t;r=n++)i+=e[r].x*e[n].y-e[n].x*e[r].y;return.5*i},triangulate:function(){function e(e,t,i,r,n,a){var o,s,c,l,u,h,d,p,f;if(s=e[a[t]].x,c=e[a[t]].y,l=e[a[i]].x,u=e[a[i]].y,h=e[a[r]].x,d=e[a[r]].y,(l-s)*(d-c)-(u-c)*(h-s)<=0)return!1;var m,v,g,y,x,_,b,w,M,E,S,T,A,L,C;for(m=h-l,v=d-u,g=s-h,y=c-d,x=l-s,_=u-c,o=0;o<n;o++)if(p=e[a[o]].x,f=e[a[o]].y,!(p===s&&f===c||p===l&&f===u||p===h&&f===d)&&(b=p-s,w=f-c,M=p-l,E=f-u,S=p-h,T=f-d,C=m*E-v*M,A=x*w-_*b,L=g*T-y*S,C>=-Number.EPSILON&&L>=-Number.EPSILON&&A>=-Number.EPSILON))return!1;return!0}return function(t,i){var r=t.length;if(r<3)return null;var n,a,o,s=[],c=[],l=[];if(ls.area(t)>0)for(a=0;a<r;a++)c[a]=a;else for(a=0;a<r;a++)c[a]=r-1-a;var u=r,h=2*u;for(a=u-1;u>2;){if(h--<=0)return console.warn(\"THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()\"),i?l:s;if(n=a,u<=n&&(n=0),a=n+1,u<=a&&(a=0),o=a+1,u<=o&&(o=0),e(t,n,a,o,u,c)){var d,p,f,m,v;for(d=c[n],p=c[a],f=c[o],s.push([t[d],t[p],t[f]]),l.push([c[n],c[a],c[o]]),m=a,v=a+1;v<u;m++,v++)c[m]=c[v];u--,h=2*u}}return i?l:s}}(),triangulateShape:function(e,t){function i(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function r(e,t,i){return e.x!==t.x?e.x<t.x?e.x<=i.x&&i.x<=t.x:t.x<=i.x&&i.x<=e.x:e.y<t.y?e.y<=i.y&&i.y<=t.y:t.y<=i.y&&i.y<=e.y}function n(e,t,i,n,a){var o=t.x-e.x,s=t.y-e.y,c=n.x-i.x,l=n.y-i.y,u=e.x-i.x,h=e.y-i.y,d=s*c-o*l,p=s*u-o*h;if(Math.abs(d)>Number.EPSILON){var f;if(d>0){if(p<0||p>d)return[];if((f=l*u-c*h)<0||f>d)return[]}else{if(p>0||p<d)return[];if((f=l*u-c*h)>0||f<d)return[]}if(0===f)return!a||0!==p&&p!==d?[e]:[];if(f===d)return!a||0!==p&&p!==d?[t]:[];if(0===p)return[i];if(p===d)return[n];var m=f/d;return[{x:e.x+m*o,y:e.y+m*s}]}if(0!==p||l*u!=c*h)return[];var v=0===o&&0===s,g=0===c&&0===l;if(v&&g)return e.x!==i.x||e.y!==i.y?[]:[e];if(v)return r(i,n,e)?[e]:[];if(g)return r(e,t,i)?[i]:[];var y,x,_,b,w,M,E,S;return 0!==o?(e.x<t.x?(y=e,_=e.x,x=t,b=t.x):(y=t,_=t.x,x=e,b=e.x),i.x<n.x?(w=i,E=i.x,M=n,S=n.x):(w=n,E=n.x,M=i,S=i.x)):(e.y<t.y?(y=e,_=e.y,x=t,b=t.y):(y=t,_=t.y,x=e,b=e.y),i.y<n.y?(w=i,E=i.y,M=n,S=n.y):(w=n,E=n.y,M=i,S=i.y)),_<=E?b<E?[]:b===E?a?[]:[w]:b<=S?[w,x]:[w,M]:_>S?[]:_===S?a?[]:[y]:b<=S?[y,x]:[y,M]}function a(e,t,i,r){var n=t.x-e.x,a=t.y-e.y,o=i.x-e.x,s=i.y-e.y,c=r.x-e.x,l=r.y-e.y,u=n*s-a*o,h=n*l-a*c;if(Math.abs(u)>Number.EPSILON){var d=c*s-l*o;return u>0?h>=0&&d>=0:h>=0||d>=0}return h>0}i(e),t.forEach(i);for(var o,s,c,l,u,h,d={},p=e.concat(),f=0,m=t.length;f<m;f++)Array.prototype.push.apply(p,t[f]);for(o=0,s=p.length;o<s;o++)u=p[o].x+\":\"+p[o].y,void 0!==d[u]&&console.warn(\"THREE.ShapeUtils: Duplicate point\",u,o),d[u]=o;var v=function(e,t){for(var i,r,o,s,c,l,u,h,d,p,f,m=e.concat(),v=[],g=[],y=0,x=t.length;y<x;y++)v.push(y);for(var _=0,b=2*v.length;v.length>0;){if(--b<0){console.log('THREE.ShapeUtils: Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!');break}for(o=_;o<m.length;o++){s=m[o],r=-1;for(var y=0;y<v.length;y++)if(l=v[y],u=s.x+\":\"+s.y+\":\"+l,void 0===g[u]){i=t[l];for(var w=0;w<i.length;w++)if(c=i[w],function(e,t){var r=m.length-1,n=e-1;n<0&&(n=r);var o=e+1;o>r&&(o=0);var s=a(m[e],m[n],m[o],i[t]);if(!s)return!1;var c=i.length-1,l=t-1;l<0&&(l=c);var u=t+1;return u>c&&(u=0),!!(s=a(i[t],i[l],i[u],m[e]))}(o,w)&&!function(e,t){var i,r,a;for(i=0;i<m.length;i++)if(r=i+1,r%=m.length,a=n(e,t,m[i],m[r],!0),a.length>0)return!0;return!1}(s,c)&&!function(e,i){var r,a,o,s,c;for(r=0;r<v.length;r++)for(a=t[v[r]],o=0;o<a.length;o++)if(s=o+1,s%=a.length,c=n(e,i,a[o],a[s],!0),c.length>0)return!0;return!1}(s,c)){r=w,v.splice(y,1),h=m.slice(0,o+1),d=m.slice(o),p=i.slice(r),f=i.slice(0,r+1),m=h.concat(p).concat(f).concat(d),_=o;break}if(r>=0)break;g[u]=!0}if(r>=0)break}}return m}(e,t),g=ls.triangulate(v,!1);for(o=0,s=g.length;o<s;o++)for(l=g[o],c=0;c<3;c++)u=l[c].x+\":\"+l[c].y,void 0!==(h=d[u])&&(l[c]=h);return g.concat()},isClockWise:function(e){return ls.area(e)<0}};ui.prototype=Object.create(ye.prototype),ui.prototype.constructor=ui,hi.prototype=Object.create(Pe.prototype),hi.prototype.constructor=hi,hi.prototype.getArrays=function(){var e=this.getAttribute(\"position\"),t=e?Array.prototype.slice.call(e.array):[],i=this.getAttribute(\"uv\"),r=i?Array.prototype.slice.call(i.array):[],n=this.index;return{position:t,uv:r,index:n?Array.prototype.slice.call(n.array):[]}},hi.prototype.addShapeList=function(e,t){var i=e.length;t.arrays=this.getArrays();for(var r=0;r<i;r++){var n=e[r];this.addShape(n,t)}this.setIndex(t.arrays.index),this.addAttribute(\"position\",new Ae(t.arrays.position,3)),this.addAttribute(\"uv\",new Ae(t.arrays.uv,2))},hi.prototype.addShape=function(e,t){function i(e,t,i){return t||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),t.clone().multiplyScalar(i).add(e)}function r(e,t,i){var r,a,o,s=e.x-t.x,c=e.y-t.y,l=i.x-e.x,u=i.y-e.y,h=s*s+c*c,d=s*u-c*l;if(Math.abs(d)>Number.EPSILON){var p=Math.sqrt(h),f=Math.sqrt(l*l+u*u),m=t.x-c/p,v=t.y+s/p,g=i.x-u/f,y=i.y+l/f,x=((g-m)*u-(y-v)*l)/(s*u-c*l);r=m+s*x-e.x,a=v+c*x-e.y;var _=r*r+a*a;if(_<=2)return new n(r,a);o=Math.sqrt(_/2)}else{var b=!1;s>Number.EPSILON?l>Number.EPSILON&&(b=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(b=!0):Math.sign(c)===Math.sign(u)&&(b=!0),b?(r=-c,a=s,o=Math.sqrt(h)):(r=s,a=c,o=Math.sqrt(h/2))}return new n(r/o,a/o)}function a(e,t){var i,r;for(J=e.length;--J>=0;){i=J,r=J-1,r<0&&(r=e.length-1);var n=0,a=L+2*S;for(n=0;n<a;n++){var o=q*n,s=q*(n+1);c(t+i+o,t+r+o,t+r+s,t+i+s,e,n,a,i,r)}}}function o(e,t,i){b.push(e),b.push(t),b.push(i)}function s(e,t,i){l(e),l(t),l(i);var r=y.length/3,n=P.generateTopUV(N,y,r-3,r-2,r-1);h(n[0]),h(n[1]),h(n[2])}function c(e,t,i,r,n,a,o,s,c){l(e),l(t),l(r),l(t),l(i),l(r);var u=y.length/3,d=P.generateSideWallUV(N,y,u-6,u-3,u-2,u-1);h(d[0]),h(d[1]),h(d[3]),h(d[1]),h(d[2]),h(d[3])}function l(e){x.push(y.length/3),y.push(b[3*e+0]),y.push(b[3*e+1]),y.push(b[3*e+2])}function h(e){_.push(e.x),_.push(e.y)}var d,p,f,m,v,g=t.arrays?t.arrays:this.getArrays(),y=g.position,x=g.index,_=g.uv,b=[],w=void 0!==t.amount?t.amount:100,M=void 0!==t.bevelThickness?t.bevelThickness:6,E=void 0!==t.bevelSize?t.bevelSize:M-2,S=void 0!==t.bevelSegments?t.bevelSegments:3,T=void 0===t.bevelEnabled||t.bevelEnabled,A=void 0!==t.curveSegments?t.curveSegments:12,L=void 0!==t.steps?t.steps:1,C=t.extrudePath,R=!1,P=void 0!==t.UVGenerator?t.UVGenerator:ui.WorldUVGenerator;C&&(d=C.getSpacedPoints(L),R=!0,T=!1,p=void 0!==t.frames?t.frames:C.computeFrenetFrames(L,!1),f=new u,m=new u,v=new u),T||(S=0,M=0,E=0);var D,U,I,N=this,O=e.extractPoints(A),F=O.shape,z=O.holes;if(!ls.isClockWise(F))for(F=F.reverse(),U=0,I=z.length;U<I;U++)D=z[U],ls.isClockWise(D)&&(z[U]=D.reverse());var B=ls.triangulateShape(F,z),G=F;for(U=0,I=z.length;U<I;U++)D=z[U],F=F.concat(D);for(var V,H,j,k,W,X,q=F.length,Y=B.length,Z=[],J=0,K=G.length,Q=K-1,$=J+1;J<K;J++,Q++,$++)Q===K&&(Q=0),$===K&&($=0),Z[J]=r(G[J],G[Q],G[$]);var ee,te=[],ie=Z.concat();for(U=0,I=z.length;U<I;U++){for(D=z[U],ee=[],J=0,K=D.length,Q=K-1,$=J+1;J<K;J++,Q++,$++)Q===K&&(Q=0),$===K&&($=0),ee[J]=r(D[J],D[Q],D[$]);te.push(ee),ie=ie.concat(ee)}for(V=0;V<S;V++){for(j=V/S,k=M*Math.cos(j*Math.PI/2),H=E*Math.sin(j*Math.PI/2),J=0,K=G.length;J<K;J++)W=i(G[J],Z[J],H),o(W.x,W.y,-k);for(U=0,I=z.length;U<I;U++)for(D=z[U],ee=te[U],J=0,K=D.length;J<K;J++)W=i(D[J],ee[J],H),o(W.x,W.y,-k)}for(H=E,J=0;J<q;J++)W=T?i(F[J],ie[J],H):F[J],R?(m.copy(p.normals[0]).multiplyScalar(W.x),f.copy(p.binormals[0]).multiplyScalar(W.y),v.copy(d[0]).add(m).add(f),o(v.x,v.y,v.z)):o(W.x,W.y,0);var re;for(re=1;re<=L;re++)for(J=0;J<q;J++)W=T?i(F[J],ie[J],H):F[J],R?(m.copy(p.normals[re]).multiplyScalar(W.x),f.copy(p.binormals[re]).multiplyScalar(W.y),v.copy(d[re]).add(m).add(f),o(v.x,v.y,v.z)):o(W.x,W.y,w/L*re);for(V=S-1;V>=0;V--){for(j=V/S,k=M*Math.cos(j*Math.PI/2),H=E*Math.sin(j*Math.PI/2),J=0,K=G.length;J<K;J++)W=i(G[J],Z[J],H),o(W.x,W.y,w+k);for(U=0,I=z.length;U<I;U++)for(D=z[U],ee=te[U],J=0,K=D.length;J<K;J++)W=i(D[J],ee[J],H),R?o(W.x,W.y+d[L-1].y,d[L-1].x+k):o(W.x,W.y,w+k)}!function(){var e=y.length/3;if(T){var i=0,r=q*i;for(J=0;J<Y;J++)X=B[J],s(X[2]+r,X[1]+r,X[0]+r);for(i=L+2*S,r=q*i,J=0;J<Y;J++)X=B[J],s(X[0]+r,X[1]+r,X[2]+r)}else{for(J=0;J<Y;J++)X=B[J],s(X[2],X[1],X[0]);for(J=0;J<Y;J++)X=B[J],s(X[0]+q*L,X[1]+q*L,X[2]+q*L)}N.addGroup(e,y.length/3-e,void 0!==t.material?t.material:0)}(),function(){var e=y.length/3,i=0;for(a(G,i),i+=G.length,U=0,I=z.length;U<I;U++)D=z[U],a(D,i),i+=D.length;N.addGroup(e,y.length/3-e,void 0!==t.extrudeMaterial?t.extrudeMaterial:1)}(),t.arrays||(this.setIndex(x),this.addAttribute(\"position\",new Ae(y,3)),this.addAttribute(\"uv\",new Ae(t.arrays.uv,2)))},ui.WorldUVGenerator={generateTopUV:function(e,t,i,r,a){var o=t[3*i],s=t[3*i+1],c=t[3*r],l=t[3*r+1],u=t[3*a],h=t[3*a+1];return[new n(o,s),new n(c,l),new n(u,h)]},generateSideWallUV:function(e,t,i,r,a,o){var s=t[3*i],c=t[3*i+1],l=t[3*i+2],u=t[3*r],h=t[3*r+1],d=t[3*r+2],p=t[3*a],f=t[3*a+1],m=t[3*a+2],v=t[3*o],g=t[3*o+1],y=t[3*o+2];return Math.abs(c-h)<.01?[new n(s,1-l),new n(u,1-d),new n(p,1-m),new n(v,1-y)]:[new n(c,1-l),new n(h,1-d),new n(f,1-m),new n(g,1-y)]}},di.prototype=Object.create(ye.prototype),di.prototype.constructor=di,pi.prototype=Object.create(hi.prototype),pi.prototype.constructor=pi,fi.prototype=Object.create(ye.prototype),fi.prototype.constructor=fi,mi.prototype=Object.create(Pe.prototype),mi.prototype.constructor=mi,vi.prototype=Object.create(ye.prototype),vi.prototype.constructor=vi,gi.prototype=Object.create(Pe.prototype),gi.prototype.constructor=gi,yi.prototype=Object.create(ye.prototype),yi.prototype.constructor=yi,xi.prototype=Object.create(Pe.prototype),xi.prototype.constructor=xi,_i.prototype=Object.create(ye.prototype),_i.prototype.constructor=_i,bi.prototype=Object.create(Pe.prototype),bi.prototype.constructor=bi,wi.prototype=Object.create(Pe.prototype),wi.prototype.constructor=wi,Mi.prototype=Object.create(ye.prototype),Mi.prototype.constructor=Mi,Ei.prototype=Object.create(Pe.prototype),Ei.prototype.constructor=Ei,Si.prototype=Object.create(Mi.prototype),Si.prototype.constructor=Si,Ti.prototype=Object.create(Ei.prototype),Ti.prototype.constructor=Ti,Ai.prototype=Object.create(ye.prototype),Ai.prototype.constructor=Ai,Li.prototype=Object.create(Pe.prototype),Li.prototype.constructor=Li;var us=Object.freeze({WireframeGeometry:Wt,ParametricGeometry:Xt,ParametricBufferGeometry:qt,TetrahedronGeometry:Jt,TetrahedronBufferGeometry:Kt,OctahedronGeometry:Qt,OctahedronBufferGeometry:$t,IcosahedronGeometry:ei,IcosahedronBufferGeometry:ti,DodecahedronGeometry:ii,DodecahedronBufferGeometry:ri,PolyhedronGeometry:Yt,PolyhedronBufferGeometry:Zt,TubeGeometry:ni,TubeBufferGeometry:ai,TorusKnotGeometry:oi,TorusKnotBufferGeometry:si,TorusGeometry:ci,TorusBufferGeometry:li,TextGeometry:di,TextBufferGeometry:pi,SphereGeometry:fi,SphereBufferGeometry:mi,RingGeometry:vi,RingBufferGeometry:gi,PlaneGeometry:Ie,PlaneBufferGeometry:Ne,LatheGeometry:yi,LatheBufferGeometry:xi,ShapeGeometry:_i,ShapeBufferGeometry:bi,ExtrudeGeometry:ui,ExtrudeBufferGeometry:hi,EdgesGeometry:wi,ConeGeometry:Si,ConeBufferGeometry:Ti,CylinderGeometry:Mi,CylinderBufferGeometry:Ei,CircleGeometry:Ai,CircleBufferGeometry:Li,BoxGeometry:De,BoxBufferGeometry:Ue});Ci.prototype=Object.create($.prototype),Ci.prototype.constructor=Ci,Ci.prototype.isShadowMaterial=!0,Ri.prototype=Object.create(ee.prototype),Ri.prototype.constructor=Ri,Ri.prototype.isRawShaderMaterial=!0,Pi.prototype=Object.create($.prototype),Pi.prototype.constructor=Pi,Pi.prototype.isMeshStandardMaterial=!0,Pi.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.defines={STANDARD:\"\"},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Di.prototype=Object.create(Pi.prototype),Di.prototype.constructor=Di,Di.prototype.isMeshPhysicalMaterial=!0,Di.prototype.copy=function(e){return Pi.prototype.copy.call(this,e),this.defines={PHYSICAL:\"\"},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},Ui.prototype=Object.create($.prototype),Ui.prototype.constructor=Ui,Ui.prototype.isMeshPhongMaterial=!0,Ui.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Ii.prototype=Object.create(Ui.prototype),Ii.prototype.constructor=Ii,Ii.prototype.isMeshToonMaterial=!0,Ii.prototype.copy=function(e){return Ui.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},Ni.prototype=Object.create($.prototype),Ni.prototype.constructor=Ni,Ni.prototype.isMeshNormalMaterial=!0,Ni.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Oi.prototype=Object.create($.prototype),Oi.prototype.constructor=Oi,Oi.prototype.isMeshLambertMaterial=!0,Oi.prototype.copy=function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Fi.prototype=Object.create(Nt.prototype),Fi.prototype.constructor=Fi,Fi.prototype.isLineDashedMaterial=!0,Fi.prototype.copy=function(e){return Nt.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var hs=Object.freeze({ShadowMaterial:Ci,SpriteMaterial:Ct,RawShaderMaterial:Ri,ShaderMaterial:ee,PointsMaterial:Bt,MeshPhysicalMaterial:Di,MeshStandardMaterial:Pi,MeshPhongMaterial:Ui,MeshToonMaterial:Ii,MeshNormalMaterial:Ni,MeshLambertMaterial:Oi,MeshDepthMaterial:te,MeshDistanceMaterial:ie,MeshBasicMaterial:Oe,LineDashedMaterial:Fi,LineBasicMaterial:Nt,Material:$}),ds={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},ps=new zi;Object.assign(Bi.prototype,{load:function(e,t,i,r){void 0===e&&(e=\"\"),void 0!==this.path&&(e=this.path+e);var n=this,a=ds.get(e);if(void 0!==a)return n.manager.itemStart(e),setTimeout(function(){t&&t(a),n.manager.itemEnd(e)},0),a;var o=/^data:(.*?)(;base64)?,(.*)$/,s=e.match(o);if(s){var c=s[1],l=!!s[2],u=s[3];u=window.decodeURIComponent(u),l&&(u=window.atob(u));try{var h,d=(this.responseType||\"\").toLowerCase();switch(d){case\"arraybuffer\":case\"blob\":h=new ArrayBuffer(u.length);for(var p=new Uint8Array(h),f=0;f<u.length;f++)p[f]=u.charCodeAt(f);\"blob\"===d&&(h=new Blob([h],{type:c}));break;case\"document\":var m=new DOMParser;h=m.parseFromString(u,c);break;case\"json\":h=JSON.parse(u);break;default:h=u}window.setTimeout(function(){t&&t(h),n.manager.itemEnd(e)},0)}catch(t){window.setTimeout(function(){r&&r(t),n.manager.itemEnd(e),n.manager.itemError(e)},0)}}else{var v=new XMLHttpRequest;v.open(\"GET\",e,!0),v.addEventListener(\"load\",function(i){var a=i.target.response;ds.add(e,a),200===this.status?(t&&t(a),n.manager.itemEnd(e)):0===this.status?(console.warn(\"THREE.FileLoader: HTTP Status 0 received.\"),t&&t(a),n.manager.itemEnd(e)):(r&&r(i),n.manager.itemEnd(e),n.manager.itemError(e))},!1),void 0!==i&&v.addEventListener(\"progress\",function(e){i(e)},!1),v.addEventListener(\"error\",function(t){r&&r(t),n.manager.itemEnd(e),n.manager.itemError(e)},!1),void 0!==this.responseType&&(v.responseType=this.responseType),void 0!==this.withCredentials&&(v.withCredentials=this.withCredentials),v.overrideMimeType&&v.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(var g in this.requestHeader)v.setRequestHeader(g,this.requestHeader[g]);v.send(null)}return n.manager.itemStart(e),v},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),Object.assign(Gi.prototype,{load:function(e,t,i,r){var n=this,a=[],o=new jt;o.image=a;var s=new Bi(this.manager);if(s.setPath(this.path),s.setResponseType(\"arraybuffer\"),Array.isArray(e))for(var c=0,l=0,u=e.length;l<u;++l)!function(l){s.load(e[l],function(e){var i=n._parser(e,!0);a[l]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},6===(c+=1)&&(1===i.mipmapCount&&(o.minFilter=$a),o.format=i.format,o.needsUpdate=!0,t&&t(o))},i,r)}(l);else s.load(e,function(e){var i=n._parser(e,!0);if(i.isCubemap)for(var r=i.mipmaps.length/i.mipmapCount,s=0;s<r;s++){a[s]={mipmaps:[]};for(var c=0;c<i.mipmapCount;c++)a[s].mipmaps.push(i.mipmaps[s*i.mipmapCount+c]),a[s].format=i.format,a[s].width=i.width,a[s].height=i.height}else o.image.width=i.width,o.image.height=i.height,o.mipmaps=i.mipmaps;1===i.mipmapCount&&(o.minFilter=$a),o.format=i.format,o.needsUpdate=!0,t&&t(o)},i,r);return o},setPath:function(e){return this.path=e,this}}),Object.assign(Vi.prototype,{load:function(e,t,i,r){var n=this,a=new d,o=new Bi(this.manager);return o.setResponseType(\"arraybuffer\"),o.load(e,function(e){var i=n._parser(e);i&&(void 0!==i.image?a.image=i.image:void 0!==i.data&&(a.image.width=i.width,a.image.height=i.height,a.image.data=i.data),a.wrapS=void 0!==i.wrapS?i.wrapS:Ya,a.wrapT=void 0!==i.wrapT?i.wrapT:Ya,a.magFilter=void 0!==i.magFilter?i.magFilter:$a,a.minFilter=void 0!==i.minFilter?i.minFilter:to,a.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.format&&(a.format=i.format),void 0!==i.type&&(a.type=i.type),void 0!==i.mipmaps&&(a.mipmaps=i.mipmaps),1===i.mipmapCount&&(a.minFilter=$a),a.needsUpdate=!0,t&&t(a,i))},i,r),a}}),Object.assign(Hi.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,i,r){void 0===e&&(e=\"\"),void 0!==this.path&&(e=this.path+e);var n=this,a=ds.get(e);if(void 0!==a)return n.manager.itemStart(e),setTimeout(function(){t&&t(a),n.manager.itemEnd(e)},0),a;var o=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");return o.addEventListener(\"load\",function(){ds.add(e,this),t&&t(this),n.manager.itemEnd(e)},!1),o.addEventListener(\"error\",function(t){r&&r(t),n.manager.itemEnd(e),n.manager.itemError(e)},!1),\"data:\"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),n.manager.itemStart(e),o.src=e,o},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(ji.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,i,r){var n=new p,a=new Hi(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);for(var o=0,s=0;s<e.length;++s)!function(i){a.load(e[i],function(e){n.images[i]=e,6==++o&&(n.needsUpdate=!0,t&&t(n))},void 0,r)}(s);return n},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(ki.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,i,r){var n=new Hi(this.manager);n.setCrossOrigin(this.crossOrigin),n.setPath(this.path);var o=new a;return o.image=n.load(e,function(){var i=e.search(/\\.(jpg|jpeg)$/)>0||0===e.search(/^data\\:image\\/jpeg/);o.format=i?vo:go,o.needsUpdate=!0,void 0!==t&&t(o)},i,r),o},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Wi.prototype=Object.assign(Object.create(de.prototype),{constructor:Wi,isLight:!0,copy:function(e){return de.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=de.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Xi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Xi,isHemisphereLight:!0,copy:function(e){return Wi.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(qi.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Yi.prototype=Object.assign(Object.create(qi.prototype),{constructor:Yi,isSpotLightShadow:!0,update:function(e){var t=this.camera,i=2*Wo.RAD2DEG*e.angle,r=this.mapSize.width/this.mapSize.height,n=e.distance||t.far;i===t.fov&&r===t.aspect&&n===t.far||(t.fov=i,t.aspect=r,t.far=n,t.updateProjectionMatrix())}}),Zi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Zi,isSpotLight:!0,copy:function(e){return Wi.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Ji.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Ji,isPointLight:!0,copy:function(e){return Wi.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),Ki.prototype=Object.assign(Object.create(qi.prototype),{constructor:Ki}),Qi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Qi,isDirectionalLight:!0,copy:function(e){return Wi.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),$i.prototype=Object.assign(Object.create(Wi.prototype),{constructor:$i,isAmbientLight:!0}),er.prototype=Object.assign(Object.create(Wi.prototype),{constructor:er,isRectAreaLight:!0,copy:function(e){return Wi.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=Wi.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}});var fs={arraySlice:function(e,t,i){return fs.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==i?i:e.length)):e.slice(t,i)},convertArray:function(e,t,i){return!e||!i&&e.constructor===t?e:\"number\"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(t,i){return e[t]-e[i]}for(var i=e.length,r=new Array(i),n=0;n!==i;++n)r[n]=n;return r.sort(t),r},sortedArray:function(e,t,i){for(var r=e.length,n=new e.constructor(r),a=0,o=0;o!==r;++a)for(var s=i[a]*t,c=0;c!==t;++c)n[o++]=e[s+c];return n},flattenJSON:function(e,t,i,r){for(var n=1,a=e[0];void 0!==a&&void 0===a[r];)a=e[n++];if(void 0!==a){var o=a[r];if(void 0!==o)if(Array.isArray(o))do{o=a[r],void 0!==o&&(t.push(a.time),i.push.apply(i,o)),a=e[n++]}while(void 0!==a);else if(void 0!==o.toArray)do{o=a[r],void 0!==o&&(t.push(a.time),o.toArray(i,i.length)),a=e[n++]}while(void 0!==a);else do{o=a[r],void 0!==o&&(t.push(a.time),i.push(o)),a=e[n++]}while(void 0!==a)}}};Object.assign(tr.prototype,{evaluate:function(e){var t=this.parameterPositions,i=this._cachedIndex,r=t[i],n=t[i-1];e:{t:{var a;i:{r:if(!(e<r)){for(var o=i+2;;){if(void 0===r){if(e<n)break r;return i=t.length,this._cachedIndex=i,this.afterEnd_(i-1,e,n)}if(i===o)break;if(n=r,r=t[++i],e<r)break t}a=t.length;break i}{if(e>=n)break e;var s=t[1];e<s&&(i=2,n=s);for(var o=i-2;;){if(void 0===n)return this._cachedIndex=0,this.beforeStart_(0,e,r);if(i===o)break;if(r=n,n=t[--i-1],e>=n)break t}a=i,i=0}}for(;i<a;){var c=i+a>>>1;e<t[c]?a=c:i=c+1}if(r=t[i],void 0===(n=t[i-1]))return this._cachedIndex=0,this.beforeStart_(0,e,r);if(void 0===r)return i=t.length,this._cachedIndex=i,this.afterEnd_(i-1,n,e)}this._cachedIndex=i,this.intervalChanged_(i,n,r)}return this.interpolate_(i,n,e,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,i=this.sampleValues,r=this.valueSize,n=e*r,a=0;a!==r;++a)t[a]=i[n+a];return t},interpolate_:function(e,t,i,r){throw new Error(\"call to abstract method\")},intervalChanged_:function(e,t,i){}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(tr.prototype,{beforeStart_:tr.prototype.copySampleValue_,afterEnd_:tr.prototype.copySampleValue_}),ir.prototype=Object.assign(Object.create(tr.prototype),{constructor:ir,DefaultSettings_:{endingStart:Do,endingEnd:Do},intervalChanged_:function(e,t,i){var r=this.parameterPositions,n=e-2,a=e+1,o=r[n],s=r[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:n=e,o=2*t-i;break;case 2402:n=r.length-2,o=t+r[n]-r[n+1];break;default:n=e,o=i}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=e,s=2*i-t;break;case 2402:a=1,s=i+r[1]-r[0];break;default:a=e-1,s=t}var c=.5*(i-t),l=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(s-i),this._offsetPrev=n*l,this._offsetNext=a*l},interpolate_:function(e,t,i,r){for(var n=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(i-t)/(r-t),f=p*p,m=f*p,v=-h*m+2*h*f-h*p,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,_=0;_!==o;++_)n[_]=v*a[l+_]+g*a[c+_]+y*a[s+_]+x*a[u+_];return n}}),rr.prototype=Object.assign(Object.create(tr.prototype),{constructor:rr,interpolate_:function(e,t,i,r){for(var n=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(i-t)/(r-t),u=1-l,h=0;h!==o;++h)n[h]=a[c+h]*u+a[s+h]*l;return n}}),nr.prototype=Object.assign(Object.create(tr.prototype),{constructor:nr,interpolate_:function(e,t,i,r){return this.copySampleValue_(e-1)}});var ms;ms={TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new nr(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new rr(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new ir(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var i=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(i);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(\"THREE.KeyframeTrackPrototype:\",i)}this.createInterpolant=t},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,i=0,r=t.length;i!==r;++i)t[i]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,i=0,r=t.length;i!==r;++i)t[i]*=e;return this},trim:function(e,t){for(var i=this.times,r=i.length,n=0,a=r-1;n!==r&&i[n]<e;)++n;for(;-1!==a&&i[a]>t;)--a;if(++a,0!==n||a!==r){n>=a&&(a=Math.max(a,1),n=a-1);var o=this.getValueSize();this.times=fs.arraySlice(i,n,a),this.values=fs.arraySlice(this.values,n*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error(\"THREE.KeyframeTrackPrototype: Invalid value size in track.\",this),e=!1);var i=this.times,r=this.values,n=i.length;0===n&&(console.error(\"THREE.KeyframeTrackPrototype: Track is empty.\",this),e=!1);for(var a=null,o=0;o!==n;o++){var s=i[o];if(\"number\"==typeof s&&isNaN(s)){console.error(\"THREE.KeyframeTrackPrototype: Time is not a valid number.\",this,o,s),e=!1;break}if(null!==a&&a>s){console.error(\"THREE.KeyframeTrackPrototype: Out of order keys.\",this,o,s,a),e=!1;break}a=s}if(void 0!==r&&fs.isTypedArray(r))for(var o=0,c=r.length;o!==c;++o){var l=r[o];if(isNaN(l)){console.error(\"THREE.KeyframeTrackPrototype: Value is not a valid number.\",this,o,l),e=!1;break}}return e},optimize:function(){for(var e=this.times,t=this.values,i=this.getValueSize(),r=2302===this.getInterpolation(),n=1,a=e.length-1,o=1;o<a;++o){var s=!1,c=e[o];if(c!==e[o+1]&&(1!==o||c!==c[0]))if(r)s=!0;else for(var l=o*i,u=l-i,h=l+i,d=0;d!==i;++d){var p=t[l+d];if(p!==t[u+d]||p!==t[h+d]){s=!0;break}}if(s){if(o!==n){e[n]=e[o];for(var f=o*i,m=n*i,d=0;d!==i;++d)t[m+d]=t[f+d]}++n}}if(a>0){e[n]=e[a];for(var f=a*i,m=n*i,d=0;d!==i;++d)t[m+d]=t[f+d];++n}return n!==e.length&&(this.times=fs.arraySlice(e,0,n),this.values=fs.arraySlice(t,0,n*i)),this}},or.prototype=Object.assign(Object.create(ms),{constructor:or,ValueTypeName:\"vector\"}),sr.prototype=Object.assign(Object.create(tr.prototype),{constructor:sr,interpolate_:function(e,t,i,r){for(var n=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(i-t)/(r-t),u=s+o;s!==u;s+=4)l.slerpFlat(n,0,a,s-o,a,s,c);return n}}),cr.prototype=Object.assign(Object.create(ms),{constructor:cr,ValueTypeName:\"quaternion\",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new sr(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),lr.prototype=Object.assign(Object.create(ms),{constructor:lr,ValueTypeName:\"number\"}),ur.prototype=Object.assign(Object.create(ms),{constructor:ur,ValueTypeName:\"string\",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),hr.prototype=Object.assign(Object.create(ms),{constructor:hr,ValueTypeName:\"bool\",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),dr.prototype=Object.assign(Object.create(ms),{constructor:dr,ValueTypeName:\"color\"}),pr.prototype=ms,ms.constructor=pr,Object.assign(pr,{parse:function(e){if(void 0===e.type)throw new Error(\"track type undefined, can not parse\");var t=pr._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var i=[],r=[];fs.flattenJSON(e.keys,i,r,\"value\"),e.times=i,e.values=r}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var t,i=e.constructor;if(void 0!==i.toJSON)t=i.toJSON(e);else{t={name:e.name,times:fs.convertArray(e.times,Array),values:fs.convertArray(e.values,Array)};var r=e.getInterpolation();r!==e.DefaultInterpolation&&(t.interpolation=r)}return t.type=e.ValueTypeName,t},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return lr;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return or;case\"color\":return dr;case\"quaternion\":return cr;case\"bool\":case\"boolean\":return hr;case\"string\":return ur}throw new Error(\"Unsupported typeName: \"+e)}}),Object.assign(fr,{parse:function(e){for(var t=[],i=e.tracks,r=1/(e.fps||1),n=0,a=i.length;n!==a;++n)t.push(pr.parse(i[n]).scale(r));return new fr(e.name,e.duration,t)},toJSON:function(e){for(var t=[],i=e.tracks,r={name:e.name,duration:e.duration,tracks:t},n=0,a=i.length;n!==a;++n)t.push(pr.toJSON(i[n]));return r},CreateFromMorphTargetSequence:function(e,t,i,r){for(var n=t.length,a=[],o=0;o<n;o++){var s=[],c=[];s.push((o+n-1)%n,o,(o+1)%n),c.push(0,1,0);var l=fs.getKeyframeOrder(s);s=fs.sortedArray(s,1,l),c=fs.sortedArray(c,1,l),r||0!==s[0]||(s.push(n),c.push(c[0])),a.push(new lr(\".morphTargetInfluences[\"+t[o].name+\"]\",s,c).scale(1/i))}return new fr(e,-1,a)},findByName:function(e,t){var i=e;if(!Array.isArray(e)){var r=e;i=r.geometry&&r.geometry.animations||r.animations}for(var n=0;n<i.length;n++)if(i[n].name===t)return i[n];return null},CreateClipsFromMorphTargetSequences:function(e,t,i){for(var r={},n=/^([\\w-]*?)([\\d]+)$/,a=0,o=e.length;a<o;a++){var s=e[a],c=s.name.match(n);if(c&&c.length>1){var l=c[1],u=r[l];u||(r[l]=u=[]),u.push(s)}}var h=[];for(var l in r)h.push(fr.CreateFromMorphTargetSequence(l,r[l],t,i));return h},parseAnimation:function(e,t){if(!e)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;for(var i=function(e,t,i,r,n){if(0!==i.length){var a=[],o=[];fs.flattenJSON(i,a,o,r),0!==a.length&&n.push(new e(t,a,o))}},r=[],n=e.name||\"default\",a=e.length||-1,o=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var l=s[c].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var u={},h=0;h<l.length;h++)if(l[h].morphTargets)for(var d=0;d<l[h].morphTargets.length;d++)u[l[h].morphTargets[d]]=-1;for(var p in u){for(var f=[],m=[],d=0;d!==l[h].morphTargets.length;++d){var v=l[h];f.push(v.time),m.push(v.morphTarget===p?1:0)}r.push(new lr(\".morphTargetInfluence[\"+p+\"]\",f,m))}a=u.length*(o||1)}else{var g=\".bones[\"+t[c].name+\"]\";i(or,g+\".position\",l,\"pos\",r),i(cr,g+\".quaternion\",l,\"rot\",r),i(or,g+\".scale\",l,\"scl\",r)}}return 0===r.length?null:new fr(n,a,r)}}),Object.assign(fr.prototype,{resetDuration:function(){for(var e=this.tracks,t=0,i=0,r=e.length;i!==r;++i){var n=this.tracks[i];t=Math.max(t,n.times[n.times.length-1])}this.duration=t},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}}),Object.assign(mr.prototype,{load:function(e,t,i,r){var n=this;new Bi(n.manager).load(e,function(e){t(n.parse(JSON.parse(e)))},i,r)},setTextures:function(e){this.textures=e},parse:function(e){function t(e){return void 0===i[e]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",e),i[e]}var i=this.textures,r=new hs[e.type];if(void 0!==e.uuid&&(r.uuid=e.uuid),void 0!==e.name&&(r.name=e.name),void 0!==e.color&&r.color.setHex(e.color),void 0!==e.roughness&&(r.roughness=e.roughness),void 0!==e.metalness&&(r.metalness=e.metalness),void 0!==e.emissive&&r.emissive.setHex(e.emissive),void 0!==e.specular&&r.specular.setHex(e.specular),void 0!==e.shininess&&(r.shininess=e.shininess),void 0!==e.clearCoat&&(r.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(r.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.uniforms&&(r.uniforms=e.uniforms),void 0!==e.vertexShader&&(r.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(r.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(r.vertexColors=e.vertexColors),void 0!==e.fog&&(r.fog=e.fog),void 0!==e.flatShading&&(r.flatShading=e.flatShading),void 0!==e.blending&&(r.blending=e.blending),void 0!==e.side&&(r.side=e.side),void 0!==e.opacity&&(r.opacity=e.opacity),void 0!==e.transparent&&(r.transparent=e.transparent),void 0!==e.alphaTest&&(r.alphaTest=e.alphaTest),void 0!==e.depthTest&&(r.depthTest=e.depthTest),void 0!==e.depthWrite&&(r.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(r.colorWrite=e.colorWrite),void 0!==e.wireframe&&(r.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(r.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(r.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(r.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.skinning&&(r.skinning=e.skinning),void 0!==e.morphTargets&&(r.morphTargets=e.morphTargets),void 0!==e.dithering&&(r.dithering=e.dithering),void 0!==e.visible&&(r.visible=e.visible),void 0!==e.userData&&(r.userData=e.userData),void 0!==e.shading&&(r.flatShading=1===e.shading),void 0!==e.size&&(r.size=e.size),void 0!==e.sizeAttenuation&&(r.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(r.map=t(e.map)),void 0!==e.alphaMap&&(r.alphaMap=t(e.alphaMap),r.transparent=!0),void 0!==e.bumpMap&&(r.bumpMap=t(e.bumpMap)),void 0!==e.bumpScale&&(r.bumpScale=e.bumpScale),void 0!==e.normalMap&&(r.normalMap=t(e.normalMap)),void 0!==e.normalScale){var a=e.normalScale;!1===Array.isArray(a)&&(a=[a,a]),r.normalScale=(new n).fromArray(a)}return void 0!==e.displacementMap&&(r.displacementMap=t(e.displacementMap)),void 0!==e.displacementScale&&(r.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(r.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(r.roughnessMap=t(e.roughnessMap)),void 0!==e.metalnessMap&&(r.metalnessMap=t(e.metalnessMap)),void 0!==e.emissiveMap&&(r.emissiveMap=t(e.emissiveMap)),void 0!==e.emissiveIntensity&&(r.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(r.specularMap=t(e.specularMap)),void 0!==e.envMap&&(r.envMap=t(e.envMap)),void 0!==e.reflectivity&&(r.reflectivity=e.reflectivity),void 0!==e.lightMap&&(r.lightMap=t(e.lightMap)),void 0!==e.lightMapIntensity&&(r.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(r.aoMap=t(e.aoMap)),void 0!==e.aoMapIntensity&&(r.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(r.gradientMap=t(e.gradientMap)),r}}),Object.assign(vr.prototype,{load:function(e,t,i,r){var n=this;new Bi(n.manager).load(e,function(e){t(n.parse(JSON.parse(e)))},i,r)},parse:function(e){var t=new Pe,i=e.data.index;if(void 0!==i){var r=new vs[i.type](i.array);t.setIndex(new xe(r,1))}var n=e.data.attributes;for(var a in n){var o=n[a],r=new vs[o.type](o.array);t.addAttribute(a,new xe(r,o.itemSize,o.normalized))}var s=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==s)for(var c=0,l=s.length;c!==l;++c){var h=s[c];t.addGroup(h.start,h.count,h.materialIndex)}var d=e.data.boundingSphere;if(void 0!==d){var p=new u;void 0!==d.center&&p.fromArray(d.center),t.boundingSphere=new ne(p,d.radius)}return t}});var vs={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:\"undefined\"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};gr.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,i=0,r=t.length;i<r;i+=2){var n=t[i],a=t[i+1];if(n.test(e))return a}return null}},Object.assign(gr.prototype,{crossOrigin:void 0,extractUrlBase:function(e){var t=e.split(\"/\");return 1===t.length?\"./\":(t.pop(),t.join(\"/\")+\"/\")},initMaterials:function(e,t,i){for(var r=[],n=0;n<e.length;++n)r[n]=this.createMaterial(e[n],t,i);return r},createMaterial:function(){var e={NoBlending:ia,NormalBlending:ra,AdditiveBlending:na,SubtractiveBlending:aa,MultiplyBlending:oa,CustomBlending:sa},t=new Y,i=new ki,r=new mr;return function(n,a,o){function s(e,t,r,n,s){var l,u=a+e,h=gr.Handlers.get(u);null!==h?l=h.load(u):(i.setCrossOrigin(o),l=i.load(u)),void 0!==t&&(l.repeat.fromArray(t),1!==t[0]&&(l.wrapS=qa),1!==t[1]&&(l.wrapT=qa)),void 0!==r&&l.offset.fromArray(r),void 0!==n&&(\"repeat\"===n[0]&&(l.wrapS=qa),\"mirror\"===n[0]&&(l.wrapS=Za),\"repeat\"===n[1]&&(l.wrapT=qa),\"mirror\"===n[1]&&(l.wrapT=Za)),void 0!==s&&(l.anisotropy=s);var d=Wo.generateUUID();return c[d]=l,d}var c={},l={uuid:Wo.generateUUID(),type:\"MeshLambertMaterial\"};for(var u in n){var h=n[u];switch(u){case\"DbgColor\":case\"DbgIndex\":case\"opticalDensity\":case\"illumination\":break;case\"DbgName\":l.name=h;break;case\"blending\":l.blending=e[h];break;case\"colorAmbient\":case\"mapAmbient\":console.warn(\"THREE.Loader.createMaterial:\",u,\"is no longer supported.\");break;case\"colorDiffuse\":l.color=t.fromArray(h).getHex();break;case\"colorSpecular\":l.specular=t.fromArray(h).getHex();break;case\"colorEmissive\":l.emissive=t.fromArray(h).getHex();break;case\"specularCoef\":l.shininess=h;break;case\"shading\":\"basic\"===h.toLowerCase()&&(l.type=\"MeshBasicMaterial\"),\"phong\"===h.toLowerCase()&&(l.type=\"MeshPhongMaterial\"),\"standard\"===h.toLowerCase()&&(l.type=\"MeshStandardMaterial\");break;case\"mapDiffuse\":l.map=s(h,n.mapDiffuseRepeat,n.mapDiffuseOffset,n.mapDiffuseWrap,n.mapDiffuseAnisotropy);break;case\"mapDiffuseRepeat\":case\"mapDiffuseOffset\":case\"mapDiffuseWrap\":case\"mapDiffuseAnisotropy\":break;case\"mapEmissive\":l.emissiveMap=s(h,n.mapEmissiveRepeat,n.mapEmissiveOffset,n.mapEmissiveWrap,n.mapEmissiveAnisotropy);break;case\"mapEmissiveRepeat\":case\"mapEmissiveOffset\":case\"mapEmissiveWrap\":case\"mapEmissiveAnisotropy\":break;case\"mapLight\":l.lightMap=s(h,n.mapLightRepeat,n.mapLightOffset,n.mapLightWrap,n.mapLightAnisotropy);break;case\"mapLightRepeat\":case\"mapLightOffset\":case\"mapLightWrap\":case\"mapLightAnisotropy\":break;case\"mapAO\":l.aoMap=s(h,n.mapAORepeat,n.mapAOOffset,n.mapAOWrap,n.mapAOAnisotropy);break;case\"mapAORepeat\":case\"mapAOOffset\":case\"mapAOWrap\":case\"mapAOAnisotropy\":break;case\"mapBump\":l.bumpMap=s(h,n.mapBumpRepeat,n.mapBumpOffset,n.mapBumpWrap,n.mapBumpAnisotropy);break;case\"mapBumpScale\":l.bumpScale=h;break;case\"mapBumpRepeat\":case\"mapBumpOffset\":case\"mapBumpWrap\":case\"mapBumpAnisotropy\":break;case\"mapNormal\":l.normalMap=s(h,n.mapNormalRepeat,n.mapNormalOffset,n.mapNormalWrap,n.mapNormalAnisotropy);break;case\"mapNormalFactor\":l.normalScale=[h,h];break;case\"mapNormalRepeat\":case\"mapNormalOffset\":case\"mapNormalWrap\":case\"mapNormalAnisotropy\":break;case\"mapSpecular\":l.specularMap=s(h,n.mapSpecularRepeat,n.mapSpecularOffset,n.mapSpecularWrap,n.mapSpecularAnisotropy);break;case\"mapSpecularRepeat\":case\"mapSpecularOffset\":case\"mapSpecularWrap\":case\"mapSpecularAnisotropy\":break;case\"mapMetalness\":l.metalnessMap=s(h,n.mapMetalnessRepeat,n.mapMetalnessOffset,n.mapMetalnessWrap,n.mapMetalnessAnisotropy);break;case\"mapMetalnessRepeat\":case\"mapMetalnessOffset\":case\"mapMetalnessWrap\":case\"mapMetalnessAnisotropy\":break;case\"mapRoughness\":l.roughnessMap=s(h,n.mapRoughnessRepeat,n.mapRoughnessOffset,n.mapRoughnessWrap,n.mapRoughnessAnisotropy);break;case\"mapRoughnessRepeat\":case\"mapRoughnessOffset\":case\"mapRoughnessWrap\":case\"mapRoughnessAnisotropy\":break;case\"mapAlpha\":l.alphaMap=s(h,n.mapAlphaRepeat,n.mapAlphaOffset,n.mapAlphaWrap,n.mapAlphaAnisotropy);break;case\"mapAlphaRepeat\":case\"mapAlphaOffset\":case\"mapAlphaWrap\":case\"mapAlphaAnisotropy\":break;case\"flipSided\":l.side=Kn;break;case\"doubleSided\":l.side=Qn;break;case\"transparency\":console.warn(\"THREE.Loader.createMaterial: transparency has been renamed to opacity\"),l.opacity=h;break;case\"depthTest\":case\"depthWrite\":case\"colorWrite\":case\"opacity\":case\"reflectivity\":case\"transparent\":case\"visible\":case\"wireframe\":l[u]=h;break;case\"vertexColors\":!0===h&&(l.vertexColors=ta),\"face\"===h&&(l.vertexColors=ea);break;default:console.error(\"THREE.Loader.createMaterial: Unsupported\",u,h)}}return\"MeshBasicMaterial\"===l.type&&delete l.emissive,\"MeshPhongMaterial\"!==l.type&&delete l.specular,l.opacity<1&&(l.transparent=!0),r.setTextures(c),r.parse(l)}}()}),Object.assign(yr.prototype,{load:function(e,t,i,r){var n=this,a=this.texturePath&&\"string\"==typeof this.texturePath?this.texturePath:gr.prototype.extractUrlBase(e),o=new Bi(this.manager);o.setWithCredentials(this.withCredentials),o.load(e,function(i){var r=JSON.parse(i),o=r.metadata;if(void 0!==o){var s=o.type;if(void 0!==s){if(\"object\"===s.toLowerCase())return void console.error(\"THREE.JSONLoader: \"+e+\" should be loaded with THREE.ObjectLoader instead.\");if(\"scene\"===s.toLowerCase())return void console.error(\"THREE.JSONLoader: \"+e+\" should be loaded with THREE.SceneLoader instead.\")}}var c=n.parse(r,a);t(c.geometry,c.materials)},i,r)},setTexturePath:function(e){this.texturePath=e},parse:function(){function e(e,t){function i(e,t){return e&1<<t}var r,a,o,s,c,l,h,d,p,f,m,v,g,y,x,_,b,w,M,E,S,T,A,L,C,R,P,D=e.faces,U=e.vertices,I=e.normals,N=e.colors,O=e.scale,F=0;if(void 0!==e.uvs){for(r=0;r<e.uvs.length;r++)e.uvs[r].length&&F++;for(r=0;r<F;r++)t.faceVertexUvs[r]=[]}for(s=0,c=U.length;s<c;)w=new u,w.x=U[s++]*O,w.y=U[s++]*O,w.z=U[s++]*O,t.vertices.push(w);for(s=0,c=D.length;s<c;)if(f=D[s++],m=i(f,0),v=i(f,1),g=i(f,3),y=i(f,4),x=i(f,5),_=i(f,6),b=i(f,7),m){if(E=new ve,E.a=D[s],E.b=D[s+1],E.c=D[s+3],S=new ve,S.a=D[s+1],S.b=D[s+2],S.c=D[s+3],s+=4,v&&(p=D[s++],E.materialIndex=p,S.materialIndex=p),o=t.faces.length,g)for(r=0;r<F;r++)for(L=e.uvs[r],t.faceVertexUvs[r][o]=[],t.faceVertexUvs[r][o+1]=[],a=0;a<4;a++)d=D[s++],R=L[2*d],P=L[2*d+1],C=new n(R,P),2!==a&&t.faceVertexUvs[r][o].push(C),0!==a&&t.faceVertexUvs[r][o+1].push(C);if(y&&(h=3*D[s++],E.normal.set(I[h++],I[h++],I[h]),S.normal.copy(E.normal)),x)for(r=0;r<4;r++)h=3*D[s++],A=new u(I[h++],I[h++],I[h]),2!==r&&E.vertexNormals.push(A),0!==r&&S.vertexNormals.push(A);if(_&&(l=D[s++],T=N[l],E.color.setHex(T),S.color.setHex(T)),b)for(r=0;r<4;r++)l=D[s++],T=N[l],2!==r&&E.vertexColors.push(new Y(T)),0!==r&&S.vertexColors.push(new Y(T));t.faces.push(E),t.faces.push(S)}else{if(M=new ve,M.a=D[s++],M.b=D[s++],M.c=D[s++],v&&(p=D[s++],M.materialIndex=p),o=t.faces.length,g)for(r=0;r<F;r++)for(L=e.uvs[r],t.faceVertexUvs[r][o]=[],a=0;a<3;a++)d=D[s++],R=L[2*d],P=L[2*d+1],C=new n(R,P),t.faceVertexUvs[r][o].push(C);if(y&&(h=3*D[s++],M.normal.set(I[h++],I[h++],I[h])),x)for(r=0;r<3;r++)h=3*D[s++],A=new u(I[h++],I[h++],I[h]),M.vertexNormals.push(A);if(_&&(l=D[s++],M.color.setHex(N[l])),b)for(r=0;r<3;r++)l=D[s++],M.vertexColors.push(new Y(N[l]));t.faces.push(M)}}function t(e,t){var i=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var r=0,n=e.skinWeights.length;r<n;r+=i){var a=e.skinWeights[r],s=i>1?e.skinWeights[r+1]:0,c=i>2?e.skinWeights[r+2]:0,l=i>3?e.skinWeights[r+3]:0;t.skinWeights.push(new o(a,s,c,l))}if(e.skinIndices)for(var r=0,n=e.skinIndices.length;r<n;r+=i){var u=e.skinIndices[r],h=i>1?e.skinIndices[r+1]:0,d=i>2?e.skinIndices[r+2]:0,p=i>3?e.skinIndices[r+3]:0;t.skinIndices.push(new o(u,h,d,p))}t.bones=e.bones,t.bones&&t.bones.length>0&&(t.skinWeights.length!==t.skinIndices.length||t.skinIndices.length!==t.vertices.length)&&console.warn(\"When skinning, number of vertices (\"+t.vertices.length+\"), skinIndices (\"+t.skinIndices.length+\"), and skinWeights (\"+t.skinWeights.length+\") should match.\")}function i(e,t){var i=e.scale;if(void 0!==e.morphTargets)for(var r=0,n=e.morphTargets.length;r<n;r++){t.morphTargets[r]={},t.morphTargets[r].name=e.morphTargets[r].name,t.morphTargets[r].vertices=[];for(var a=t.morphTargets[r].vertices,o=e.morphTargets[r].vertices,s=0,c=o.length;s<c;s+=3){var l=new u;l.x=o[s]*i,l.y=o[s+1]*i,l.z=o[s+2]*i,a.push(l)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');for(var h=t.faces,d=e.morphColors[0].colors,r=0,n=h.length;r<n;r++)h[r].color.fromArray(d,3*r)}}function r(e,t){var i=[],r=[];void 0!==e.animation&&r.push(e.animation),void 0!==e.animations&&(e.animations.length?r=r.concat(e.animations):r.push(e.animations));for(var n=0;n<r.length;n++){var a=fr.parseAnimation(r[n],t.bones);a&&i.push(a)}if(t.morphTargets){var o=fr.CreateClipsFromMorphTargetSequences(t.morphTargets,10);i=i.concat(o)}i.length>0&&(t.animations=i)}return function(n,a){void 0!==n.data&&(n=n.data),void 0!==n.scale?n.scale=1/n.scale:n.scale=1;var o=new ye;return e(n,o),t(n,o),i(n,o),r(n,o),o.computeFaceNormals(),o.computeBoundingSphere(),void 0===n.materials||0===n.materials.length?{geometry:o}:{geometry:o,materials:gr.prototype.initMaterials(n.materials,a,this.crossOrigin)}}}()}),Object.assign(xr.prototype,{load:function(e,t,i,r){\"\"===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf(\"/\")+1));var n=this;new Bi(n.manager).load(e,function(i){var a=null;try{a=JSON.parse(i)}catch(t){return void 0!==r&&r(t),void console.error(\"THREE:ObjectLoader: Can't parse \"+e+\".\",t.message)}var o=a.metadata;if(void 0===o||void 0===o.type||\"geometry\"===o.type.toLowerCase())return void console.error(\"THREE.ObjectLoader: Can't load \"+e+\". Use THREE.JSONLoader instead.\");n.parse(a,t)},i,r)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){var i=this.parseGeometries(e.geometries),r=this.parseImages(e.images,function(){void 0!==t&&t(o)}),n=this.parseTextures(e.textures,r),a=this.parseMaterials(e.materials,n),o=this.parseObject(e.object,i,a);return e.animations&&(o.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(o),o},parseGeometries:function(e){var t={};if(void 0!==e)for(var i=new yr,r=new vr,n=0,a=e.length;n<a;n++){var o,s=e[n];switch(s.type){case\"PlaneGeometry\":case\"PlaneBufferGeometry\":o=new us[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case\"BoxGeometry\":case\"BoxBufferGeometry\":case\"CubeGeometry\":o=new us[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case\"CircleGeometry\":case\"CircleBufferGeometry\":o=new us[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case\"CylinderGeometry\":case\"CylinderBufferGeometry\":o=new us[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case\"ConeGeometry\":case\"ConeBufferGeometry\":o=new us[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case\"SphereGeometry\":case\"SphereBufferGeometry\":o=new us[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case\"DodecahedronGeometry\":case\"IcosahedronGeometry\":case\"OctahedronGeometry\":case\"TetrahedronGeometry\":o=new us[s.type](s.radius,s.detail);break;case\"RingGeometry\":case\"RingBufferGeometry\":o=new us[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case\"TorusGeometry\":case\"TorusBufferGeometry\":o=new us[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case\"TorusKnotGeometry\":case\"TorusKnotBufferGeometry\":o=new us[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case\"LatheGeometry\":case\"LatheBufferGeometry\":o=new us[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case\"BufferGeometry\":o=r.parse(s);break;case\"Geometry\":o=i.parse(s,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type \"'+s.type+'\"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),t[s.uuid]=o}return t},parseMaterials:function(e,t){var i={};if(void 0!==e){var r=new mr;r.setTextures(t);for(var n=0,a=e.length;n<a;n++){var o=e[n];if(\"MultiMaterial\"===o.type){for(var s=[],c=0;c<o.materials.length;c++)s.push(r.parse(o.materials[c]));i[o.uuid]=s}else i[o.uuid]=r.parse(o)}}return i},parseAnimations:function(e){for(var t=[],i=0;i<e.length;i++){var r=fr.parse(e[i]);t.push(r)}return t},parseImages:function(e,t){var i=this,r={};if(void 0!==e&&e.length>0){var n=new zi(t),a=new Hi(n);a.setCrossOrigin(this.crossOrigin);for(var o=0,s=e.length;o<s;o++){var c=e[o],l=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(c.url)?c.url:i.texturePath+c.url;r[c.uuid]=function(e){return i.manager.itemStart(e),a.load(e,function(){i.manager.itemEnd(e)},void 0,function(){i.manager.itemEnd(e),i.manager.itemError(e)})}(l)}}return r},parseTextures:function(e,t){function i(e,t){return\"number\"==typeof e?e:(console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",e),t[e])}var r={};if(void 0!==e)for(var n=0,o=e.length;n<o;n++){var s=e[n];void 0===s.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',s.uuid),void 0===t[s.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",s.image);var c=new a(t[s.image]);c.needsUpdate=!0,c.uuid=s.uuid,void 0!==s.name&&(c.name=s.name),void 0!==s.mapping&&(c.mapping=i(s.mapping,gs)),void 0!==s.offset&&c.offset.fromArray(s.offset),void 0!==s.repeat&&c.repeat.fromArray(s.repeat),void 0!==s.wrap&&(c.wrapS=i(s.wrap[0],ys),c.wrapT=i(s.wrap[1],ys)),void 0!==s.minFilter&&(c.minFilter=i(s.minFilter,xs)),void 0!==s.magFilter&&(c.magFilter=i(s.magFilter,xs)),void 0!==s.anisotropy&&(c.anisotropy=s.anisotropy),void 0!==s.flipY&&(c.flipY=s.flipY),r[s.uuid]=c}return r},parseObject:function(){var e=new h;return function(t,i,r){function n(e){return void 0===i[e]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",e),i[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],i=0,n=e.length;i<n;i++){var a=e[i];void 0===r[a]&&console.warn(\"THREE.ObjectLoader: Undefined material\",a),t.push(r[a])}return t}return void 0===r[e]&&console.warn(\"THREE.ObjectLoader: Undefined material\",e),r[e]}}var o;switch(t.type){case\"Scene\":o=new At,void 0!==t.background&&Number.isInteger(t.background)&&(o.background=new Y(t.background)),void 0!==t.fog&&(\"Fog\"===t.fog.type?o.fog=new Tt(t.fog.color,t.fog.near,t.fog.far):\"FogExp2\"===t.fog.type&&(o.fog=new St(t.fog.color,t.fog.density)));break;case\"PerspectiveCamera\":o=new me(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(o.focus=t.focus),void 0!==t.zoom&&(o.zoom=t.zoom),void 0!==t.filmGauge&&(o.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(o.filmOffset=t.filmOffset),void 0!==t.view&&(o.view=Object.assign({},t.view));break;case\"OrthographicCamera\":o=new fe(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case\"AmbientLight\":o=new $i(t.color,t.intensity);break;case\"DirectionalLight\":o=new Qi(t.color,t.intensity);break;case\"PointLight\":o=new Ji(t.color,t.intensity,t.distance,t.decay);break;case\"RectAreaLight\":o=new er(t.color,t.intensity,t.width,t.height);break;case\"SpotLight\":o=new Zi(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case\"HemisphereLight\":o=new Xi(t.color,t.groundColor,t.intensity);break;case\"SkinnedMesh\":console.warn(\"THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.\");case\"Mesh\":var s=n(t.geometry),c=a(t.material);o=s.bones&&s.bones.length>0?new It(s,c):new Ge(s,c);break;case\"LOD\":o=new Pt;break;case\"Line\":o=new Ot(n(t.geometry),a(t.material),t.mode);break;case\"LineLoop\":o=new zt(n(t.geometry),a(t.material));break;case\"LineSegments\":o=new Ft(n(t.geometry),a(t.material));break;case\"PointCloud\":case\"Points\":o=new Gt(n(t.geometry),a(t.material));break;case\"Sprite\":o=new Rt(a(t.material));break;case\"Group\":o=new Vt;break;default:o=new de}if(o.uuid=t.uuid,void 0!==t.name&&(o.name=t.name),void 0!==t.matrix?(e.fromArray(t.matrix),e.decompose(o.position,o.quaternion,o.scale)):(void 0!==t.position&&o.position.fromArray(t.position),void 0!==t.rotation&&o.rotation.fromArray(t.rotation),void 0!==t.quaternion&&o.quaternion.fromArray(t.quaternion),void 0!==t.scale&&o.scale.fromArray(t.scale)),void 0!==t.castShadow&&(o.castShadow=t.castShadow),void 0!==t.receiveShadow&&(o.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(o.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(o.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&o.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(o.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(o.visible=t.visible),void 0!==t.userData&&(o.userData=t.userData),void 0!==t.children)for(var l=t.children,u=0;u<l.length;u++)o.add(this.parseObject(l[u],i,r));if(\"LOD\"===t.type)for(var h=t.levels,d=0;d<h.length;d++){var p=h[d],f=o.getObjectByProperty(\"uuid\",p.object);void 0!==f&&o.addLevel(f,p.distance)}return o}}()});var gs={UVMapping:300,CubeReflectionMapping:Ga,CubeRefractionMapping:Va,EquirectangularReflectionMapping:Ha,EquirectangularRefractionMapping:ja,SphericalReflectionMapping:ka,CubeUVReflectionMapping:Wa,CubeUVRefractionMapping:Xa},ys={RepeatWrapping:qa,ClampToEdgeWrapping:Ya,MirroredRepeatWrapping:Za},xs={NearestFilter:Ja,NearestMipMapNearestFilter:Ka,NearestMipMapLinearFilter:Qa,LinearFilter:$a,LinearMipMapNearestFilter:eo,LinearMipMapLinearFilter:to};Object.assign(Rr.prototype,{getPoint:function(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null},getPointAt:function(e){var t=this.getUtoTmapping(e);return this.getPoint(t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],i=0;i<=e;i++)t.push(this.getPoint(i/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,i,r=[],n=this.getPoint(0),a=0;for(r.push(0),i=1;i<=e;i++)t=this.getPoint(i/e),a+=t.distanceTo(n),r.push(a),n=t;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var i,r=this.getLengths(),n=0,a=r.length;i=t||e*r[a-1];for(var o,s=0,c=a-1;s<=c;)if(n=Math.floor(s+(c-s)/2),(o=r[n]-i)<0)s=n+1;else{if(!(o>0)){c=n;break}c=n-1}if(n=c,r[n]===i)return n/(a-1);var l=r[n];return(n+(i-l)/(r[n+1]-l))/(a-1)},getTangent:function(e){var t=e-1e-4,i=e+1e-4;t<0&&(t=0),i>1&&(i=1);var r=this.getPoint(t);return this.getPoint(i).clone().sub(r).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var i,r,n,a=new u,o=[],s=[],c=[],l=new u,d=new h;for(i=0;i<=e;i++)r=i/e,o[i]=this.getTangentAt(r),o[i].normalize();s[0]=new u,c[0]=new u;var p=Number.MAX_VALUE,f=Math.abs(o[0].x),m=Math.abs(o[0].y),v=Math.abs(o[0].z);for(f<=p&&(p=f,a.set(1,0,0)),m<=p&&(p=m,a.set(0,1,0)),v<=p&&a.set(0,0,1),l.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],l),c[0].crossVectors(o[0],s[0]),i=1;i<=e;i++)s[i]=s[i-1].clone(),c[i]=c[i-1].clone(),l.crossVectors(o[i-1],o[i]),l.length()>Number.EPSILON&&(l.normalize(),n=Math.acos(Wo.clamp(o[i-1].dot(o[i]),-1,1)),s[i].applyMatrix4(d.makeRotationAxis(l,n))),c[i].crossVectors(o[i],s[i]);if(!0===t)for(n=Math.acos(Wo.clamp(s[0].dot(s[e]),-1,1)),n/=e,o[0].dot(l.crossVectors(s[0],s[e]))>0&&(n=-n),i=1;i<=e;i++)s[i].applyMatrix4(d.makeRotationAxis(o[i],n*i)),c[i].crossVectors(o[i],s[i]);return{tangents:o,normals:s,binormals:c}}}),Pr.prototype=Object.create(Rr.prototype),Pr.prototype.constructor=Pr,Pr.prototype.isLineCurve=!0,Pr.prototype.getPoint=function(e){if(1===e)return this.v2.clone();var t=this.v2.clone().sub(this.v1);return t.multiplyScalar(e).add(this.v1),t},Pr.prototype.getPointAt=function(e){return this.getPoint(e)},Pr.prototype.getTangent=function(e){return this.v2.clone().sub(this.v1).normalize()},Dr.prototype=Object.assign(Object.create(Rr.prototype),{constructor:Dr,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Pr(t,e))},getPoint:function(e){for(var t=e*this.getLength(),i=this.getCurveLengths(),r=0;r<i.length;){if(i[r]>=t){var n=i[r]-t,a=this.curves[r],o=a.getLength(),s=0===o?0:1-n/o;return a.getPointAt(s)}r++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,i=0,r=this.curves.length;i<r;i++)t+=this.curves[i].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,i=[],r=0,n=this.curves;r<n.length;r++)for(var a=n[r],o=a&&a.isEllipseCurve?2*e:a&&a.isLineCurve?1:a&&a.isSplineCurve?e*a.points.length:e,s=a.getPoints(o),c=0;c<s.length;c++){var l=s[c];t&&t.equals(l)||(i.push(l),t=l)}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i},createPointsGeometry:function(e){var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){for(var t=new ye,i=0,r=e.length;i<r;i++){var n=e[i];t.vertices.push(new u(n.x,n.y,n.z||0))}return t}}),Ur.prototype=Object.create(Rr.prototype),Ur.prototype.constructor=Ur,Ur.prototype.isEllipseCurve=!0,Ur.prototype.getPoint=function(e){for(var t=2*Math.PI,i=this.aEndAngle-this.aStartAngle,r=Math.abs(i)<Number.EPSILON;i<0;)i+=t;for(;i>t;)i-=t;i<Number.EPSILON&&(i=r?0:t),!0!==this.aClockwise||r||(i===t?i=-t:i-=t);var a=this.aStartAngle+e*i,o=this.aX+this.xRadius*Math.cos(a),s=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var c=Math.cos(this.aRotation),l=Math.sin(this.aRotation),u=o-this.aX,h=s-this.aY;o=u*c-h*l+this.aX,s=u*l+h*c+this.aY}return new n(o,s)},Ir.prototype=Object.create(Rr.prototype),Ir.prototype.constructor=Ir,Ir.prototype.isSplineCurve=!0,Ir.prototype.getPoint=function(e){var t=this.points,i=(t.length-1)*e,r=Math.floor(i),a=i-r,o=t[0===r?r:r-1],s=t[r],c=t[r>t.length-2?t.length-1:r+1],l=t[r>t.length-3?t.length-1:r+2];return new n(_r(a,o.x,s.x,c.x,l.x),_r(a,o.y,s.y,c.y,l.y))},Nr.prototype=Object.create(Rr.prototype),Nr.prototype.constructor=Nr,Nr.prototype.getPoint=function(e){var t=this.v0,i=this.v1,r=this.v2,a=this.v3;return new n(Cr(e,t.x,i.x,r.x,a.x),Cr(e,t.y,i.y,r.y,a.y))},Or.prototype=Object.create(Rr.prototype),Or.prototype.constructor=Or,Or.prototype.getPoint=function(e){var t=this.v0,i=this.v1,r=this.v2;return new n(Er(e,t.x,i.x,r.x),Er(e,t.y,i.y,r.y))};var _s=Object.assign(Object.create(Dr.prototype),{fromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var i=new Pr(this.currentPoint.clone(),new n(e,t));this.curves.push(i),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,i,r){var a=new Or(this.currentPoint.clone(),new n(e,t),new n(i,r));this.curves.push(a),this.currentPoint.set(i,r)},bezierCurveTo:function(e,t,i,r,a,o){var s=new Nr(this.currentPoint.clone(),new n(e,t),new n(i,r),new n(a,o));this.curves.push(s),this.currentPoint.set(a,o)},splineThru:function(e){var t=[this.currentPoint.clone()].concat(e),i=new Ir(t);this.curves.push(i),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,i,r,n,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+o,t+s,i,r,n,a)},absarc:function(e,t,i,r,n,a){this.absellipse(e,t,i,i,r,n,a)},ellipse:function(e,t,i,r,n,a,o,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,i,r,n,a,o,s)},absellipse:function(e,t,i,r,n,a,o,s){var c=new Ur(e,t,i,r,n,a,o,s);if(this.curves.length>0){var l=c.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(c);var u=c.getPoint(1);this.currentPoint.copy(u)}});Fr.prototype=_s,_s.constructor=Fr,zr.prototype=Object.assign(Object.create(_s),{constructor:zr,getPointsHoles:function(e){for(var t=[],i=0,r=this.holes.length;i<r;i++)t[i]=this.holes[i].getPoints(e);return t},extractAllPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},extractPoints:function(e){return this.extractAllPoints(e)}}),Object.assign(Br.prototype,{moveTo:function(e,t){this.currentPath=new Fr,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,i,r){this.currentPath.quadraticCurveTo(e,t,i,r)},bezierCurveTo:function(e,t,i,r,n,a){this.currentPath.bezierCurveTo(e,t,i,r,n,a)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function i(e){for(var t=[],i=0,r=e.length;i<r;i++){var n=e[i],a=new zr;a.curves=n.curves,t.push(a)}return t}var r=ls.isClockWise,n=this.subPaths;if(0===n.length)return[];if(!0===t)return i(n);var a,o,s,c=[];if(1===n.length)return o=n[0],s=new zr,s.curves=o.curves,c.push(s),c;var l=!r(n[0].getPoints());l=e?!l:l;var u,h=[],d=[],p=[],f=0;d[f]=void 0,p[f]=[];for(var m=0,v=n.length;m<v;m++)o=n[m],u=o.getPoints(),a=r(u),a=e?!a:a,a?(!l&&d[f]&&f++,d[f]={s:new zr,p:u},d[f].s.curves=o.curves,l&&f++,p[f]=[]):p[f].push({h:o,p:u[0]});if(!d[0])return i(n);if(d.length>1){for(var g=!1,y=[],x=0,_=d.length;x<_;x++)h[x]=[];for(var x=0,_=d.length;x<_;x++)for(var b=p[x],w=0;w<b.length;w++){for(var M=b[w],E=!0,S=0;S<d.length;S++)(function(e,t){for(var i=t.length,r=!1,n=i-1,a=0;a<i;n=a++){var o=t[n],s=t[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(o=t[a],c=-c,s=t[n],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var u=l*(e.x-o.x)-c*(e.y-o.y);if(0===u)return!0;if(u<0)continue;r=!r}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return r})(M.p,d[S].p)&&(x!==S&&y.push({froms:x,tos:S,hole:w}),E?(E=!1,h[S].push(M)):g=!0);E&&h[x].push(M)}y.length>0&&(g||(p=h))}for(var T,m=0,A=d.length;m<A;m++){s=d[m].s,c.push(s),T=p[m];for(var L=0,C=T.length;L<C;L++)s.holes.push(T[L].h)}return c}}),Object.assign(Gr.prototype,{isFont:!0,generateShapes:function(e,t,i){function r(e,t,r,a){var o=n.glyphs[e]||n.glyphs[\"?\"];if(o){var s,c,l,u,h,d,p,f,m,v,g,y=new Br,x=[];if(o.o)for(var _=o._cachedOutline||(o._cachedOutline=o.o.split(\" \")),b=0,w=_.length;b<w;){var M=_[b++];switch(M){case\"m\":s=_[b++]*t+r,c=_[b++]*t+a,y.moveTo(s,c);break;case\"l\":s=_[b++]*t+r,c=_[b++]*t+a,y.lineTo(s,c);break;case\"q\":if(l=_[b++]*t+r,u=_[b++]*t+a,p=_[b++]*t+r,f=_[b++]*t+a,y.quadraticCurveTo(p,f,l,u),g=x[x.length-1]){h=g.x,d=g.y;for(var E=1;E<=i;E++){var S=E/i;Er(S,h,p,l),Er(S,d,f,u)}}break;case\"b\":if(l=_[b++]*t+r,u=_[b++]*t+a,p=_[b++]*t+r,f=_[b++]*t+a,m=_[b++]*t+r,v=_[b++]*t+a,y.bezierCurveTo(p,f,m,v,l,u),g=x[x.length-1]){h=g.x,d=g.y;for(var E=1;E<=i;E++){var S=E/i;Cr(S,h,p,m,l),Cr(S,d,f,v,u)}}}}return{offsetX:o.ha*t,path:y}}}void 0===t&&(t=100),void 0===i&&(i=4);for(var n=this.data,a=function(e){for(var i=String(e).split(\"\"),a=t/n.resolution,o=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*a,s=0,c=0,l=[],u=0;u<i.length;u++){var h=i[u];if(\"\\n\"===h)s=0,c-=o;else{var d=r(h,a,s,c);s+=d.offsetX,l.push(d.path)}}return l}(e),o=[],s=0,c=a.length;s<c;s++)Array.prototype.push.apply(o,a[s].toShapes());return o}}),Object.assign(Vr.prototype,{load:function(e,t,i,r){var n=this;new Bi(this.manager).load(e,function(e){var i;try{i=JSON.parse(e)}catch(t){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),i=JSON.parse(e.substring(65,e.length-2))}var r=n.parse(i);t&&t(r)},i,r)},parse:function(e){return new Gr(e)}});var bs,ws={getContext:function(){return void 0===bs&&(bs=new(window.AudioContext||window.webkitAudioContext)),bs},setContext:function(e){bs=e}};Object.assign(Hr.prototype,{load:function(e,t,i,r){var n=new Bi(this.manager);n.setResponseType(\"arraybuffer\"),n.load(e,function(e){ws.getContext().decodeAudioData(e,function(e){t(e)})},i,r)}}),Object.assign(jr.prototype,{update:function(){var e,t,i,r,n,a,o,s,c=new h,l=new h;return function(u){if(e!==this||t!==u.focus||i!==u.fov||r!==u.aspect*this.aspect||n!==u.near||a!==u.far||o!==u.zoom||s!==this.eyeSep){e=this,t=u.focus,i=u.fov,r=u.aspect*this.aspect,n=u.near,a=u.far,o=u.zoom;var h=u.projectionMatrix.clone();s=this.eyeSep/2;var d,p,f=s*n/t,m=n*Math.tan(Wo.DEG2RAD*i*.5)/o;l.elements[12]=-s,c.elements[12]=s,d=-m*r+f,p=m*r+f,h.elements[0]=2*n/(p-d),h.elements[8]=(p+d)/(p-d),this.cameraL.projectionMatrix.copy(h),d=-m*r-f,p=m*r-f,h.elements[0]=2*n/(p-d),h.elements[8]=(p+d)/(p-d),this.cameraR.projectionMatrix.copy(h)}this.cameraL.matrixWorld.copy(u.matrixWorld).multiply(l),this.cameraR.matrixWorld.copy(u.matrixWorld).multiply(c)}}()}),kr.prototype=Object.create(de.prototype),kr.prototype.constructor=kr,Wr.prototype=Object.assign(Object.create(de.prototype),{constructor:Wr,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.value=e},updateMatrixWorld:function(){var e=new u,t=new l,i=new u,r=new u;return function(n){de.prototype.updateMatrixWorld.call(this,n);var a=this.context.listener,o=this.up;this.matrixWorld.decompose(e,t,i),r.set(0,0,-1).applyQuaternion(t),a.positionX?(a.positionX.setValueAtTime(e.x,this.context.currentTime),a.positionY.setValueAtTime(e.y,this.context.currentTime),a.positionZ.setValueAtTime(e.z,this.context.currentTime),a.forwardX.setValueAtTime(r.x,this.context.currentTime),a.forwardY.setValueAtTime(r.y,this.context.currentTime),a.forwardZ.setValueAtTime(r.z,this.context.currentTime),a.upX.setValueAtTime(o.x,this.context.currentTime),a.upY.setValueAtTime(o.y,this.context.currentTime),a.upZ.setValueAtTime(o.z,this.context.currentTime)):(a.setPosition(e.x,e.y,e.z),a.setOrientation(r.x,r.y,r.z,o.x,o.y,o.z))}}()}),Xr.prototype=Object.assign(Object.create(de.prototype),{constructor:Xr,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=e,this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType=\"buffer\",this.autoplay&&this.play(),this},play:function(){if(!0===this.isPlaying)return void console.warn(\"THREE.Audio: Audio is already playing.\");if(!1===this.hasPlaybackControl)return void console.warn(\"THREE.Audio: this Audio has no playback control.\");var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),e.playbackRate.setValueAtTime(this.playbackRate,this.startTime),e.start(0,this.startTime),this.isPlaying=!0,this.source=e,this.connect()},pause:function(){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.source.stop(),this.startTime=this.context.currentTime,this.isPlaying=!1,this)},stop:function(){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.source.stop(),this.startTime=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop},setLoop:function(e){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this)},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.value=e,this}}),qr.prototype=Object.assign(Object.create(Xr.prototype),{constructor:qr,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new u;return function(t){de.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),Object.assign(Yr.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),i=0;i<t.length;i++)e+=t[i];return e/t.length}}),Object.assign(Zr.prototype,{accumulate:function(e,t){var i=this.buffer,r=this.valueSize,n=e*r+r,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==r;++o)i[n+o]=i[o];a=t}else{a+=t;var s=t/a;this._mixBufferRegion(i,n,0,s,r)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,i=this.buffer,r=e*t+t,n=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,n<1){var o=3*t;this._mixBufferRegion(i,r,o,1-n,t)}for(var s=t,c=t+t;s!==c;++s)if(i[s]!==i[s+t]){a.setValue(i,r);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,i=this.valueSize,r=3*i;e.getValue(t,r);for(var n=i,a=r;n!==a;++n)t[n]=t[r+n%i];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,i,r,n){if(r>=.5)for(var a=0;a!==n;++a)e[t+a]=e[i+a]},_slerp:function(e,t,i,r){l.slerpFlat(e,t,e,t,e,i,r)},_lerp:function(e,t,i,r,n){for(var a=1-r,o=0;o!==n;++o){var s=t+o;e[s]=e[s]*a+e[i+o]*r}}}),Object.assign(Jr.prototype,{getValue:function(e,t){this.bind();var i=this._targetGroup.nCachedObjects_,r=this._bindings[i];void 0!==r&&r.getValue(e,t)},setValue:function(e,t){for(var i=this._bindings,r=this._targetGroup.nCachedObjects_,n=i.length;r!==n;++r)i[r].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}}),Object.assign(Kr,{Composite:Jr,create:function(e,t,i){return e&&e.isAnimationObjectGroup?new Kr.Composite(e,t,i):new Kr(e,t,i)},sanitizeNodeName:function(e){return e.replace(/\\s/g,\"_\").replace(/[^\\w-]/g,\"\")},parseTrackName:function(){var e=/((?:[\\w-]+[\\/:])*)/,t=/([\\w-\\.]+)?/,i=/(?:\\.([\\w-]+)(?:\\[(.+)\\])?)?/,r=/\\.([\\w-]+)(?:\\[(.+)\\])?/,n=new RegExp(\"^\"+e.source+t.source+i.source+r.source+\"$\"),a=[\"material\",\"materials\",\"bones\"];return function(e){var t=n.exec(e);if(!t)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+e);var i={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},r=i.nodeName&&i.nodeName.lastIndexOf(\".\");if(void 0!==r&&-1!==r){var o=i.nodeName.substring(r+1);-1!==a.indexOf(o)&&(i.nodeName=i.nodeName.substring(0,r),i.objectName=o)}if(null===i.propertyName||0===i.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+e);return i}}(),findNode:function(e,t){if(!t||\"\"===t||\"root\"===t||\".\"===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var i=function(e){for(var i=0;i<e.bones.length;i++){var r=e.bones[i];if(r.name===t)return r}return null}(e.skeleton);if(i)return i}if(e.children){var r=function(e){for(var i=0;i<e.length;i++){var n=e[i];if(n.name===t||n.uuid===t)return n;var a=r(n.children);if(a)return a}return null},n=r(e.children);if(n)return n}return null}}),Object.assign(Kr.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var i=this.resolvedProperty,r=0,n=i.length;r!==n;++r)e[t++]=i[r]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.node[this.propertyName]=e[t]},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var i=this.resolvedProperty,r=0,n=i.length;r!==n;++r)i[r]=e[t++]},function(e,t){for(var i=this.resolvedProperty,r=0,n=i.length;r!==n;++r)i[r]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var i=this.resolvedProperty,r=0,n=i.length;r!==n;++r)i[r]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,i=t.objectName,r=t.propertyName,n=t.propertyIndex;if(e||(e=Kr.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\");if(i){var a=t.objectIndex;switch(i){case\"materials\":if(!e.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!e.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);e=e.material.materials;break;case\"bones\":if(!e.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[i])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);e=e[i]}if(void 0!==a){if(void 0===e[a])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,e);e=e[a]}}var s=e[r];if(void 0===s){var c=t.nodeName;return void console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+c+\".\"+r+\" but it wasn't found.\",e)}var l=this.Versioning.None;void 0!==e.needsUpdate?(l=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var u=this.BindingType.Direct;if(void 0!==n){if(\"morphTargetInfluences\"===r){if(!e.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);for(var o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(e.geometry.morphAttributes.position[o].name===n){n=o;break}}else{if(!e.geometry.morphTargets)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.\",this);for(var o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===n){n=o;break}}}u=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=n}else void 0!==s.fromArray&&void 0!==s.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(u=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][l]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(Kr.prototype,{_getValue_unbound:Kr.prototype.getValue,_setValue_unbound:Kr.prototype.setValue}),Object.assign(Qr.prototype,{isAnimationObjectGroup:!0,add:function(e){for(var t=this._objects,i=t.length,r=this.nCachedObjects_,n=this._indicesByUUID,a=this._paths,o=this._parsedPaths,s=this._bindings,c=s.length,l=0,u=arguments.length;l!==u;++l){var h=arguments[l],d=h.uuid,p=n[d],f=void 0;if(void 0===p){p=i++,n[d]=p,t.push(h);for(var m=0,v=c;m!==v;++m)s[m].push(new Kr(h,a[m],o[m]))}else if(p<r){f=t[p];var g=--r,y=t[g];n[y.uuid]=p,t[p]=y,n[d]=g,t[g]=h;for(var m=0,v=c;m!==v;++m){var x=s[m],_=x[g],b=x[p];x[p]=_,void 0===b&&(b=new Kr(h,a[m],o[m])),x[g]=b}}else t[p]!==f&&console.error(\"THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.\")}this.nCachedObjects_=r},remove:function(e){for(var t=this._objects,i=this.nCachedObjects_,r=this._indicesByUUID,n=this._bindings,a=n.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],l=c.uuid,u=r[l];if(void 0!==u&&u>=i){var h=i++,d=t[h];r[d.uuid]=u,t[u]=d,r[l]=h,t[h]=c;for(var p=0,f=a;p!==f;++p){var m=n[p],v=m[h],g=m[u];m[u]=v,m[h]=g}}}this.nCachedObjects_=i},uncache:function(e){for(var t=this._objects,i=t.length,r=this.nCachedObjects_,n=this._indicesByUUID,a=this._bindings,o=a.length,s=0,c=arguments.length;s!==c;++s){var l=arguments[s],u=l.uuid,h=n[u];if(void 0!==h)if(delete n[u],h<r){var d=--r,p=t[d],f=--i,m=t[f];n[p.uuid]=h,t[h]=p,n[m.uuid]=d,t[d]=m,t.pop();for(var v=0,g=o;v!==g;++v){var y=a[v],x=y[d],_=y[f];y[h]=x,y[d]=_,y.pop()}}else{var f=--i,m=t[f];n[m.uuid]=h,t[h]=m,t.pop();for(var v=0,g=o;v!==g;++v){var y=a[v];y[h]=y[f],y.pop()}}}this.nCachedObjects_=r},subscribe_:function(e,t){var i=this._bindingsIndicesByPath,r=i[e],n=this._bindings;if(void 0!==r)return n[r];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,u=new Array(c);r=n.length,i[e]=r,a.push(e),o.push(t),n.push(u);for(var h=l,d=s.length;h!==d;++h){var p=s[h];u[h]=new Kr(p,e,t)}return u},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,i=t[e];if(void 0!==i){var r=this._paths,n=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];t[e[o]]=i,a[i]=s,a.pop(),n[i]=n[o],n.pop(),r[i]=r[o],r.pop()}}}),Object.assign($r.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,i){if(e.fadeOut(t),this.fadeIn(t),i){var r=this._clip.duration,n=e._clip.duration,a=n/r,o=r/n;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,i){return e.crossFadeFrom(this,t,i)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,i){var r=this._mixer,n=r.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=n,s[1]=n+i,c[0]=e/o,c[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,i,r){if(!this.enabled)return void this._updateWeight(e);var n=this._startTime;if(null!==n){var a=(e-n)*i;if(a<0||0===i)return;this._startTime=null,t=i*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,u=0,h=c.length;u!==h;++u)c[u].evaluate(o),l[u].accumulate(r,s)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var i=this._weightInterpolant;if(null!==i){var r=i.evaluate(e)[0];t*=r,e>i.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var i=this._timeScaleInterpolant;if(null!==i){t*=i.evaluate(e)[0],e>i.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e;if(0===e)return t;var i=this._clip.duration,r=this.loop,n=this._loopCount;if(2200===r){-1===n&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=i)t=i;else{if(!(t<0))break e;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:e<0?-1:1})}}else{var a=2202===r;if(-1===n&&(e>=0?(n=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=i||t<0){var o=Math.floor(t/i);t-=i*o,n+=Math.abs(o);var s=this.repetitions-n;if(s<0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?i:0,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:e>0?1:-1});else{if(0===s){var c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=n,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:o})}}if(a&&1==(1&n))return this.time=t,i-t}return this.time=t,t},_setEndings:function(e,t,i){var r=this._interpolantSettings;i?(r.endingStart=2401,r.endingEnd=2401):(r.endingStart=e?this.zeroSlopeAtStart?2401:Do:2402,r.endingEnd=t?this.zeroSlopeAtEnd?2401:Do:2402)},_scheduleFading:function(e,t,i){var r=this._mixer,n=r.time,a=this._weightInterpolant;null===a&&(a=r._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=n,s[0]=t,o[1]=n+e,s[1]=i,this}}),Object.assign(en.prototype,r.prototype,{_bindAction:function(e,t){var i=e._localRoot||this._root,r=e._clip.tracks,n=r.length,a=e._propertyBindings,o=e._interpolants,s=i.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var u=0;u!==n;++u){var h=r[u],d=h.name,p=l[d];if(void 0!==p)a[u]=p;else{if(void 0!==(p=a[u])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[u].binding.parsedPath;p=new Zr(Kr.create(i,d,f),h.ValueTypeName,h.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,s,d),a[u]=p}o[u].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,i=e._clip.uuid,r=this._actionsByClip[i];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,i,t)}for(var n=e._propertyBindings,a=0,o=n.length;a!==o;++a){var s=n[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,i=0,r=t.length;i!==r;++i){var n=t[i];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,i){var r=this._actions,n=this._actionsByClip,a=n[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,n[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=r.length,r.push(e),a.actionByRoot[i]=e},_removeInactiveAction:function(e){var t=this._actions,i=t[t.length-1],r=e._cacheIndex;i._cacheIndex=r,t[r]=i,t.pop(),e._cacheIndex=null;var n=e._clip.uuid,a=this._actionsByClip,o=a[n],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null,delete o.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete a[n],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,i=0,r=t.length;i!==r;++i){var n=t[i];0==--n.referenceCount&&this._removeInactiveBinding(n)}},_lendAction:function(e){var t=this._actions,i=e._cacheIndex,r=this._nActiveActions++,n=t[r];e._cacheIndex=r,t[r]=e,n._cacheIndex=i,t[i]=n},_takeBackAction:function(e){var t=this._actions,i=e._cacheIndex,r=--this._nActiveActions,n=t[r];e._cacheIndex=r,t[r]=e,n._cacheIndex=i,t[i]=n},_addInactiveBinding:function(e,t,i){var r=this._bindingsByRootAndName,n=r[t],a=this._bindings;void 0===n&&(n={},r[t]=n),n[i]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,i=e.binding,r=i.rootNode.uuid,n=i.path,a=this._bindingsByRootAndName,o=a[r],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete o[n];e:{for(var l in o)break e;delete a[r]}},_lendBinding:function(e){var t=this._bindings,i=e._cacheIndex,r=this._nActiveBindings++,n=t[r];e._cacheIndex=r,t[r]=e,n._cacheIndex=i,t[i]=n},_takeBackBinding:function(e){var t=this._bindings,i=e._cacheIndex,r=--this._nActiveBindings,n=t[r];e._cacheIndex=r,t[r]=e,n._cacheIndex=i,t[i]=n},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,i=e[t];return void 0===i&&(i=new rr(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),i.__cacheIndex=t,e[t]=i),i},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,i=e.__cacheIndex,r=--this._nActiveControlInterpolants,n=t[r];e.__cacheIndex=r,t[r]=e,n.__cacheIndex=i,t[i]=n},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var i=t||this._root,r=i.uuid,n=\"string\"==typeof e?fr.findByName(i,e):e,a=null!==n?n.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[r];if(void 0!==c)return c;s=o.knownActions[0],null===n&&(n=s._clip)}if(null===n)return null;var l=new $r(this,n,t);return this._bindAction(l,s),this._addInactiveAction(l,a,r),l},existingAction:function(e,t){var i=t||this._root,r=i.uuid,n=\"string\"==typeof e?fr.findByName(i,e):e,a=n?n.uuid:e,o=this._actionsByClip[a];return void 0!==o?o.actionByRoot[r]||null:null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,i=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var n=0;n!==t;++n)e[n].reset();for(var n=0;n!==r;++n)i[n].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,i=this._nActiveActions,r=this.time+=e,n=Math.sign(e),a=this._accuIndex^=1,o=0;o!==i;++o){t[o]._update(r,e,n,a)}for(var s=this._bindings,c=this._nActiveBindings,o=0;o!==c;++o)s[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,i=e.uuid,r=this._actionsByClip,n=r[i];if(void 0!==n){for(var a=n.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=l,t[l]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete r[i]}},uncacheRoot:function(e){var t=e.uuid,i=this._actionsByClip;for(var r in i){var n=i[r].actionByRoot,a=n[t];void 0!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}var o=this._bindingsByRootAndName,s=o[t];if(void 0!==s)for(var c in s){var l=s[c];l.restoreOriginalState(),this._removeInactiveBinding(l)}},uncacheAction:function(e,t){var i=this.existingAction(e,t);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}),tn.prototype.clone=function(){return new tn(void 0===this.value.clone?this.value:this.value.clone())},rn.prototype=Object.assign(Object.create(Pe.prototype),{constructor:rn,isInstancedBufferGeometry:!0,addGroup:function(e,t,i){this.groups.push({start:e,count:t,materialIndex:i})},copy:function(e){var t=e.index;null!==t&&this.setIndex(t.clone());var i=e.attributes;for(var r in i){var n=i[r];this.addAttribute(r,n.clone())}for(var a=e.groups,o=0,s=a.length;o<s;o++){var c=a[o];this.addGroup(c.start,c.count,c.materialIndex)}return this}}),Object.defineProperties(nn.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(nn.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=i,this},setXYZ:function(e,t,i,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=r,this},setXYZW:function(e,t,i,r,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=r,this.data.array[e+3]=n,this}}),Object.defineProperty(an.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(an.prototype,{isInterleavedBuffer:!0,setArray:function(e){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.count=void 0!==e?e.length/this.stride:0,this.array=e},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,i){e*=this.stride,i*=t.stride;for(var r=0,n=this.stride;r<n;r++)this.array[e+r]=t.array[i+r];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),on.prototype=Object.assign(Object.create(an.prototype),{constructor:on,isInstancedInterleavedBuffer:!0,copy:function(e){return an.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),sn.prototype=Object.assign(Object.create(xe.prototype),{constructor:sn,isInstancedBufferAttribute:!0,copy:function(e){return xe.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(cn.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize()):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld)):console.error(\"THREE.Raycaster: Unsupported camera type.\")},intersectObject:function(e,t){var i=[];return un(e,this,i,t),i.sort(ln),i},intersectObjects:function(e,t){var i=[];if(!1===Array.isArray(e))return console.warn(\"THREE.Raycaster.intersectObjects: objects is not an Array.\"),i;for(var r=0,n=e.length;r<n;r++)un(e[r],this,i,t);return i.sort(ln),i}}),Object.assign(hn.prototype,{start:function(){this.startTime=(\"undefined\"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=(\"undefined\"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}),Object.assign(dn.prototype,{set:function(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(Wo.clamp(e.y/this.radius,-1,1))),this}}),Object.assign(pn.prototype,{set:function(e,t,i){return this.radius=e,this.theta=t,this.y=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.radius=Math.sqrt(e.x*e.x+e.z*e.z),this.theta=Math.atan2(e.x,e.z),this.y=e.y,this}}),fn.prototype=Object.create(de.prototype),fn.prototype.constructor=fn,fn.prototype.isImmediateRenderObject=!0,mn.prototype=Object.create(Ft.prototype),mn.prototype.constructor=mn,mn.prototype.update=function(){var e=new u,t=new u,i=new ae;return function(){var r=[\"a\",\"b\",\"c\"];this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var n=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o&&o.isGeometry)for(var s=o.vertices,c=o.faces,l=0,u=0,h=c.length;u<h;u++)for(var d=c[u],p=0,f=d.vertexNormals.length;p<f;p++){var m=s[d[r[p]]],v=d.vertexNormals[p];e.copy(m).applyMatrix4(n),t.copy(v).applyMatrix3(i).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1}else if(o&&o.isBufferGeometry)for(var g=o.attributes.position,y=o.attributes.normal,l=0,p=0,f=g.count;p<f;p++)e.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(n),t.set(y.getX(p),y.getY(p),y.getZ(p)),t.applyMatrix3(i).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1;a.needsUpdate=!0}}(),vn.prototype=Object.create(de.prototype),vn.prototype.constructor=vn,vn.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},vn.prototype.update=function(){var e=new u,t=new u;return function(){this.light.updateMatrixWorld();var i=this.light.distance?this.light.distance:1e3,r=i*Math.tan(this.light.angle);this.cone.scale.set(r,r,i),e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t.sub(e)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),yn.prototype=Object.create(Ft.prototype),yn.prototype.constructor=yn,yn.prototype.onBeforeRender=function(){var e=new u,t=new h,i=new h;return function(){var r=this.bones,n=this.geometry,a=n.getAttribute(\"position\");i.getInverse(this.root.matrixWorld);for(var o=0,s=0;o<r.length;o++){var c=r[o];c.parent&&c.parent.isBone&&(t.multiplyMatrices(i,c.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(s,e.x,e.y,e.z),t.multiplyMatrices(i,c.parent.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(s+1,e.x,e.y,e.z),s+=2)}n.getAttribute(\"position\").needsUpdate=!0}}(),xn.prototype=Object.create(Ge.prototype),xn.prototype.constructor=xn,xn.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},xn.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},_n.prototype=Object.create(de.prototype),_n.prototype.constructor=_n,_n.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},_n.prototype.update=function(){var e=.5*this.light.width,t=.5*this.light.height,i=this.line.geometry.attributes.position,r=i.array;r[0]=e,r[1]=-t,r[2]=0,r[3]=e,r[4]=t,r[5]=0,r[6]=-e,r[7]=t,r[8]=0,r[9]=-e,r[10]=-t,r[11]=0,r[12]=e,r[13]=-t,r[14]=0,i.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},bn.prototype=Object.create(de.prototype),bn.prototype.constructor=bn,bn.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},bn.prototype.update=function(){var e=new u,t=new Y,i=new Y;return function(){var r=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var n=r.geometry.getAttribute(\"color\");t.copy(this.light.color),i.copy(this.light.groundColor);for(var a=0,o=n.count;a<o;a++){var s=a<o/2?t:i;n.setXYZ(a,s.r,s.g,s.b)}n.needsUpdate=!0}r.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),wn.prototype=Object.create(Ft.prototype),wn.prototype.constructor=wn,Mn.prototype=Object.create(Ft.prototype),Mn.prototype.constructor=Mn,En.prototype=Object.create(Ft.prototype),En.prototype.constructor=En,En.prototype.update=function(){var e=new u,t=new u,i=new ae;return function(){this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);for(var r=this.object.matrixWorld,n=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,c=0,l=0,u=s.length;l<u;l++){var h=s[l],d=h.normal;e.copy(o[h.a]).add(o[h.b]).add(o[h.c]).divideScalar(3).applyMatrix4(r),t.copy(d).applyMatrix3(i).normalize().multiplyScalar(this.size).add(e),n.setXYZ(c,e.x,e.y,e.z),c+=1,n.setXYZ(c,t.x,t.y,t.z),c+=1}n.needsUpdate=!0}}(),Sn.prototype=Object.create(de.prototype),Sn.prototype.constructor=Sn,Sn.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Sn.prototype.update=function(){var e=new u,t=new u,i=new u;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),i.subVectors(t,e),this.lightPlane.lookAt(i),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(i),this.targetLine.scale.z=i.length()}}(),Tn.prototype=Object.create(Ft.prototype),Tn.prototype.constructor=Tn,Tn.prototype.update=function(){function e(e,a,o,s){r.set(a,o,s).unproject(n);var c=i[e];if(void 0!==c)for(var l=t.getAttribute(\"position\"),u=0,h=c.length;u<h;u++)l.setXYZ(c[u],r.x,r.y,r.z)}var t,i,r=new u,n=new pe;return function(){t=this.geometry,i=this.pointMap;n.projectionMatrix.copy(this.camera.projectionMatrix),e(\"c\",0,0,-1),e(\"t\",0,0,1),e(\"n1\",-1,-1,-1),e(\"n2\",1,-1,-1),e(\"n3\",-1,1,-1),e(\"n4\",1,1,-1),e(\"f1\",-1,-1,1),e(\"f2\",1,-1,1),e(\"f3\",-1,1,1),e(\"f4\",1,1,1),e(\"u1\",.7,1.1,-1),e(\"u2\",-.7,1.1,-1),e(\"u3\",0,2,-1),e(\"cf1\",-1,0,1),e(\"cf2\",1,0,1),e(\"cf3\",0,-1,1),e(\"cf4\",0,1,1),e(\"cn1\",-1,0,-1),e(\"cn2\",1,0,-1),e(\"cn3\",0,-1,-1),e(\"cn4\",0,1,-1),t.getAttribute(\"position\").needsUpdate=!0}}(),An.prototype=Object.create(Ft.prototype),An.prototype.constructor=An,An.prototype.update=function(){var e=new re;return function(t){if(void 0!==t&&console.warn(\"THREE.BoxHelper: .update() has no longer arguments.\"),void 0!==this.object&&e.setFromObject(this.object),!e.isEmpty()){var i=e.min,r=e.max,n=this.geometry.attributes.position,a=n.array;a[0]=r.x,a[1]=r.y,a[2]=r.z,a[3]=i.x,a[4]=r.y,a[5]=r.z,a[6]=i.x,a[7]=i.y,a[8]=r.z,a[9]=r.x,a[10]=i.y,a[11]=r.z,a[12]=r.x,a[13]=r.y,a[14]=i.z,a[15]=i.x,a[16]=r.y,a[17]=i.z,a[18]=i.x,a[19]=i.y,a[20]=i.z,a[21]=r.x,a[22]=i.y,a[23]=i.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),An.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Ln.prototype=Object.create(Ft.prototype),Ln.prototype.constructor=Ln,Ln.prototype.onBeforeRender=function(){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5))},Cn.prototype=Object.create(Ot.prototype),Cn.prototype.constructor=Cn,Cn.prototype.onBeforeRender=function(){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.lookAt(this.plane.normal),this.updateMatrixWorld()};var Ms,Es;Rn.prototype=Object.create(de.prototype),Rn.prototype.constructor=Rn,Rn.prototype.setDirection=function(){var e,t=new u;return function(i){i.y>.99999?this.quaternion.set(0,0,0,1):i.y<-.99999?this.quaternion.set(1,0,0,0):(t.set(i.z,0,-i.x).normalize(),e=Math.acos(i.y),this.quaternion.setFromAxisAngle(t,e))}}(),Rn.prototype.setLength=function(e,t,i){void 0===t&&(t=.2*e),void 0===i&&(i=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(i,t,i),this.cone.position.y=e,this.cone.updateMatrix()},Rn.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},Pn.prototype=Object.create(Ft.prototype),Pn.prototype.constructor=Pn;var Ss=new u,Ts=new Dn,As=new Dn,Ls=new Dn;Un.prototype=Object.create(Rr.prototype),Un.prototype.constructor=Un,Un.prototype.getPoint=function(e){var t=this.points,i=t.length,r=(i-(this.closed?0:1))*e,n=Math.floor(r),a=r-n;this.closed?n+=n>0?0:(Math.floor(Math.abs(n)/t.length)+1)*t.length:0===a&&n===i-1&&(n=i-2,a=1);var o,s,c,l;if(this.closed||n>0?o=t[(n-1)%i]:(Ss.subVectors(t[0],t[1]).add(t[0]),o=Ss),s=t[n%i],c=t[(n+1)%i],this.closed||n+2<i?l=t[(n+2)%i]:(Ss.subVectors(t[i-1],t[i-2]).add(t[i-1]),l=Ss),void 0===this.type||\"centripetal\"===this.type||\"chordal\"===this.type){var h=\"chordal\"===this.type?.5:.25,d=Math.pow(o.distanceToSquared(s),h),p=Math.pow(s.distanceToSquared(c),h),f=Math.pow(c.distanceToSquared(l),h);p<1e-4&&(p=1),d<1e-4&&(d=p),f<1e-4&&(f=p),Ts.initNonuniformCatmullRom(o.x,s.x,c.x,l.x,d,p,f),As.initNonuniformCatmullRom(o.y,s.y,c.y,l.y,d,p,f),Ls.initNonuniformCatmullRom(o.z,s.z,c.z,l.z,d,p,f)}else if(\"catmullrom\"===this.type){var m=void 0!==this.tension?this.tension:.5;Ts.initCatmullRom(o.x,s.x,c.x,l.x,m),As.initCatmullRom(o.y,s.y,c.y,l.y,m),Ls.initCatmullRom(o.z,s.z,c.z,l.z,m)}return new u(Ts.calc(a),As.calc(a),Ls.calc(a))},In.prototype=Object.create(Rr.prototype),In.prototype.constructor=In,In.prototype.getPoint=function(e){var t=this.v0,i=this.v1,r=this.v2,n=this.v3;return new u(Cr(e,t.x,i.x,r.x,n.x),Cr(e,t.y,i.y,r.y,n.y),Cr(e,t.z,i.z,r.z,n.z))},Nn.prototype=Object.create(Rr.prototype),Nn.prototype.constructor=Nn,Nn.prototype.getPoint=function(e){var t=this.v0,i=this.v1,r=this.v2;return new u(Er(e,t.x,i.x,r.x),Er(e,t.y,i.y,r.y),Er(e,t.z,i.z,r.z))},On.prototype=Object.create(Rr.prototype),On.prototype.constructor=On,On.prototype.getPoint=function(e){if(1===e)return this.v2.clone();var t=new u;return t.subVectors(this.v2,this.v1),t.multiplyScalar(e),t.add(this.v1),t},Fn.prototype=Object.create(Ur.prototype),Fn.prototype.constructor=Fn;Rr.create=function(e,t){return console.log(\"THREE.Curve.create() has been deprecated\"),e.prototype=Object.create(Rr.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},zn.prototype=Object.create(Un.prototype),Bn.prototype=Object.create(Un.prototype),Gn.prototype=Object.create(Un.prototype),Object.assign(Gn.prototype,{initFromArray:function(e){console.error(\"THREE.Spline: .initFromArray() has been removed.\")},getControlPointsArray:function(e){console.error(\"THREE.Spline: .getControlPointsArray() has been removed.\")},reparametrizeByArcLength:function(e){console.error(\"THREE.Spline: .reparametrizeByArcLength() has been removed.\")}}),wn.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},yn.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},Object.assign(Z.prototype,{center:function(e){return console.warn(\"THREE.Box2: .center() has been renamed to .getCenter().\"),this.getCenter(e)},empty:function(){return console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(e){return console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},size:function(e){return console.warn(\"THREE.Box2: .size() has been renamed to .getSize().\"),this.getSize(e)}}),Object.assign(re.prototype,{center:function(e){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(e)},empty:function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(e){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(e)},size:function(e){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(e)}}),ze.prototype.center=function(e){return console.warn(\"THREE.Line3: .center() has been renamed to .getCenter().\"),this.getCenter(e)},Wo.random16=function(){return console.warn(\"THREE.Math.random16() has been deprecated. Use Math.random() instead.\"),Math.random()},Object.assign(ae.prototype,{flattenToArrayOffset:function(e,t){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(e,t)},multiplyVector3:function(e){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),e.applyMatrix3(this)},multiplyVector3Array:function(e){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},applyToBuffer:function(e,t,i){return console.warn(\"THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(e)},applyToVector3Array:function(e,t,i){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")}}),Object.assign(h.prototype,{extractPosition:function(e){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new u),console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),e.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(e){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},multiplyVector3:function(e){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},multiplyVector3Array:function(e){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},rotateAxis:function(e){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),e.transformDirection(this)},crossVector:function(e){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},translate:function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},rotateX:function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},rotateY:function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},rotateZ:function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},rotateByAxis:function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},applyToBuffer:function(e,t,i){return console.warn(\"THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(e)},applyToVector3Array:function(e,t,i){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},makeFrustum:function(e,t,i,r,n,a){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(e,t,r,i,n,a)}}),oe.prototype.isIntersectionLine=function(e){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(e)},l.prototype.multiplyVector3=function(e){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),e.applyQuaternion(this)},Object.assign(Fe.prototype,{isIntersectionBox:function(e){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(e)}}),Object.assign(zr.prototype,{extrude:function(e){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new ui(this,e)},makeGeometry:function(e){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new _i(this,e)}}),Object.assign(n.prototype,{fromAttribute:function(e,t,i){return console.error(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,i)}}),Object.assign(u.prototype,{setEulerFromRotationMatrix:function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},setEulerFromQuaternion:function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},getPositionFromMatrix:function(e){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(e)},fromAttribute:function(e,t,i){return console.error(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,i)}}),Object.assign(o.prototype,{fromAttribute:function(e,t,i){return console.error(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,i)}}),ye.prototype.computeTangents=function(){console.warn(\"THREE.Geometry: .computeTangents() has been removed.\")},Object.assign(de.prototype,{getChildByName:function(e){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(e)},renderDepth:function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},translate:function(e,t){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(t,e)}}),Object.defineProperties(de.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(e){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=e}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),Object.defineProperties(Pt.prototype,{objects:{get:function(){return console.warn(\"THREE.LOD: .objects has been renamed to .levels.\"),this.levels}}}),Object.defineProperty(Dt.prototype,\"useVertexTexture\",{get:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")},set:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")}}),Object.defineProperty(Rr.prototype,\"__arcLengthDivisions\",{get:function(){return console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions},set:function(e){console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions=e}}),me.prototype.setLens=function(e,t){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(Wi.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(e){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(e){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(e){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=e}}}),Object.defineProperties(xe.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}}}),Object.assign(Pe.prototype,{addIndex:function(e){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(e)},addDrawCall:function(e,t,i){void 0!==i&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(e,t)},clearDrawCalls:function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},computeTangents:function(){console.warn(\"THREE.BufferGeometry: .computeTangents() has been removed.\")},computeOffsets:function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")}}),Object.defineProperties(Pe.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),Object.defineProperties(tn.prototype,{dynamic:{set:function(){console.warn(\"THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.\")}},onUpdate:{value:function(){return console.warn(\"THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.\"),this}}}),Object.defineProperties($.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new Y}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(e){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===e}}}),Object.defineProperties(Ui.prototype,{metal:{get:function(){return console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\"),!1},set:function(){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\")}}}),Object.defineProperties(ee.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(e){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=e}}}),Object.assign(Et.prototype,{getCurrentRenderTarget:function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},supportsFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},supportsHalfFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},supportsStandardDerivatives:function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},supportsCompressedTextureS3TC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},supportsCompressedTexturePVRTC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},supportsBlendMinMax:function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},supportsVertexTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},enableScissorTest:function(e){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(e)},initMaterial:function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},addPrePlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},addPostPlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},updateShadowMap:function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")}}),Object.defineProperties(Et.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(e){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.\"),this.shadowMap.cullFace=e}}}),Object.defineProperties(ce.prototype,{cullFace:{get:function(){return this.renderReverseSided?Xn:Wn},set:function(e){var t=e!==Wn;console.warn(\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \"+t+\".\"),this.renderReverseSided=t}}}),Object.defineProperties(s.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=e}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=e}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=e}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=e}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=e}}}),Xr.prototype.load=function(e){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");var t=this;return(new Hr).load(e,function(e){t.setBuffer(e)}),this},Yr.prototype.getData=function(){return console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\"),this.getFrequencyData()},kr.prototype.updateCubeMap=function(e,t){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(e,t)}},function(e,t,i){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=i(2);i.d(t,\"AdaptiveToneMappingPass\",function(){return r.a});var n=i(3);i.d(t,\"BasicShader\",function(){return n.a});var a=i(4);i.d(t,\"BleachBypassShader\",function(){return a.a});var o=i(5);i.d(t,\"BlendShader\",function(){return o.a});var s=i(6);i.d(t,\"BloomPass\",function(){return s.a});var c=i(7);i.d(t,\"BokehPass\",function(){return c.a});var l=i(8);i.d(t,\"BokehShader\",function(){return l.a});var u=i(9);i.d(t,\"BokehShader2\",function(){return u.a});var h=i(10);i.d(t,\"BrightnessContrastShader\",function(){return h.a});var d=i(11);i.d(t,\"ColorCorrectionShader\",function(){return d.a});var p=i(12);i.d(t,\"ColorifyShader\",function(){return p.a});var f=i(13);i.d(t,\"ConvolutionShader\",function(){return f.a});var m=i(14);i.d(t,\"CopyShader\",function(){return m.a});var v=i(15);i.d(t,\"DDSLoader\",function(){return v.a});var g=i(16);i.d(t,\"DOFMipMapShader\",function(){return g.a});var y=i(17);i.d(t,\"DigitalGlitch\",function(){return y.a});var x=i(18);i.d(t,\"DotScreenPass\",function(){return x.a});var _=i(19);i.d(t,\"DotScreenShader\",function(){return _.a});var b=i(20);i.d(t,\"EdgeShader\",function(){return b.a});var w=i(21);i.d(t,\"EdgeShader2\",function(){return w.a});var M=i(22);i.d(t,\"EffectComposer\",function(){return M.a});var E=i(23);i.d(t,\"FXAAShader\",function(){return E.a});var S=i(24);i.d(t,\"FilmPass\",function(){return S.a});var T=i(25);i.d(t,\"FilmShader\",function(){return T.a});var A=i(26);i.d(t,\"FocusShader\",function(){return A.a});var L=i(27);i.d(t,\"FresnelShader\",function(){return L.a});var C=i(28);i.d(t,\"GammaCorrectionShader\",function(){return C.a});var R=i(29);i.d(t,\"GlitchPass\",function(){return R.a});var P=i(30);i.d(t,\"HorizontalBlurShader\",function(){return P.a});var D=i(31);i.d(t,\"HorizontalTiltShiftShader\",function(){return D.a});var U=i(32);i.d(t,\"HueSaturationShader\",function(){return U.a});var I=i(33);i.d(t,\"KaleidoShader\",function(){return I.a});var N=i(34);i.d(t,\"LuminosityShader\",function(){return N.a});var O=i(35);i.d(t,\"MTLLoader\",function(){return O.a});var F=i(36);i.d(t,\"MarchingCubes\",function(){return F.a});var z=i(37);i.d(t,\"MaskPass\",function(){return z.a});var B=i(38);i.d(t,\"MirrorShader\",function(){return B.a});var G=i(39);i.d(t,\"NormalMapShader\",function(){return G.a});var V=i(40);i.d(t,\"OBJLoader\",function(){return V.a});var H=i(41);i.d(t,\"OceanShaders\",function(){return H.a});var j=i(42);i.d(t,\"OrbitControls\",function(){return j.a});var k=i(43);i.d(t,\"ParallaxShader\",function(){return k.a});var W=i(44);i.d(t,\"RGBShiftShader\",function(){return W.a});var X=i(45);i.d(t,\"RenderPass\",function(){return X.a});var q=i(46);i.d(t,\"SSAOShader\",function(){return q.a});var Y=i(47);i.d(t,\"SVGLoader\",function(){return Y.a});var Z=i(48);i.d(t,\"SavePass\",function(){return Z.a});var J=i(49);i.d(t,\"SepiaShader\",function(){return J.a});var K=i(50);i.d(t,\"ShaderPass\",function(){return K.a});var Q=i(51);i.d(t,\"ShaderToon\",function(){return Q.a});var $=i(52);i.d(t,\"TechnicolorShader\",function(){return $.a});var ee=i(53);i.d(t,\"TexturePass\",function(){return ee.a});var te=i(54);i.d(t,\"ToneMapShader\",function(){return te.a});var ie=i(55);i.d(t,\"TriangleBlurShader\",function(){return ie.a});var re=i(56);i.d(t,\"UnpackDepthRGBAShader\",function(){return re.a});var ne=i(57);i.d(t,\"VerticalBlurShader\",function(){return ne.a});var ae=i(58);i.d(t,\"VerticalTiltShiftShader\",function(){return ae.a});var oe=i(59);i.d(t,\"VignetteShader\",function(){return oe.a});var se=i(60);i.d(t,\"SobelOperatorShader\",function(){return se.a})},function(e,t,i){\"use strict\";var r=i(0);r.AdaptiveToneMappingPass=function(e,t){this.resolution=void 0!==t?t:256,this.needsInit=!0,this.adaptive=void 0===e||!!e,this.luminanceRT=null,this.previousLuminanceRT=null,this.currentLuminanceRT=null,void 0===r.CopyShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.CopyShader\");var i=r.CopyShader;this.copyUniforms=r._46.clone(i.uniforms),this.materialCopy=new r._35({uniforms:this.copyUniforms,vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,blending:r._9,depthTest:!1}),void 0===r.LuminosityShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader\"),this.materialLuminance=new r._35({uniforms:r._46.clone(r.LuminosityShader.uniforms),vertexShader:r.LuminosityShader.vertexShader,fragmentShader:r.LuminosityShader.fragmentShader,blending:r._9}),this.adaptLuminanceShader={defines:{MIP_LEVEL_1X1:(Math.log(this.resolution)/Math.log(2)).toFixed(1)},uniforms:{lastLum:{type:\"t\",value:null},currentLum:{type:\"t\",value:null},delta:{type:\"f\",value:.016},tau:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D lastLum;\",\"uniform sampler2D currentLum;\",\"uniform float delta;\",\"uniform float tau;\",\"void main() {\",\"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\",\"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\",\"float fLastLum = lastLum.r;\",\"float fCurrentLum = currentLum.r;\",\"fCurrentLum *= fCurrentLum;\",\"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\",\"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );\",\"}\"].join(\"\\n\")},this.materialAdaptiveLum=new r._35({uniforms:r._46.clone(this.adaptLuminanceShader.uniforms),vertexShader:this.adaptLuminanceShader.vertexShader,fragmentShader:this.adaptLuminanceShader.fragmentShader,defines:this.adaptLuminanceShader.defines,blending:r._9}),void 0===r.ToneMapShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader\"),this.materialToneMap=new r._35({uniforms:r._46.clone(r.ToneMapShader.uniforms),vertexShader:r.ToneMapShader.vertexShader,fragmentShader:r.ToneMapShader.fragmentShader,blending:r._9}),this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.AdaptiveToneMappingPass.prototype={render:function(e,t,i,r,n){this.needsInit&&(this.reset(e),this.luminanceRT.type=i.type,this.previousLuminanceRT.type=i.type,this.currentLuminanceRT.type=i.type,this.needsInit=!1),this.adaptive&&(this.quad.material=this.materialLuminance,this.materialLuminance.uniforms.tDiffuse.value=i,e.render(this.scene,this.camera,this.currentLuminanceRT),this.quad.material=this.materialAdaptiveLum,this.materialAdaptiveLum.uniforms.delta.value=r,this.materialAdaptiveLum.uniforms.lastLum.value=this.previousLuminanceRT,this.materialAdaptiveLum.uniforms.currentLum.value=this.currentLuminanceRT,e.render(this.scene,this.camera,this.luminanceRT),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.luminanceRT,e.render(this.scene,this.camera,this.previousLuminanceRT)),this.quad.material=this.materialToneMap,this.materialToneMap.uniforms.tDiffuse.value=i,e.render(this.scene,this.camera,t,this.clear)},reset:function(e){this.luminanceRT&&this.luminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose();var t={minFilter:r.U,magFilter:r.U,format:r._22};this.luminanceRT=new r._53(this.resolution,this.resolution,t),this.luminanceRT.generateMipmaps=!1,this.previousLuminanceRT=new r._53(this.resolution,this.resolution,t),this.previousLuminanceRT.generateMipmaps=!1,t.minFilter=r.V,this.currentLuminanceRT=new r._53(this.resolution,this.resolution,t),this.adaptive&&(this.materialToneMap.defines.ADAPTED_LUMINANCE=\"\",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT),this.quad.material=new r._4({color:7829367}),this.materialLuminance.needsUpdate=!0,this.materialAdaptiveLum.needsUpdate=!0,this.materialToneMap.needsUpdate=!0},setAdaptive:function(e){e?(this.adaptive=!0,this.materialToneMap.defines.ADAPTED_LUMINANCE=\"\",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT):(this.adaptive=!1,delete this.materialToneMap.defines.ADAPTED_LUMINANCE,this.materialToneMap.uniforms.luminanceMap.value=void 0),this.materialToneMap.needsUpdate=!0},setAdaptionRate:function(e){e&&(this.materialAdaptiveLum.uniforms.tau.value=Math.abs(e))},setMaxLuminance:function(e){e&&(this.materialToneMap.uniforms.maxLuminance.value=e)},setAverageLuminance:function(e){e&&(this.materialToneMap.uniforms.averageLuminance.value=e)},setMiddleGrey:function(e){e&&(this.materialToneMap.uniforms.middleGrey.value=e)},dispose:function(){this.luminanceRT&&this.luminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.materialLuminance&&this.materialLuminance.dispose(),this.materialAdaptiveLum&&this.materialAdaptiveLum.dispose(),this.materialCopy&&this.materialCopy.dispose(),this.materialToneMap&&this.materialToneMap.dispose()}},t.a=r.AdaptiveToneMappingPass},function(e,t,i){\"use strict\";var r=i(0);r.BasicShader={uniforms:{},vertexShader:[\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"void main() {\",\"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );\",\"}\"].join(\"\\n\")},t.a=r.BasicShader},function(e,t,i){\"use strict\";var r=i(0);r.BleachBypassShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 base = texture2D( tDiffuse, vUv );\",\"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\"float lum = dot( lumCoeff, base.rgb );\",\"vec3 blend = vec3( lum );\",\"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\"vec3 result1 = 2.0 * base.rgb * blend;\",\"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\"vec3 newColor = mix( result1, result2, L );\",\"float A2 = opacity * base.a;\",\"vec3 mixRGB = A2 * newColor.rgb;\",\"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\"gl_FragColor = vec4( mixRGB, base.a );\",\"}\"].join(\"\\n\")},t.a=r.BleachBypassShader},function(e,t,i){\"use strict\";var r=i(0);r.BlendShader={uniforms:{tDiffuse1:{type:\"t\",value:null},tDiffuse2:{type:\"t\",value:null},mixRatio:{type:\"f\",value:.5},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform float mixRatio;\",\"uniform sampler2D tDiffuse1;\",\"uniform sampler2D tDiffuse2;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel1 = texture2D( tDiffuse1, vUv );\",\"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\",\"}\"].join(\"\\n\")},t.a=r.BlendShader},function(e,t,i){\"use strict\";var r=i(0);r.BloomPass=function(e,t,i,n){e=void 0!==e?e:1,t=void 0!==t?t:25,i=void 0!==i?i:4,n=void 0!==n?n:256;var a={minFilter:r.U,magFilter:r.U,format:r._22};this.renderTargetX=new r._53(n,n,a),this.renderTargetY=new r._53(n,n,a),void 0===r.CopyShader&&console.error(\"THREE.BloomPass relies on THREE.CopyShader\");var o=r.CopyShader;this.copyUniforms=r._46.clone(o.uniforms),this.copyUniforms.opacity.value=e,this.materialCopy=new r._35({uniforms:this.copyUniforms,vertexShader:o.vertexShader,fragmentShader:o.fragmentShader,blending:r.b,transparent:!0}),void 0===r.ConvolutionShader&&console.error(\"THREE.BloomPass relies on THREE.ConvolutionShader\");var s=r.ConvolutionShader;this.convolutionUniforms=r._46.clone(s.uniforms),this.convolutionUniforms.uImageIncrement.value=r.BloomPass.blurX,this.convolutionUniforms.cKernel.value=r.ConvolutionShader.buildKernel(i),this.materialConvolution=new r._35({uniforms:this.convolutionUniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,defines:{KERNEL_SIZE_FLOAT:t.toFixed(1),KERNEL_SIZE_INT:t.toFixed(0)}}),this.enabled=!0,this.needsSwap=!1,this.clear=!1,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.BloomPass.prototype={render:function(e,t,i,n,a){a&&e.context.disable(e.context.STENCIL_TEST),this.quad.material=this.materialConvolution,this.convolutionUniforms.tDiffuse.value=i,this.convolutionUniforms.uImageIncrement.value=r.BloomPass.blurX,e.render(this.scene,this.camera,this.renderTargetX,!0),this.convolutionUniforms.tDiffuse.value=this.renderTargetX,this.convolutionUniforms.uImageIncrement.value=r.BloomPass.blurY,e.render(this.scene,this.camera,this.renderTargetY,!0),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetY,a&&e.context.enable(e.context.STENCIL_TEST),e.render(this.scene,this.camera,i,this.clear)}},r.BloomPass.blurX=new r._48(.001953125,0),r.BloomPass.blurY=new r._48(0,.001953125),t.a=r.BloomPass},function(e,t,i){\"use strict\";var r=i(0);r.BokehPass=function(e,t,i){this.scene=e,this.camera=t;var n=void 0!==i.focus?i.focus:1,a=void 0!==i.aspect?i.aspect:t.aspect,o=void 0!==i.aperture?i.aperture:.025,s=void 0!==i.maxblur?i.maxblur:1,c=i.width||window.innerWidth||1,l=i.height||window.innerHeight||1;this.renderTargetColor=new r._53(c,l,{minFilter:r.U,magFilter:r.U,format:r._22}),this.renderTargetDepth=this.renderTargetColor.clone(),this.materialDepth=new r._5,void 0===r.BokehShader&&console.error(\"THREE.BokehPass relies on THREE.BokehShader\");var u=r.BokehShader,h=r._46.clone(u.uniforms);h.tDepth.value=this.renderTargetDepth,h.focus.value=n,h.aspect.value=a,h.aperture.value=o,h.maxblur.value=s,this.materialBokeh=new r._35({uniforms:h,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}),this.uniforms=h,this.enabled=!0,this.needsSwap=!1,this.renderToScreen=!1,this.clear=!1,this.camera2=new r._14(-1,1,1,-1,0,1),this.scene2=new r._31,this.quad2=new r._3(new r._17(2,2),null),this.scene2.add(this.quad2)},r.BokehPass.prototype={render:function(e,t,i,r,n){this.quad2.material=this.materialBokeh,this.scene.overrideMaterial=this.materialDepth,e.render(this.scene,this.camera,this.renderTargetDepth,!0),this.uniforms.tColor.value=i,this.renderToScreen?e.render(this.scene2,this.camera2):e.render(this.scene2,this.camera2,t,this.clear),this.scene.overrideMaterial=null}},t.a=r.BokehPass},function(e,t,i){\"use strict\";var r=i(0);r.BokehShader={uniforms:{tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},focus:{type:\"f\",value:1},aspect:{type:\"f\",value:1},aperture:{type:\"f\",value:.025},maxblur:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"uniform float maxblur;\",\"uniform float aperture;\",\"uniform float focus;\",\"uniform float aspect;\",\"void main() {\",\"vec2 aspectcorrect = vec2( 1.0, aspect );\",\"vec4 depth1 = texture2D( tDepth, vUv );\",\"float factor = depth1.x - focus;\",\"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\"vec2 dofblur9 = dofblur * 0.9;\",\"vec2 dofblur7 = dofblur * 0.7;\",\"vec2 dofblur4 = dofblur * 0.4;\",\"vec4 col = vec4( 0.0 );\",\"col += texture2D( tColor, vUv.xy );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\"gl_FragColor = col / 41.0;\",\"gl_FragColor.a = 1.0;\",\"}\"].join(\"\\n\")},t.a=r.BokehShader},function(e,t,i){\"use strict\";var r=i(0);r.BokehShader={uniforms:{textureWidth:{type:\"f\",value:1},textureHeight:{type:\"f\",value:1},focalDepth:{type:\"f\",value:1},focalLength:{type:\"f\",value:24},fstop:{type:\"f\",value:.9},tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},maxblur:{type:\"f\",value:1},showFocus:{type:\"i\",value:0},manualdof:{type:\"i\",value:0},vignetting:{type:\"i\",value:0},depthblur:{type:\"i\",value:0},threshold:{type:\"f\",value:.5},gain:{type:\"f\",value:2},bias:{type:\"f\",value:.5},fringe:{type:\"f\",value:.7},znear:{type:\"f\",value:.1},zfar:{type:\"f\",value:100},noise:{type:\"i\",value:1},dithering:{type:\"f\",value:1e-4},pentagon:{type:\"i\",value:0},shaderFocus:{type:\"i\",value:1},focusCoords:{type:\"v2\",value:new r._48}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"uniform float textureWidth;\",\"uniform float textureHeight;\",\"const float PI = 3.14159265;\",\"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\",\"uniform float focalLength; //focal length in mm\",\"uniform float fstop; //f-stop value\",\"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\",\"/*\",\"make sure that these two values are the same for your camera, otherwise distances will be wrong.\",\"*/\",\"uniform float znear; // camera clipping start\",\"uniform float zfar; // camera clipping end\",\"//------------------------------------------\",\"//user variables\",\"const int samples = SAMPLES; //samples on the first ring\",\"const int rings = RINGS; //ring count\",\"const int maxringsamples = rings * samples;\",\"uniform bool manualdof; // manual dof calculation\",\"float ndofstart = 1.0; // near dof blur start\",\"float ndofdist = 2.0; // near dof blur falloff distance\",\"float fdofstart = 1.0; // far dof blur start\",\"float fdofdist = 3.0; // far dof blur falloff distance\",\"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\",\"uniform bool vignetting; // use optical lens vignetting\",\"float vignout = 1.3; // vignetting outer border\",\"float vignin = 0.0; // vignetting inner border\",\"float vignfade = 22.0; // f-stops till vignete fades\",\"uniform bool shaderFocus;\",\"// disable if you use external focalDepth value\",\"uniform vec2 focusCoords;\",\"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\",\"// if center of screen use vec2(0.5, 0.5);\",\"uniform float maxblur;\",\"//clamp value of max blur (0.0 = no blur, 1.0 default)\",\"uniform float threshold; // highlight threshold;\",\"uniform float gain; // highlight gain;\",\"uniform float bias; // bokeh edge bias\",\"uniform float fringe; // bokeh chromatic aberration / fringing\",\"uniform bool noise; //use noise instead of pattern for sample dithering\",\"uniform float dithering;\",\"uniform bool depthblur; // blur the depth buffer\",\"float dbsize = 1.25; // depth blur size\",\"/*\",\"next part is experimental\",\"not looking good with small sample and ring count\",\"looks okay starting from samples = 4, rings = 4\",\"*/\",\"uniform bool pentagon; //use pentagon as bokeh shape?\",\"float feather = 0.4; //pentagon shape feather\",\"//------------------------------------------\",\"float penta(vec2 coords) {\",\"//pentagonal shape\",\"float scale = float(rings) - 1.3;\",\"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\",\"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\",\"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\",\"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\",\"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\",\"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\",\"vec4  one = vec4( 1.0 );\",\"vec4 P = vec4((coords),vec2(scale, scale));\",\"vec4 dist = vec4(0.0);\",\"float inorout = -4.0;\",\"dist.x = dot( P, HS0 );\",\"dist.y = dot( P, HS1 );\",\"dist.z = dot( P, HS2 );\",\"dist.w = dot( P, HS3 );\",\"dist = smoothstep( -feather, feather, dist );\",\"inorout += dot( dist, one );\",\"dist.x = dot( P, HS4 );\",\"dist.y = HS5.w - abs( P.z );\",\"dist = smoothstep( -feather, feather, dist );\",\"inorout += dist.x;\",\"return clamp( inorout, 0.0, 1.0 );\",\"}\",\"float bdepth(vec2 coords) {\",\"// Depth buffer blur\",\"float d = 0.0;\",\"float kernel[9];\",\"vec2 offset[9];\",\"vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\",\"offset[0] = vec2(-wh.x,-wh.y);\",\"offset[1] = vec2( 0.0, -wh.y);\",\"offset[2] = vec2( wh.x -wh.y);\",\"offset[3] = vec2(-wh.x,  0.0);\",\"offset[4] = vec2( 0.0,   0.0);\",\"offset[5] = vec2( wh.x,  0.0);\",\"offset[6] = vec2(-wh.x, wh.y);\",\"offset[7] = vec2( 0.0,  wh.y);\",\"offset[8] = vec2( wh.x, wh.y);\",\"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\",\"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\",\"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\",\"for( int i=0; i<9; i++ ) {\",\"float tmp = texture2D(tDepth, coords + offset[i]).r;\",\"d += tmp * kernel[i];\",\"}\",\"return d;\",\"}\",\"vec3 color(vec2 coords,float blur) {\",\"//processing the sample\",\"vec3 col = vec3(0.0);\",\"vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\",\"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\",\"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\",\"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\",\"vec3 lumcoeff = vec3(0.299,0.587,0.114);\",\"float lum = dot(col.rgb, lumcoeff);\",\"float thresh = max((lum-threshold)*gain, 0.0);\",\"return col+mix(vec3(0.0),col,thresh*blur);\",\"}\",\"vec2 rand(vec2 coord) {\",\"// generating noise / pattern texture for dithering\",\"float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;\",\"float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;\",\"if (noise) {\",\"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\",\"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\",\"}\",\"return vec2(noiseX,noiseY);\",\"}\",\"vec3 debugFocus(vec3 col, float blur, float depth) {\",\"float edge = 0.002*depth; //distance based edge smoothing\",\"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\",\"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\",\"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\",\"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\",\"return col;\",\"}\",\"float linearize(float depth) {\",\"return -zfar * znear / (depth * (zfar - znear) - zfar);\",\"}\",\"float vignette() {\",\"float dist = distance(vUv.xy, vec2(0.5,0.5));\",\"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\",\"return clamp(dist,0.0,1.0);\",\"}\",\"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\",\"float rings2 = float(rings);\",\"float step = PI*2.0 / float(ringsamples);\",\"float pw = cos(j*step)*i;\",\"float ph = sin(j*step)*i;\",\"float p = 1.0;\",\"if (pentagon) {\",\"p = penta(vec2(pw,ph));\",\"}\",\"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\",\"return 1.0 * mix(1.0, i /rings2, bias) * p;\",\"}\",\"void main() {\",\"//scene depth calculation\",\"float depth = linearize(texture2D(tDepth,vUv.xy).x);\",\"// Blur depth?\",\"if (depthblur) {\",\"depth = linearize(bdepth(vUv.xy));\",\"}\",\"//focal plane calculation\",\"float fDepth = focalDepth;\",\"if (shaderFocus) {\",\"fDepth = linearize(texture2D(tDepth,focusCoords).x);\",\"}\",\"// dof blur factor calculation\",\"float blur = 0.0;\",\"if (manualdof) {\",\"float a = depth-fDepth; // Focal plane\",\"float b = (a-fdofstart)/fdofdist; // Far DoF\",\"float c = (-a-ndofstart)/ndofdist; // Near Dof\",\"blur = (a>0.0) ? b : c;\",\"} else {\",\"float f = focalLength; // focal length in mm\",\"float d = fDepth*1000.0; // focal plane in mm\",\"float o = depth*1000.0; // depth in mm\",\"float a = (o*f)/(o-f);\",\"float b = (d*f)/(d-f);\",\"float c = (d-f)/(d*fstop*CoC);\",\"blur = abs(a-b)*c;\",\"}\",\"blur = clamp(blur,0.0,1.0);\",\"// calculation of pattern for dithering\",\"vec2 noise = rand(vUv.xy)*dithering*blur;\",\"// getting blur x and y step factor\",\"float w = (1.0/textureWidth)*blur*maxblur+noise.x;\",\"float h = (1.0/textureHeight)*blur*maxblur+noise.y;\",\"// calculation of final color\",\"vec3 col = vec3(0.0);\",\"if(blur < 0.05) {\",\"//some optimization thingy\",\"col = texture2D(tColor, vUv.xy).rgb;\",\"} else {\",\"col = texture2D(tColor, vUv.xy).rgb;\",\"float s = 1.0;\",\"int ringsamples;\",\"for (int i = 1; i <= rings; i++) {\",\"/*unboxstart*/\",\"ringsamples = i * samples;\",\"for (int j = 0 ; j < maxringsamples ; j++) {\",\"if (j >= ringsamples) break;\",\"s += gather(float(i), float(j), ringsamples, col, w, h, blur);\",\"}\",\"/*unboxend*/\",\"}\",\"col /= s; //divide by sample count\",\"}\",\"if (showFocus) {\",\"col = debugFocus(col, blur, depth);\",\"}\",\"if (vignetting) {\",\"col *= vignette();\",\"}\",\"gl_FragColor.rgb = col;\",\"gl_FragColor.a = 1.0;\",\"} \"].join(\"\\n\")},t.a=r.BokehShader},function(e,t,i){\"use strict\";var r=i(0);r.BrightnessContrastShader={uniforms:{tDiffuse:{type:\"t\",value:null},brightness:{type:\"f\",value:0},contrast:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float brightness;\",\"uniform float contrast;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"gl_FragColor.rgb += brightness;\",\"if (contrast > 0.0) {\",\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\",\"} else {\",\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\",\"}\",\"}\"].join(\"\\n\")},t.a=r.BrightnessContrastShader},function(e,t,i){\"use strict\";var r=i(0);r.ColorCorrectionShader={uniforms:{tDiffuse:{type:\"t\",value:null},powRGB:{type:\"v3\",value:new r._49(2,2,2)},mulRGB:{type:\"v3\",value:new r._49(1,1,1)},addRGB:{type:\"v3\",value:new r._49(0,0,0)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform vec3 powRGB;\",\"uniform vec3 mulRGB;\",\"uniform vec3 addRGB;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\",\"}\"].join(\"\\n\")},t.a=r.ColorCorrectionShader},function(e,t,i){\"use strict\";var r=i(0);r.ColorifyShader={uniforms:{tDiffuse:{type:\"t\",value:null},color:{type:\"c\",value:new r.m(16777215)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 color;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\"float v = dot( texel.xyz, luma );\",\"gl_FragColor = vec4( v * color, texel.w );\",\"}\"].join(\"\\n\")},t.a=r.ColorifyShader},function(e,t,i){\"use strict\";var r=i(0);r.ConvolutionShader={defines:{KERNEL_SIZE_FLOAT:\"25.0\",KERNEL_SIZE_INT:\"25\"},uniforms:{tDiffuse:{type:\"t\",value:null},uImageIncrement:{type:\"v2\",value:new r._48(.001953125,0)},cKernel:{type:\"fv1\",value:[]}},vertexShader:[\"uniform vec2 uImageIncrement;\",\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float cKernel[ KERNEL_SIZE_INT ];\",\"uniform sampler2D tDiffuse;\",\"uniform vec2 uImageIncrement;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 imageCoord = vUv;\",\"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\",\"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\",\"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\",\"imageCoord += uImageIncrement;\",\"}\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\"),buildKernel:function(e){var t,i,r,n,a=2*Math.ceil(3*e)+1;for(a>25&&(a=25),n=.5*(a-1),i=new Array(a),r=0,t=0;t<a;++t)i[t]=function(e,t){return Math.exp(-e*e/(2*t*t))}(t-n,e),r+=i[t];for(t=0;t<a;++t)i[t]/=r;return i}},t.a=r.ConvolutionShader},function(e,t,i){\"use strict\";var r=i(0);r.CopyShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"gl_FragColor = opacity * texel;\",\"}\"].join(\"\\n\")},t.a=r.CopyShader},function(e,t,i){\"use strict\";var r=i(0);r.DDSLoader=function(){this._parser=r.DDSLoader.parse},r.DDSLoader.prototype=Object.create(r.p.prototype),r.DDSLoader.prototype.constructor=r.DDSLoader,r.DDSLoader.parse=function(e,t){function i(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}var n={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},a=i(\"DXT1\"),o=i(\"DXT3\"),s=i(\"DXT5\"),c=i(\"ETC1\"),l=new Int32Array(e,0,31);if(542327876!==l[0])return console.error(\"THREE.DDSLoader.parse: Invalid magic number in DDS header.\"),n;if(4&!l[20])return console.error(\"THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.\"),n;var u,h=l[21],d=!1;switch(h){case a:u=8,n.format=r._25;break;case o:u=16,n.format=r._20;break;case s:u=16,n.format=r._21;break;case c:u=8,n.format=r._24;break;default:if(!(32===l[22]&&16711680&l[23]&&65280&l[24]&&255&l[25]&&4278190080&l[26]))return console.error(\"THREE.DDSLoader.parse: Unsupported FourCC code \",function(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}(h)),n;d=!0,u=64,n.format=r._19}n.mipmapCount=1,131072&l[2]&&!1!==t&&(n.mipmapCount=Math.max(1,l[7]));var p=l[28];if(n.isCubemap=!!(512&p),n.isCubemap&&(!(1024&p)||!(2048&p)||!(4096&p)||!(8192&p)||!(16384&p)||!(32768&p)))return console.error(\"THREE.DDSLoader.parse: Incomplete cubemap faces\"),n;n.width=l[4],n.height=l[3];for(var f=l[1]+4,m=n.isCubemap?6:1,v=0;v<m;v++)for(var g=n.width,y=n.height,x=0;x<n.mipmapCount;x++){if(d)var _=function(e,t,i,r){for(var n=i*r*4,a=new Uint8Array(e,t,n),o=new Uint8Array(n),s=0,c=0,l=0;l<r;l++)for(var u=0;u<i;u++){var h=a[c];c++;var d=a[c];c++;var p=a[c];c++;var f=a[c];c++,o[s]=p,s++,o[s]=d,s++,o[s]=h,s++,o[s]=f,s++}return o}(e,f,g,y),b=_.length;else var b=Math.max(4,g)/4*Math.max(4,y)/4*u,_=new Uint8Array(e,f,b);var w={data:_,width:g,height:y};n.mipmaps.push(w),f+=b,g=Math.max(g>>1,1),y=Math.max(y>>1,1)}return n},t.a=r.DDSLoader},function(e,t,i){\"use strict\";var r=i(0);r.DOFMipMapShader={uniforms:{tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},focus:{type:\"f\",value:1},maxblur:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float focus;\",\"uniform float maxblur;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 depth = texture2D( tDepth, vUv );\",\"float factor = depth.x - focus;\",\"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );\",\"gl_FragColor = col;\",\"gl_FragColor.a = 1.0;\",\"}\"].join(\"\\n\")},t.a=r.DOFMipMapShader},function(e,t,i){\"use strict\";var r=i(0);r.DigitalGlitch={uniforms:{tDiffuse:{type:\"t\",value:null},tDisp:{type:\"t\",value:null},byp:{type:\"i\",value:0},amount:{type:\"f\",value:.08},angle:{type:\"f\",value:.02},seed:{type:\"f\",value:.02},seed_x:{type:\"f\",value:.02},seed_y:{type:\"f\",value:.02},distortion_x:{type:\"f\",value:.5},distortion_y:{type:\"f\",value:.6},col_s:{type:\"f\",value:.05}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform int byp;\",\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tDisp;\",\"uniform float amount;\",\"uniform float angle;\",\"uniform float seed;\",\"uniform float seed_x;\",\"uniform float seed_y;\",\"uniform float distortion_x;\",\"uniform float distortion_y;\",\"uniform float col_s;\",\"varying vec2 vUv;\",\"float rand(vec2 co){\",\"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\"}\",\"void main() {\",\"if(byp<1) {\",\"vec2 p = vUv;\",\"float xs = floor(gl_FragCoord.x / 0.5);\",\"float ys = floor(gl_FragCoord.y / 0.5);\",\"vec4 normal = texture2D (tDisp, p*seed*seed);\",\"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\"if(seed_x>0.){\",\"p.y = 1. - (p.y + distortion_y);\",\"}\",\"else {\",\"p.y = distortion_y;\",\"}\",\"}\",\"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\"if(seed_y>0.){\",\"p.x=distortion_x;\",\"}\",\"else {\",\"p.x = 1. - (p.x + distortion_x);\",\"}\",\"}\",\"p.x+=normal.x*seed_x*(seed/5.);\",\"p.y+=normal.y*seed_y*(seed/5.);\",\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\"vec4 cr = texture2D(tDiffuse, p + offset);\",\"vec4 cga = texture2D(tDiffuse, p);\",\"vec4 cb = texture2D(tDiffuse, p - offset);\",\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\"gl_FragColor = gl_FragColor+ snow;\",\"}\",\"else {\",\"gl_FragColor=texture2D (tDiffuse, vUv);\",\"}\",\"}\"].join(\"\\n\")},t.a=r.DigitalGlitch},function(e,t,i){\"use strict\";var r=i(0);r.DotScreenPass=function(e,t,i){void 0===r.DotScreenShader&&console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");var n=r.DotScreenShader;this.uniforms=r._46.clone(n.uniforms),void 0!==e&&this.uniforms.center.value.copy(e),void 0!==t&&(this.uniforms.angle.value=t),void 0!==i&&(this.uniforms.scale.value=i),this.material=new r._35({uniforms:this.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.DotScreenPass.prototype={render:function(e,t,i,r){this.uniforms.tDiffuse.value=i,this.uniforms.tSize.value.set(i.width,i.height),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)}},t.a=r.DotScreenPass},function(e,t,i){\"use strict\";var r=i(0);r.DotScreenShader={uniforms:{tDiffuse:{type:\"t\",value:null},tSize:{type:\"v2\",value:new r._48(256,256)},center:{type:\"v2\",value:new r._48(.5,.5)},angle:{type:\"f\",value:1.57},scale:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec2 center;\",\"uniform float angle;\",\"uniform float scale;\",\"uniform vec2 tSize;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"float pattern() {\",\"float s = sin( angle ), c = cos( angle );\",\"vec2 tex = vUv * tSize - center;\",\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\"}\",\"void main() {\",\"vec4 color = texture2D( tDiffuse, vUv );\",\"float average = ( color.r + color.g + color.b ) / 3.0;\",\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\"}\"].join(\"\\n\")},t.a=r.DotScreenShader},function(e,t,i){\"use strict\";var r=i(0);r.EdgeShader={uniforms:{tDiffuse:{type:\"t\",value:null},aspect:{type:\"v2\",value:new r._48(512,512)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform vec2 aspect;\",\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\"mat3 G[9];\",\"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\",\"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\",\"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\",\"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\",\"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\",\"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\",\"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\",\"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\",\"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\",\"void main(void)\",\"{\",\"G[0] = g0,\",\"G[1] = g1,\",\"G[2] = g2,\",\"G[3] = g3,\",\"G[4] = g4,\",\"G[5] = g5,\",\"G[6] = g6,\",\"G[7] = g7,\",\"G[8] = g8;\",\"mat3 I;\",\"float cnv[9];\",\"vec3 sample;\",\"for (float i=0.0; i<3.0; i++) {\",\"for (float j=0.0; j<3.0; j++) {\",\"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\"I[int(i)][int(j)] = length(sample);\",\"}\",\"}\",\"for (int i=0; i<9; i++) {\",\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\"cnv[i] = dp3 * dp3;\",\"}\",\"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\",\"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\",\"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\",\"}\"].join(\"\\n\")},t.a=r.EdgeShader},function(e,t,i){\"use strict\";var r=i(0);r.EdgeShader2={uniforms:{tDiffuse:{type:\"t\",value:null},aspect:{type:\"v2\",value:new r._48(512,512)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform vec2 aspect;\",\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\"mat3 G[2];\",\"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\",\"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\",\"void main(void)\",\"{\",\"mat3 I;\",\"float cnv[2];\",\"vec3 sample;\",\"G[0] = g0;\",\"G[1] = g1;\",\"for (float i=0.0; i<3.0; i++)\",\"for (float j=0.0; j<3.0; j++) {\",\"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\"I[int(i)][int(j)] = length(sample);\",\"}\",\"for (int i=0; i<2; i++) {\",\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\"cnv[i] = dp3 * dp3; \",\"}\",\"gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));\",\"} \"].join(\"\\n\")},t.a=r.EdgeShader2},function(e,t,i){\"use strict\";var r=i(0);r.EffectComposer=function(e,t){if(this.renderer=e,void 0===t){var i=e.getPixelRatio(),n=Math.floor(e.context.canvas.width/i)||1,a=Math.floor(e.context.canvas.height/i)||1,o={minFilter:r.U,magFilter:r.U,format:r._22,stencilBuffer:!1};t=new r._53(n,a,o)}this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===r.CopyShader&&console.error(\"THREE.EffectComposer relies on THREE.CopyShader\"),this.copyPass=new r.ShaderPass(r.CopyShader)},r.EffectComposer.prototype={swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,t){this.passes.splice(t,0,e)},render:function(e){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var t,i,n=!1,a=this.passes.length;for(i=0;i<a;i++)if(t=this.passes[i],t.enabled){if(t.render(this.renderer,this.writeBuffer,this.readBuffer,e,n),t.needsSwap){if(n){var o=this.renderer.context;o.stencilFunc(o.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),o.stencilFunc(o.EQUAL,1,4294967295)}this.swapBuffers()}t instanceof r.MaskPass?n=!0:t instanceof r.ClearMaskPass&&(n=!1)}},reset:function(e){if(void 0===e){e=this.renderTarget1.clone();var t=this.renderer.getPixelRatio();e.width=Math.floor(this.renderer.context.canvas.width/t),e.height=Math.floor(this.renderer.context.canvas.height/t)}this.renderTarget1.dispose(),this.renderTarget1=e,this.renderTarget2.dispose(),this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,t){this.renderTarget1.setSize(e,t),this.renderTarget2.setSize(e,t)}},t.a=r.EffectComposer},function(e,t,i){\"use strict\";var r=i(0);r.FXAAShader={uniforms:{tDiffuse:{type:\"t\",value:new r._41},resolution:{type:\"v2\",value:new r._48}},vertexShader:\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nuniform vec2 resolution;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 fragCoord = uv * resolution;\\n  vec2 inverseVP = 1.0 / resolution.xy;\\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n  v_rgbM = vec2(fragCoord * inverseVP);\\n\\n  gl_Position = projectionMatrix *\\n              modelViewMatrix *\\n              vec4(position,1.0);\\n}\\n\",fragmentShader:'#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\n//texcoords computed in vertex step\\n//to avoid dependent texture reads\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\n//make sure to have a resolution uniform set to the screen size\\nuniform vec2 resolution;\\nuniform sampler2D tDiffuse;\\n\\n/**\\nBasic FXAA implementation based on the code on geeks3d.com with the\\nmodification that the texture2DLod stuff was removed since it\\'s\\nunsupported by WebGL.\\n\\n--\\n\\nFrom:\\nhttps://github.com/mitsuhiko/webgl-meincraft\\n\\nCopyright (c) 2011 by Armin Ronacher.\\n\\nSome rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n\\n    * Redistributions in binary form must reproduce the above\\n      copyright notice, this list of conditions and the following\\n      disclaimer in the documentation and/or other materials provided\\n      with the distribution.\\n\\n    * The names of the contributors may not be used to endorse or\\n      promote products derived from this software without specific\\n      prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n*/\\n\\n#ifndef FXAA_REDUCE_MIN\\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n    #define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent \\n//texture reads can be a bottleneck\\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\\n            vec2 v_rgbNW, vec2 v_rgbNE, \\n            vec2 v_rgbSW, vec2 v_rgbSE, \\n            vec2 v_rgbM) {\\n    vec4 color;\\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n    \\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n    \\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n    \\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n              dir * rcpDirMin)) * inverseVP;\\n    \\n    vec3 rgbA = 0.5 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n  vec2 fragCoord = vUv * resolution;   \\n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n'},t.a=r.FXAAShader},function(e,t,i){\"use strict\";var r=i(0);r.FilmPass=function(e,t,i,n){void 0===r.FilmShader&&console.error(\"THREE.FilmPass relies on THREE.FilmShader\");var a=r.FilmShader;this.uniforms=r._46.clone(a.uniforms),this.material=new r._35({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),void 0!==n&&(this.uniforms.grayscale.value=n),void 0!==e&&(this.uniforms.nIntensity.value=e),void 0!==t&&(this.uniforms.sIntensity.value=t),void 0!==i&&(this.uniforms.sCount.value=i),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.FilmPass.prototype={render:function(e,t,i,r){this.uniforms.tDiffuse.value=i,this.uniforms.time.value+=r,this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)}},t.a=r.FilmPass},function(e,t,i){\"use strict\";var r=i(0);r.FilmShader={uniforms:{tDiffuse:{type:\"t\",value:null},time:{type:\"f\",value:0},nIntensity:{type:\"f\",value:.5},sIntensity:{type:\"f\",value:.05},sCount:{type:\"f\",value:4096},grayscale:{type:\"i\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float time;\",\"uniform bool grayscale;\",\"uniform float nIntensity;\",\"uniform float sIntensity;\",\"uniform float sCount;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\"float x = vUv.x * vUv.y * time *  1000.0;\",\"x = mod( x, 13.0 ) * mod( x, 123.0 );\",\"float dx = mod( x, 0.01 );\",\"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\",\"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\"if( grayscale ) {\",\"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\"}\",\"gl_FragColor =  vec4( cResult, cTextureScreen.a );\",\"}\"].join(\"\\n\")},t.a=r.FilmShader},function(e,t,i){\"use strict\";var r=i(0);r.FocusShader={uniforms:{tDiffuse:{type:\"t\",value:null},screenWidth:{type:\"f\",value:1024},screenHeight:{type:\"f\",value:1024},sampleDistance:{type:\"f\",value:.94},waveFactor:{type:\"f\",value:.00125}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float screenWidth;\",\"uniform float screenHeight;\",\"uniform float sampleDistance;\",\"uniform float waveFactor;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 color, org, tmp, add;\",\"float sample_dist, f;\",\"vec2 vin;\",\"vec2 uv = vUv;\",\"add = color = org = texture2D( tDiffuse, uv );\",\"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\"sample_dist = dot( vin, vin ) * 2.0;\",\"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\"}\"].join(\"\\n\")},t.a=r.FocusShader},function(e,t,i){\"use strict\";var r=i(0);r.FresnelShader={uniforms:{mRefractionRatio:{type:\"f\",value:1.02},mFresnelBias:{type:\"f\",value:.1},mFresnelPower:{type:\"f\",value:2},mFresnelScale:{type:\"f\",value:1},tCube:{type:\"t\",value:null}},vertexShader:[\"uniform float mRefractionRatio;\",\"uniform float mFresnelBias;\",\"uniform float mFresnelScale;\",\"uniform float mFresnelPower;\",\"varying vec3 vReflect;\",\"varying vec3 vRefract[3];\",\"varying float vReflectionFactor;\",\"void main() {\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\"vec3 I = worldPosition.xyz - cameraPosition;\",\"vReflect = reflect( I, worldNormal );\",\"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\",\"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\",\"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\",\"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform samplerCube tCube;\",\"varying vec3 vReflect;\",\"varying vec3 vRefract[3];\",\"varying float vReflectionFactor;\",\"void main() {\",\"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\"vec4 refractedColor = vec4( 1.0 );\",\"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\",\"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\",\"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\",\"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\",\"}\"].join(\"\\n\")},t.a=r.FresnelShader},function(e,t,i){\"use strict\";var r=i(0);r.GammaCorrectionShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#define GAMMA_OUTPUT\",\"#define GAMMA_FACTOR 2\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",r._33.common,\"void main() {\",\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\",\"}\"].join(\"\\n\")},t.a=r.GammaCorrectionShader},function(e,t,i){\"use strict\";var r=i(0);r.GlitchPass=function(e){void 0===r.DigitalGlitch&&console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");var t=r.DigitalGlitch;this.uniforms=r._46.clone(t.uniforms),void 0==e&&(e=64),this.uniforms.tDisp.value=this.generateHeightmap(e),this.material=new r._35({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad),this.goWild=!1,this.curF=0,this.generateTrigger()},r.GlitchPass.prototype={render:function(e,t,i,n){this.uniforms.tDiffuse.value=i,this.uniforms.seed.value=Math.random(),this.uniforms.byp.value=0,this.curF%this.randX==0||1==this.goWild?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=r._2.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=r._2.randFloat(-1,1),this.uniforms.seed_y.value=r._2.randFloat(-1,1),this.uniforms.distortion_x.value=r._2.randFloat(0,1),this.uniforms.distortion_y.value=r._2.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=r._2.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=r._2.randFloat(0,1),this.uniforms.distortion_y.value=r._2.randFloat(0,1),this.uniforms.seed_x.value=r._2.randFloat(-.3,.3),this.uniforms.seed_y.value=r._2.randFloat(-.3,.3)):0==this.goWild&&(this.uniforms.byp.value=1),this.curF++,this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)},generateTrigger:function(){this.randX=r._2.randInt(120,240)},generateHeightmap:function(e){for(var t=new Float32Array(e*e*3),i=e*e,n=0;n<i;n++){var a=r._2.randFloat(0,1);t[3*n+0]=a,t[3*n+1]=a,t[3*n+2]=a}var o=new r.u(t,e,e,r._22,r.I);return o.needsUpdate=!0,o}},t.a=r.GlitchPass},function(e,t,i){\"use strict\";var r=i(0);r.HorizontalBlurShader={uniforms:{tDiffuse:{type:\"t\",value:null},h:{type:\"f\",value:1/512}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float h;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=r.HorizontalBlurShader},function(e,t,i){\"use strict\";var r=i(0);r.HorizontalTiltShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},h:{type:\"f\",value:1/512},r:{type:\"f\",value:.35}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float h;\",\"uniform float r;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"float hh = h * abs( r - vUv.y );\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=r.HorizontalTiltShiftShader},function(e,t,i){\"use strict\";var r=i(0);r.HueSaturationShader={uniforms:{tDiffuse:{type:\"t\",value:null},hue:{type:\"f\",value:0},saturation:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float hue;\",\"uniform float saturation;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"float angle = hue * 3.14159265;\",\"float s = sin(angle), c = cos(angle);\",\"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\"float len = length(gl_FragColor.rgb);\",\"gl_FragColor.rgb = vec3(\",\"dot(gl_FragColor.rgb, weights.xyz),\",\"dot(gl_FragColor.rgb, weights.zxy),\",\"dot(gl_FragColor.rgb, weights.yzx)\",\");\",\"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\"if (saturation > 0.0) {\",\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\"} else {\",\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\"}\",\"}\"].join(\"\\n\")},t.a=r.HueSaturationShader},function(e,t,i){\"use strict\";var r=i(0);r.KaleidoShader={uniforms:{tDiffuse:{type:\"t\",value:null},sides:{type:\"f\",value:6},angle:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float sides;\",\"uniform float angle;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 p = vUv - 0.5;\",\"float r = length(p);\",\"float a = atan(p.y, p.x) + angle;\",\"float tau = 2. * 3.1416 ;\",\"a = mod(a, tau/sides);\",\"a = abs(a - tau/sides/2.) ;\",\"p = r * vec2(cos(a), sin(a));\",\"vec4 color = texture2D(tDiffuse, p + 0.5);\",\"gl_FragColor = color;\",\"}\"].join(\"\\n\")},t.a=r.KaleidoShader},function(e,t,i){\"use strict\";var r=i(0);r.LuminosityShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\"float v = dot( texel.xyz, luma );\",\"gl_FragColor = vec4( v, v, v, texel.w );\",\"}\"].join(\"\\n\")},t.a=r.LuminosityShader},function(e,t,i){\"use strict\";var r=i(0);r.MTLLoader=function(e){this.manager=void 0!==e?e:r.v},r.MTLLoader.prototype={constructor:r.MTLLoader,load:function(e,t,i,n){var a=this,o=new r._54(this.manager);o.setPath(this.path),o.load(e,function(e){t(a.parse(e))},i,n)},setPath:function(e){this.path=e},setBaseUrl:function(e){this.baseUrl=e},setCrossOrigin:function(e){this.crossOrigin=e},setMaterialOptions:function(e){this.materialOptions=e},parse:function(e){for(var t=e.split(\"\\n\"),i={},n=/\\s+/,a={},o=0;o<t.length;o++){var s=t[o];if(s=s.trim(),0!==s.length&&\"#\"!==s.charAt(0)){var c=s.indexOf(\" \"),l=c>=0?s.substring(0,c):s;l=l.toLowerCase();var u=c>=0?s.substring(c+1):\"\";if(u=u.trim(),\"newmtl\"===l)i={name:u},a[u]=i;else if(i)if(\"ka\"===l||\"kd\"===l||\"ks\"===l){var h=u.split(n,3);i[l]=[parseFloat(h[0]),parseFloat(h[1]),parseFloat(h[2])]}else i[l]=u}}var d=new r.MTLLoader.MaterialCreator(this.baseUrl,this.materialOptions);return d.setCrossOrigin(this.crossOrigin),d.setManager(this.manager),d.setMaterials(a),d}},r.MTLLoader.MaterialCreator=function(e,t){this.baseUrl=e,this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:r.L,this.wrap=this.options&&this.options.wrap?this.options.wrap:r._27},r.MTLLoader.MaterialCreator.prototype={constructor:r.MTLLoader.MaterialCreator,setCrossOrigin:function(e){this.crossOrigin=e},setManager:function(e){this.manager=e},setMaterials:function(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(e){if(!this.options)return e;var t={};for(var i in e){var r=e[i],n={};t[i]=n;for(var a in r){var o=!0,s=r[a],c=a.toLowerCase();switch(c){case\"kd\":case\"ka\":case\"ks\":this.options&&this.options.normalizeRGB&&(s=[s[0]/255,s[1]/255,s[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===s[0]&&0===s[1]&&0===s[1]&&(o=!1)}o&&(n[c]=s)}}return t},preload:function(){for(var e in this.materialsInfo)this.create(e)},getIndex:function(e){return this.nameLookup[e]},getAsArray:function(){var e=0;for(var t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray},create:function(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]},createMaterial_:function(e){var t=this.materialsInfo[e],i={name:e,side:this.side};for(var n in t){var a=t[n];if(\"\"!==a)switch(n.toLowerCase()){case\"kd\":i.color=(new r.m).fromArray(a);break;case\"ks\":i.specular=(new r.m).fromArray(a);break;case\"map_kd\":i.map=this.loadTexture(this.baseUrl+a),i.map.wrapS=this.wrap,i.map.wrapT=this.wrap;break;case\"ns\":i.shininess=parseFloat(a);break;case\"d\":a<1&&(i.opacity=a,i.transparent=!0);break;case\"Tr\":a>0&&(i.opacity=1-a,i.transparent=!0);break;case\"map_bump\":case\"bump\":if(i.bumpMap)break;i.bumpMap=this.loadTexture(this.baseUrl+a),i.bumpMap.wrapS=this.wrap,i.bumpMap.wrapT=this.wrap}}return this.materials[e]=new r._7(i),this.materials[e]},loadTexture:function(e,t,i,n,a){var o,s=r.W.Handlers.get(e),c=void 0!==this.manager?this.manager:r.v;return null===s&&(s=new r._42(c)),s.setCrossOrigin&&s.setCrossOrigin(this.crossOrigin),o=s.load(e,i,n,a),void 0!==t&&(o.mapping=t),o}},Object.assign(r.MTLLoader.prototype,r.C.prototype),t.a=r.MTLLoader},function(e,t,i){\"use strict\";var r=i(0);r.MarchingCubes=function(e,t,i,n){r.S.call(this,t),this.enableUvs=void 0!==i&&i,this.enableColors=void 0!==n&&n,this.init=function(e){this.resolution=e,this.isolation=80,this.size=e,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(3*this.size3),this.vlist=new Float32Array(36),this.nlist=new Float32Array(36),this.maxCount=4096,this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=new Float32Array(3*this.maxCount),this.normalArray=new Float32Array(3*this.maxCount),this.enableUvs&&(this.uvArray=new Float32Array(2*this.maxCount)),this.enableColors&&(this.colorArray=new Float32Array(3*this.maxCount))},this.lerp=function(e,t,i){return e+(t-e)*i},this.VIntX=function(e,t,i,r,n,a,o,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[r]=a+u*this.delta,t[r+1]=o,t[r+2]=s,i[r]=this.lerp(h[e],h[e+3],u),i[r+1]=this.lerp(h[e+1],h[e+4],u),i[r+2]=this.lerp(h[e+2],h[e+5],u)},this.VIntY=function(e,t,i,r,n,a,o,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[r]=a,t[r+1]=o+u*this.delta,t[r+2]=s;var d=e+3*this.yd;i[r]=this.lerp(h[e],h[d],u),i[r+1]=this.lerp(h[e+1],h[d+1],u),i[r+2]=this.lerp(h[e+2],h[d+2],u)},this.VIntZ=function(e,t,i,r,n,a,o,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[r]=a,t[r+1]=o,t[r+2]=s+u*this.delta;var d=e+3*this.zd;i[r]=this.lerp(h[e],h[d],u),i[r+1]=this.lerp(h[e+1],h[d+1],u),i[r+2]=this.lerp(h[e+2],h[d+2],u)},this.compNorm=function(e){var t=3*e;0===this.normal_cache[t]&&(this.normal_cache[t]=this.field[e-1]-this.field[e+1],this.normal_cache[t+1]=this.field[e-this.yd]-this.field[e+this.yd],this.normal_cache[t+2]=this.field[e-this.zd]-this.field[e+this.zd])},this.polygonize=function(e,t,i,n,a,o){var s=n+1,c=n+this.yd,l=n+this.zd,u=s+this.yd,h=s+this.zd,d=n+this.yd+this.zd,p=s+this.yd+this.zd,f=0,m=this.field[n],v=this.field[s],g=this.field[c],y=this.field[u],x=this.field[l],_=this.field[h],b=this.field[d],w=this.field[p];m<a&&(f|=1),v<a&&(f|=2),g<a&&(f|=8),y<a&&(f|=4),x<a&&(f|=16),_<a&&(f|=32),b<a&&(f|=128),w<a&&(f|=64);var M=r.edgeTable[f];if(0===M)return 0;var E=this.delta,S=e+E,T=t+E,A=i+E;1&M&&(this.compNorm(n),this.compNorm(s),this.VIntX(3*n,this.vlist,this.nlist,0,a,e,t,i,m,v)),2&M&&(this.compNorm(s),this.compNorm(u),this.VIntY(3*s,this.vlist,this.nlist,3,a,S,t,i,v,y)),4&M&&(this.compNorm(c),this.compNorm(u),this.VIntX(3*c,this.vlist,this.nlist,6,a,e,T,i,g,y)),8&M&&(this.compNorm(n),this.compNorm(c),this.VIntY(3*n,this.vlist,this.nlist,9,a,e,t,i,m,g)),16&M&&(this.compNorm(l),this.compNorm(h),this.VIntX(3*l,this.vlist,this.nlist,12,a,e,t,A,x,_)),32&M&&(this.compNorm(h),this.compNorm(p),this.VIntY(3*h,this.vlist,this.nlist,15,a,S,t,A,_,w)),64&M&&(this.compNorm(d),this.compNorm(p),this.VIntX(3*d,this.vlist,this.nlist,18,a,e,T,A,b,w)),128&M&&(this.compNorm(l),this.compNorm(d),this.VIntY(3*l,this.vlist,this.nlist,21,a,e,t,A,x,b)),256&M&&(this.compNorm(n),this.compNorm(l),this.VIntZ(3*n,this.vlist,this.nlist,24,a,e,t,i,m,x)),512&M&&(this.compNorm(s),this.compNorm(h),this.VIntZ(3*s,this.vlist,this.nlist,27,a,S,t,i,v,_)),1024&M&&(this.compNorm(u),this.compNorm(p),this.VIntZ(3*u,this.vlist,this.nlist,30,a,S,T,i,y,w)),2048&M&&(this.compNorm(c),this.compNorm(d),this.VIntZ(3*c,this.vlist,this.nlist,33,a,e,T,i,g,b)),f<<=4;for(var L,C,R,P=0,D=0;-1!=r.triTable[f+D];)L=f+D,C=L+1,R=L+2,this.posnormtriv(this.vlist,this.nlist,3*r.triTable[L],3*r.triTable[C],3*r.triTable[R],o),D+=3,P++;return P},this.posnormtriv=function(e,t,i,r,n,a){var o=3*this.count;if(this.positionArray[o]=e[i],this.positionArray[o+1]=e[i+1],this.positionArray[o+2]=e[i+2],this.positionArray[o+3]=e[r],this.positionArray[o+4]=e[r+1],this.positionArray[o+5]=e[r+2],this.positionArray[o+6]=e[n],this.positionArray[o+7]=e[n+1],this.positionArray[o+8]=e[n+2],this.normalArray[o]=t[i],this.normalArray[o+1]=t[i+1],this.normalArray[o+2]=t[i+2],this.normalArray[o+3]=t[r],this.normalArray[o+4]=t[r+1],this.normalArray[o+5]=t[r+2],this.normalArray[o+6]=t[n],this.normalArray[o+7]=t[n+1],this.normalArray[o+8]=t[n+2],this.enableUvs){var s=2*this.count;this.uvArray[s]=e[i],this.uvArray[s+1]=e[i+2],this.uvArray[s+2]=e[r],this.uvArray[s+3]=e[r+2],this.uvArray[s+4]=e[n],this.uvArray[s+5]=e[n+2]}this.enableColors&&(this.colorArray[o]=e[i],this.colorArray[o+1]=e[i+1],this.colorArray[o+2]=e[i+2],this.colorArray[o+3]=e[r],this.colorArray[o+4]=e[r+1],this.colorArray[o+5]=e[r+2],this.colorArray[o+6]=e[n],this.colorArray[o+7]=e[n+1],this.colorArray[o+8]=e[n+2]),this.count+=3,this.count>=this.maxCount-3&&(this.hasPositions=!0,this.hasNormals=!0,this.enableUvs&&(this.hasUvs=!0),this.enableColors&&(this.hasColors=!0),a(this))},this.begin=function(){this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasUvs=!1,this.hasColors=!1},this.end=function(e){if(0!==this.count){for(var t=3*this.count;t<this.positionArray.length;t++)this.positionArray[t]=0;this.hasPositions=!0,this.hasNormals=!0,this.enableUvs&&(this.hasUvs=!0),this.enableColors&&(this.hasColors=!0),e(this)}},this.addBall=function(e,t,i,r,n){var a=this.size*Math.sqrt(r/n),o=i*this.size,s=t*this.size,c=e*this.size,l=Math.floor(o-a);l<1&&(l=1);var u=Math.floor(o+a);u>this.size-1&&(u=this.size-1);var h=Math.floor(s-a);h<1&&(h=1);var d=Math.floor(s+a);d>this.size-1&&(d=this.size-1);var p=Math.floor(c-a);p<1&&(p=1);var f=Math.floor(c+a);f>this.size-1&&(f=this.size-1);var m,v,g,y,x,_,b,w,M,E,S;for(g=l;g<u;g++)for(x=this.size2*g,w=g/this.size-i,M=w*w,v=h;v<d;v++)for(y=x+this.size*v,b=v/this.size-t,E=b*b,m=p;m<f;m++)_=m/this.size-e,(S=r/(1e-6+_*_+E+M)-n)>0&&(this.field[y+m]+=S)},this.addPlaneX=function(e,t){var i,r,n,a,o,s,c,l=this.size,u=this.yd,h=this.zd,d=this.field,p=l*Math.sqrt(e/t);for(p>l&&(p=l),i=0;i<p;i++)if(s=i/l,a=s*s,(o=e/(1e-4+a)-t)>0)for(r=0;r<l;r++)for(c=i+r*u,n=0;n<l;n++)d[h*n+c]+=o},this.addPlaneY=function(e,t){var i,r,n,a,o,s,c,l,u=this.size,h=this.yd,d=this.zd,p=this.field,f=u*Math.sqrt(e/t);for(f>u&&(f=u),r=0;r<f;r++)if(s=r/u,a=s*s,(o=e/(1e-4+a)-t)>0)for(c=r*h,i=0;i<u;i++)for(l=c+i,n=0;n<u;n++)p[d*n+l]+=o},this.addPlaneZ=function(e,t){var i,r,n,a,o,s,c,l,u=this.size,h=this.yd,d=this.zd,p=this.field,f=u*Math.sqrt(e/t);for(f>u&&(f=u),n=0;n<f;n++)if(s=n/u,a=s*s,(o=e/(1e-4+a)-t)>0)for(c=d*n,r=0;r<u;r++)for(l=c+r*h,i=0;i<u;i++)p[l+i]+=o},this.reset=function(){var e;for(e=0;e<this.size3;e++)this.normal_cache[3*e]=0,this.field[e]=0},this.render=function(e){this.begin();for(var t=this.size-2,i=1;i<t;i++)for(var r=this.size2*i,n=(i-this.halfsize)/this.halfsize,a=1;a<t;a++)for(var o=r+this.size*a,s=(a-this.halfsize)/this.halfsize,c=1;c<t;c++){var l=(c-this.halfsize)/this.halfsize,u=o+c;this.polygonize(l,s,n,u,this.isolation,e)}this.end(e)},this.generateGeometry=function(){var e=0,t=new r.N,i=[],n=function(n){var a,o,s,c,l,u,h,d,p,f,m,v,g,y;for(a=0;a<n.count;a++)d=3*a,p=d+1,f=d+2,o=n.positionArray[d],s=n.positionArray[p],c=n.positionArray[f],l=new r._49(o,s,c),o=n.normalArray[d],s=n.normalArray[p],c=n.normalArray[f],u=new r._49(o,s,c),u.normalize(),t.vertices.push(l),i.push(u);for(y=n.count/3,a=0;a<y;a++)d=3*(e+a),p=d+1,f=d+2,m=i[d],v=i[p],g=i[f],h=new r.E(d,p,f,[m,v,g]),t.faces.push(h);e+=y,n.count=0};return this.render(n),t},this.init(e)},r.MarchingCubes.prototype=Object.create(r.S.prototype),r.MarchingCubes.prototype.constructor=r.MarchingCubes,r.edgeTable=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),r.triTable=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),t.a=r.MarchingCubes},function(e,t,i){\"use strict\";var r=i(0);r.MaskPass=function(e,t){this.scene=e,this.camera=t,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1},r.MaskPass.prototype={render:function(e,t,i,r){var n=e.context;n.colorMask(!1,!1,!1,!1),n.depthMask(!1);var a,o;this.inverse?(a=0,o=1):(a=1,o=0),n.enable(n.STENCIL_TEST),n.stencilOp(n.REPLACE,n.REPLACE,n.REPLACE),n.stencilFunc(n.ALWAYS,a,4294967295),n.clearStencil(o),e.render(this.scene,this.camera,i,this.clear),e.render(this.scene,this.camera,t,this.clear),n.colorMask(!0,!0,!0,!0),n.depthMask(!0),n.stencilFunc(n.EQUAL,1,4294967295),n.stencilOp(n.KEEP,n.KEEP,n.KEEP)}},r.ClearMaskPass=function(){this.enabled=!0},r.ClearMaskPass.prototype={render:function(e,t,i,r){var n=e.context;n.disable(n.STENCIL_TEST)}},t.a=r.MaskPass},function(e,t,i){\"use strict\";var r=i(0);r.MirrorShader={uniforms:{tDiffuse:{type:\"t\",value:null},side:{type:\"i\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform int side;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 p = vUv;\",\"if (side == 0){\",\"if (p.x > 0.5) p.x = 1.0 - p.x;\",\"}else if (side == 1){\",\"if (p.x < 0.5) p.x = 1.0 - p.x;\",\"}else if (side == 2){\",\"if (p.y < 0.5) p.y = 1.0 - p.y;\",\"}else if (side == 3){\",\"if (p.y > 0.5) p.y = 1.0 - p.y;\",\"} \",\"vec4 color = texture2D(tDiffuse, p);\",\"gl_FragColor = color;\",\"}\"].join(\"\\n\")},t.a=r.MirrorShader},function(e,t,i){\"use strict\";var r=i(0);r.NormalMapShader={uniforms:{heightMap:{type:\"t\",value:null},resolution:{type:\"v2\",value:new r._48(512,512)},scale:{type:\"v2\",value:new r._48(1,1)},height:{type:\"f\",value:.05}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float height;\",\"uniform vec2 resolution;\",\"uniform sampler2D heightMap;\",\"varying vec2 vUv;\",\"void main() {\",\"float val = texture2D( heightMap, vUv ).x;\",\"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\",\"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\",\"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\",\"}\"].join(\"\\n\")},t.a=r.NormalMapShader},function(e,t,i){\"use strict\";var r=i(0);r.OBJLoader=function(e){this.manager=void 0!==e?e:r.v},r.OBJLoader.prototype={constructor:r.OBJLoader,load:function(e,t,i,n){var a=this;new r.F(a.manager).load(e,function(e){t(a.parse(e))},i,n)},parse:function(e){function t(e){var t=parseInt(e);return 3*(t>=0?t-1:t+p.length/3)}function i(e){var t=parseInt(e);return 3*(t>=0?t-1:t+f.length/3)}function n(e){var t=parseInt(e);return 2*(t>=0?t-1:t+m.length/2)}function a(e,t,i){u.vertices.push(p[e],p[e+1],p[e+2],p[t],p[t+1],p[t+2],p[i],p[i+1],p[i+2])}function o(e,t,i){u.normals.push(f[e],f[e+1],f[e+2],f[t],f[t+1],f[t+2],f[i],f[i+1],f[i+2])}function s(e,t,i){u.uvs.push(m[e],m[e+1],m[t],m[t+1],m[i],m[i+1])}function c(e,r,c,l,u,h,d,p,f,m,v,g){var y,x=t(e),_=t(r),b=t(c);void 0===l?a(x,_,b):(y=t(l),a(x,_,y),a(_,b,y)),void 0!==u&&(x=n(u),_=n(h),b=n(d),void 0===l?s(x,_,b):(y=n(p),s(x,_,y),s(_,b,y))),void 0!==f&&(x=i(f),_=i(m),b=i(v),void 0===l?o(x,_,b):(y=i(g),o(x,_,y),o(_,b,y)))}console.time(\".obj loading time\");var l,u,h,d=[];!1===/^o /gm.test(e)&&(u={vertices:[],normals:[],uvs:[]},h={name:\"\"},l={name:\"\",geometry:u,material:h},d.push(l));for(var p=[],f=[],m=[],v=/v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,g=/vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,y=/vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,x=/f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?/,_=/f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?/,b=/f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/,w=/f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?/,M=e.split(\"\\n\"),E=0;E<M.length;E++){var S=M[E];S=S.trim();var T;0!==S.length&&\"#\"!==S.charAt(0)&&(null!==(T=v.exec(S))?p.push(parseFloat(T[1]),parseFloat(T[2]),parseFloat(T[3])):null!==(T=g.exec(S))?f.push(parseFloat(T[1]),parseFloat(T[2]),parseFloat(T[3])):null!==(T=y.exec(S))?m.push(parseFloat(T[1]),parseFloat(T[2])):null!==(T=x.exec(S))?c(T[1],T[2],T[3],T[4]):null!==(T=_.exec(S))?c(T[2],T[5],T[8],T[11],T[3],T[6],T[9],T[12]):null!==(T=b.exec(S))?c(T[2],T[6],T[10],T[14],T[3],T[7],T[11],T[15],T[4],T[8],T[12],T[16]):null!==(T=w.exec(S))?c(T[2],T[5],T[8],T[11],void 0,void 0,void 0,void 0,T[3],T[6],T[9],T[12]):/^o /.test(S)?(u={vertices:[],normals:[],uvs:[]},h={name:\"\"},l={name:S.substring(2).trim(),geometry:u,material:h},d.push(l)):/^g /.test(S)||(/^usemtl /.test(S)?h.name=S.substring(7).trim():/^mtllib /.test(S)||/^s /.test(S)))}var A,L=new r._12;for(E=0,A=d.length;E<A;E++){l=d[E],u=l.geometry;var C=new r.k;C.addAttribute(\"position\",new r.j(new Float32Array(u.vertices),3)),u.normals.length>0&&C.addAttribute(\"normal\",new r.j(new Float32Array(u.normals),3)),u.uvs.length>0&&C.addAttribute(\"uv\",new r.j(new Float32Array(u.uvs),2)),h=new r._6({color:16711680}),h.name=l.material.name;var R=new r._3(C,h);R.name=l.name,L.add(R)}return console.timeEnd(\".obj loading time\"),L}},t.a=r.OBJLoader},function(e,t,i){\"use strict\";var r=i(0);r._34.ocean_sim_vertex={varying:{vUV:{type:\"v2\"}},vertexShader:[\"varying vec2 vUV;\",\"void main (void) {\",\"vUV = position.xy * 0.5 + 0.5;\",\"gl_Position = vec4(position, 1.0 );\",\"}\"].join(\"\\n\")},r._34.ocean_subtransform={uniforms:{u_input:{type:\"t\",value:null},u_transformSize:{type:\"f\",value:512},u_subtransformSize:{type:\"f\",value:250}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"uniform sampler2D u_input;\",\"uniform float u_transformSize;\",\"uniform float u_subtransformSize;\",\"varying vec2 vUV;\",\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\"return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\"}\",\"void main (void) {\",\"#ifdef HORIZONTAL\",\"float index = vUV.x * u_transformSize - 0.5;\",\"#else\",\"float index = vUV.y * u_transformSize - 0.5;\",\"#endif\",\"float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);\",\"#ifdef HORIZONTAL\",\"vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\"vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\"#else\",\"vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;\",\"vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;\",\"#endif\",\"float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);\",\"vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));\",\"vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);\",\"vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);\",\"gl_FragColor = vec4(outputA, outputB);\",\"}\"].join(\"\\n\")},r._34.ocean_initial_spectrum={uniforms:{u_wind:{type:\"v2\",value:new r._48(10,10)},u_resolution:{type:\"f\",value:512},u_size:{type:\"f\",value:250}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"const float CM = 0.23;\",\"uniform vec2 u_wind;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"float square (float x) {\",\"return x * x;\",\"}\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + square(k / KM)));\",\"}\",\"float tanh (float x) {\",\"return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));\",\"}\",\"void main (void) {\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 K = (2.0 * PI * vec2(n, m)) / u_size;\",\"float k = length(K);\",\"float l_wind = length(u_wind);\",\"float Omega = 0.84;\",\"float kp = G * square(Omega / l_wind);\",\"float c = omega(k) / k;\",\"float cp = omega(kp) / kp;\",\"float Lpm = exp(-1.25 * square(kp / k));\",\"float gamma = 1.7;\",\"float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));\",\"float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));\",\"float Jp = pow(gamma, Gamma);\",\"float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));\",\"float alphap = 0.006 * sqrt(Omega);\",\"float Bl = 0.5 * alphap * cp / c * Fp;\",\"float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);\",\"float uStar = 0.41 * l_wind / log(10.0 / z0);\",\"float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));\",\"float Fm = exp(-0.25 * square(k / KM - 1.0));\",\"float Bh = 0.5 * alpham * CM / c * Fm * Lpm;\",\"float a0 = log(2.0) / 4.0;\",\"float am = 0.13 * uStar / CM;\",\"float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));\",\"float cosPhi = dot(normalize(u_wind), normalize(K));\",\"float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));\",\"float dk = 2.0 * PI / u_size;\",\"float h = sqrt(S / 2.0) * dk;\",\"if (K.x == 0.0 && K.y == 0.0) {\",\"h = 0.0;\",\"}\",\"gl_FragColor = vec4(h, 0.0, 0.0, 0.0);\",\"}\"].join(\"\\n\")},r._34.ocean_phase={uniforms:{u_phases:{type:\"t\",value:null},u_deltaTime:{type:\"f\",value:null},u_resolution:{type:\"f\",value:null},u_size:{type:\"f\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"varying vec2 vUV;\",\"uniform sampler2D u_phases;\",\"uniform float u_deltaTime;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + k * k / KM * KM));\",\"}\",\"void main (void) {\",\"float deltaTime = 1.0 / 60.0;\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\"float phase = texture2D(u_phases, vUV).r;\",\"float deltaPhase = omega(length(waveVector)) * u_deltaTime;\",\"phase = mod(phase + deltaPhase, 2.0 * PI);\",\"gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);\",\"}\"].join(\"\\n\")},r._34.ocean_spectrum={uniforms:{u_size:{type:\"f\",value:null},u_resolution:{type:\"f\",value:null},u_choppiness:{type:\"f\",value:null},u_phases:{type:\"t\",value:null},u_initialSpectrum:{type:\"t\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"varying vec2 vUV;\",\"uniform float u_size;\",\"uniform float u_resolution;\",\"uniform float u_choppiness;\",\"uniform sampler2D u_phases;\",\"uniform sampler2D u_initialSpectrum;\",\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\"return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\"}\",\"vec2 multiplyByI (vec2 z) {\",\"return vec2(-z[1], z[0]);\",\"}\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + k * k / KM * KM));\",\"}\",\"void main (void) {\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\"float phase = texture2D(u_phases, vUV).r;\",\"vec2 phaseVector = vec2(cos(phase), sin(phase));\",\"vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;\",\"vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;\",\"h0Star.y *= -1.0;\",\"vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));\",\"vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;\",\"vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;\",\"if (waveVector.x == 0.0 && waveVector.y == 0.0) {\",\"h = vec2(0.0);\",\"hX = vec2(0.0);\",\"hZ = vec2(0.0);\",\"}\",\"gl_FragColor = vec4(hX + multiplyByI(h), hZ);\",\"}\"].join(\"\\n\")},r._34.ocean_normals={uniforms:{u_displacementMap:{type:\"t\",value:null},u_resolution:{type:\"f\",value:null},u_size:{type:\"f\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"varying vec2 vUV;\",\"uniform sampler2D u_displacementMap;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"void main (void) {\",\"float texel = 1.0 / u_resolution;\",\"float texelSize = u_size / u_resolution;\",\"vec3 center = texture2D(u_displacementMap, vUV).rgb;\",\"vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;\",\"vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;\",\"vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;\",\"vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;\",\"vec3 topRight = cross(right, top);\",\"vec3 topLeft = cross(top, left);\",\"vec3 bottomLeft = cross(left, bottom);\",\"vec3 bottomRight = cross(bottom, right);\",\"gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);\",\"}\"].join(\"\\n\")},r._34.ocean_main={uniforms:{u_displacementMap:{type:\"t\",value:null},u_normalMap:{type:\"t\",value:null},u_geometrySize:{type:\"f\",value:null},u_size:{type:\"f\",value:null},u_projectionMatrix:{type:\"m4\",value:null},u_viewMatrix:{type:\"m4\",value:null},u_cameraPosition:{type:\"v3\",value:null},u_skyColor:{type:\"v3\",value:null},u_oceanColor:{type:\"v3\",value:null},u_sunDirection:{type:\"v3\",value:null},u_exposure:{type:\"f\",value:null}},varying:{vPos:{type:\"v3\"},vUV:{type:\"v2\"}},vertexShader:[\"precision highp float;\",\"varying vec3 vPos;\",\"varying vec2 vUV;\",\"uniform mat4 u_projectionMatrix;\",\"uniform mat4 u_viewMatrix;\",\"uniform float u_size;\",\"uniform float u_geometrySize;\",\"uniform sampler2D u_displacementMap;\",\"void main (void) {\",\"vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);\",\"vPos = newPos;\",\"vUV = uv;\",\"gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);\",\"}\"].join(\"\\n\"),fragmentShader:[\"precision highp float;\",\"varying vec3 vPos;\",\"varying vec2 vUV;\",\"uniform sampler2D u_displacementMap;\",\"uniform sampler2D u_normalMap;\",\"uniform vec3 u_cameraPosition;\",\"uniform vec3 u_oceanColor;\",\"uniform vec3 u_skyColor;\",\"uniform vec3 u_sunDirection;\",\"uniform float u_exposure;\",\"vec3 hdr (vec3 color, float exposure) {\",\"return 1.0 - exp(-color * exposure);\",\"}\",\"void main (void) {\",\"vec3 normal = texture2D(u_normalMap, vUV).rgb;\",\"vec3 view = normalize(u_cameraPosition - vPos);\",\"float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);\",\"vec3 sky = fresnel * u_skyColor;\",\"float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);\",\"vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;\",\"vec3 color = sky + water;\",\"gl_FragColor = vec4(hdr(color, u_exposure), 1.0);\",\"}\"].join(\"\\n\")},t.a=r._34},function(e,t,i){\"use strict\";var r=i(0);r.OrbitControls=function(e,t){function i(){return 2*Math.PI/60/60*I.autoRotateSpeed}function n(){return Math.pow(.95,I.zoomSpeed)}function a(e){H.theta-=e}function o(e){H.phi-=e}function s(e){I.object instanceof r._16?j/=e:I.object instanceof r._14?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom*e)),I.object.updateProjectionMatrix(),W=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),I.enableZoom=!1)}function c(e){I.object instanceof r._16?j*=e:I.object instanceof r._14?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom/e)),I.object.updateProjectionMatrix(),W=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),I.enableZoom=!1)}function l(e){X.set(e.clientX,e.clientY)}function u(e){Q.set(e.clientX,e.clientY)}function h(e){Z.set(e.clientX,e.clientY)}function d(e){q.set(e.clientX,e.clientY),Y.subVectors(q,X);var t=I.domElement===document?I.domElement.body:I.domElement;a(2*Math.PI*Y.x/t.clientWidth*I.rotateSpeed),o(2*Math.PI*Y.y/t.clientHeight*I.rotateSpeed),X.copy(q),I.update()}function p(e){$.set(e.clientX,e.clientY),ee.subVectors($,Q),ee.y>0?s(n()):ee.y<0&&c(n()),Q.copy($),I.update()}function f(e){J.set(e.clientX,e.clientY),K.subVectors(J,Z),re(K.x,K.y),Z.copy(J),I.update()}function m(e){}function v(e){var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?c(n()):t<0&&s(n()),I.update()}function g(e){switch(e.keyCode){case I.keys.UP:re(0,I.keyPanSpeed),I.update();break;case I.keys.BOTTOM:re(0,-I.keyPanSpeed),I.update();break;case I.keys.LEFT:re(I.keyPanSpeed,0),I.update();break;case I.keys.RIGHT:re(-I.keyPanSpeed,0),I.update()}}function y(e){X.set(e.touches[0].pageX,e.touches[0].pageY)}function x(e){var t=e.touches[0].pageX-e.touches[1].pageX,i=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+i*i);Q.set(0,r)}function _(e){Z.set(e.touches[0].pageX,e.touches[0].pageY)}function b(e){q.set(e.touches[0].pageX,e.touches[0].pageY),Y.subVectors(q,X);var t=I.domElement===document?I.domElement.body:I.domElement;a(2*Math.PI*Y.x/t.clientWidth*I.rotateSpeed),o(2*Math.PI*Y.y/t.clientHeight*I.rotateSpeed),X.copy(q),I.update()}function w(e){var t=e.touches[0].pageX-e.touches[1].pageX,i=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+i*i);$.set(0,r),ee.subVectors($,Q),ee.y>0?c(n()):ee.y<0&&s(n()),Q.copy($),I.update()}function M(e){J.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(J,Z),re(K.x,K.y),Z.copy(J),I.update()}function E(e){}function S(e){if(!1!==I.enabled){if(e.preventDefault(),e.button===I.mouseButtons.ORBIT){if(!1===I.enableRotate)return;l(e),B=z.ROTATE}else if(e.button===I.mouseButtons.ZOOM){if(!1===I.enableZoom)return;u(e),B=z.DOLLY}else if(e.button===I.mouseButtons.PAN){if(!1===I.enablePan)return;h(e),B=z.PAN}B!==z.NONE&&(document.addEventListener(\"mousemove\",T,!1),document.addEventListener(\"mouseup\",A,!1),document.addEventListener(\"mouseout\",A,!1),I.dispatchEvent(O))}}function T(e){if(!1!==I.enabled)if(e.preventDefault(),B===z.ROTATE){if(!1===I.enableRotate)return;d(e)}else if(B===z.DOLLY){if(!1===I.enableZoom)return;p(e)}else if(B===z.PAN){if(!1===I.enablePan)return;f(e)}}function A(e){!1!==I.enabled&&(m(e),document.removeEventListener(\"mousemove\",T,!1),document.removeEventListener(\"mouseup\",A,!1),document.removeEventListener(\"mouseout\",A,!1),I.dispatchEvent(F),B=z.NONE)}function L(e){!1===I.enabled||!1===I.enableZoom||B!==z.NONE&&B!==z.ROTATE||(e.preventDefault(),e.stopPropagation(),v(e),I.dispatchEvent(O),I.dispatchEvent(F))}function C(e){!1!==I.enabled&&!1!==I.enableKeys&&!1!==I.enablePan&&g(e)}function R(e){if(!1!==I.enabled){switch(e.touches.length){case 1:if(!1===I.enableRotate)return;y(e),B=z.TOUCH_ROTATE;break;case 2:if(!1===I.enableZoom)return;x(e),B=z.TOUCH_DOLLY;break;case 3:if(!1===I.enablePan)return;_(e),B=z.TOUCH_PAN;break;default:B=z.NONE}B!==z.NONE&&I.dispatchEvent(O)}}function P(e){if(!1!==I.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===I.enableRotate)return;if(B!==z.TOUCH_ROTATE)return;b(e);break;case 2:if(!1===I.enableZoom)return;if(B!==z.TOUCH_DOLLY)return;w(e);break;case 3:if(!1===I.enablePan)return;if(B!==z.TOUCH_PAN)return;M(e);break;default:B=z.NONE}}function D(e){!1!==I.enabled&&(E(e),I.dispatchEvent(F),B=z.NONE)}function U(e){e.preventDefault()}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new r._49,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:r.Y.LEFT,ZOOM:r.Y.MIDDLE,PAN:r.Y.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return V.phi},this.getAzimuthalAngle=function(){return V.theta},this.reset=function(){I.target.copy(I.target0),I.object.position.copy(I.position0),I.object.zoom=I.zoom0,I.object.updateProjectionMatrix(),I.dispatchEvent(N),I.update(),B=z.NONE},this.update=function(){var t=new r._49,n=(new r._18).setFromUnitVectors(e.up,new r._49(0,1,0)),o=n.clone().inverse(),s=new r._49,c=new r._18;return function(){var e=I.object.position;return t.copy(e).sub(I.target),t.applyQuaternion(n),V.setFromVector3(t),I.autoRotate&&B===z.NONE&&a(i()),V.theta+=H.theta,V.phi+=H.phi,V.theta=Math.max(I.minAzimuthAngle,Math.min(I.maxAzimuthAngle,V.theta)),V.phi=Math.max(I.minPolarAngle,Math.min(I.maxPolarAngle,V.phi)),V.makeSafe(),V.radius*=j,V.radius=Math.max(I.minDistance,Math.min(I.maxDistance,V.radius)),I.target.add(k),t.setFromSpherical(V),t.applyQuaternion(o),e.copy(I.target).add(t),I.object.lookAt(I.target),!0===I.enableDamping?(H.theta*=1-I.dampingFactor,H.phi*=1-I.dampingFactor):H.set(0,0,0),j=1,k.set(0,0,0),!!(W||s.distanceToSquared(I.object.position)>G||8*(1-c.dot(I.object.quaternion))>G)&&(I.dispatchEvent(N),s.copy(I.object.position),c.copy(I.object.quaternion),W=!1,!0)}}(),this.dispose=function(){I.domElement.removeEventListener(\"contextmenu\",U,!1),I.domElement.removeEventListener(\"mousedown\",S,!1),I.domElement.removeEventListener(\"mousewheel\",L,!1),I.domElement.removeEventListener(\"MozMousePixelScroll\",L,!1),I.domElement.removeEventListener(\"touchstart\",R,!1),I.domElement.removeEventListener(\"touchend\",D,!1),I.domElement.removeEventListener(\"touchmove\",P,!1),document.removeEventListener(\"mousemove\",T,!1),document.removeEventListener(\"mouseup\",A,!1),document.removeEventListener(\"mouseout\",A,!1),window.removeEventListener(\"keydown\",C,!1)};var I=this,N={type:\"change\"},O={type:\"start\"},F={type:\"end\"},z={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},B=z.NONE,G=1e-6,V=new r._39,H=new r._39,j=1,k=new r._49,W=!1,X=new r._48,q=new r._48,Y=new r._48,Z=new r._48,J=new r._48,K=new r._48,Q=new r._48,$=new r._48,ee=new r._48,te=function(){var e=new r._49;return function(t,i){e.setFromMatrixColumn(i,0),e.multiplyScalar(-t),k.add(e)}}(),ie=function(){var e=new r._49;return function(t,i){e.setFromMatrixColumn(i,1),e.multiplyScalar(t),k.add(e)}}(),re=function(){var e=new r._49;return function(t,i){var n=I.domElement===document?I.domElement.body:I.domElement;if(I.object instanceof r._16){var a=I.object.position;e.copy(a).sub(I.target);var o=e.length();o*=Math.tan(I.object.fov/2*Math.PI/180),te(2*t*o/n.clientHeight,I.object.matrix),ie(2*i*o/n.clientHeight,I.object.matrix)}else I.object instanceof r._14?(te(t*(I.object.right-I.object.left)/I.object.zoom/n.clientWidth,I.object.matrix),ie(i*(I.object.top-I.object.bottom)/I.object.zoom/n.clientHeight,I.object.matrix)):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"),I.enablePan=!1)}}();I.domElement.addEventListener(\"contextmenu\",U,!1),I.domElement.addEventListener(\"mousedown\",S,!1),I.domElement.addEventListener(\"mousewheel\",L,!1),I.domElement.addEventListener(\"MozMousePixelScroll\",L,!1),I.domElement.addEventListener(\"touchstart\",R,!1),I.domElement.addEventListener(\"touchend\",D,!1),I.domElement.addEventListener(\"touchmove\",P,!1),window.addEventListener(\"keydown\",C,!1),this.update()},r.OrbitControls.prototype=Object.create(r.C.prototype),r.OrbitControls.prototype.constructor=r.OrbitControls,Object.defineProperties(r.OrbitControls.prototype,{center:{get:function(){return console.warn(\"THREE.OrbitControls: .center has been renamed to .target\"),this.target}},noZoom:{get:function(){return console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),!this.enableZoom},set:function(e){console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),this.enableZoom=!e}},noRotate:{get:function(){return console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),!this.enableRotate},set:function(e){console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),this.enableRotate=!e}},noPan:{get:function(){return console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),!this.enablePan},set:function(e){console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),this.enablePan=!e}},noKeys:{get:function(){return console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),!this.enableKeys},set:function(e){console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),!this.enableDamping},set:function(e){console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor},set:function(e){console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor=e}}}),t.a=r.OrbitControls},function(e,t,i){\"use strict\";var r=i(0);r.ParallaxShader={modes:{none:\"NO_PARALLAX\",basic:\"USE_BASIC_PARALLAX\",steep:\"USE_STEEP_PARALLAX\",occlusion:\"USE_OCLUSION_PARALLAX\",relief:\"USE_RELIEF_PARALLAX\"},uniforms:{bumpMap:{type:\"t\",value:null},map:{type:\"t\",value:null},parallaxScale:{type:\"f\",value:null},parallaxMinLayers:{type:\"f\",value:null},parallaxMaxLayers:{type:\"f\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"varying vec3 vViewPosition;\",\"varying vec3 vNormal;\",\"void main() {\",\"vUv = uv;\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vViewPosition = -mvPosition.xyz;\",\"vNormal = normalize( normalMatrix * normal );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D bumpMap;\",\"uniform sampler2D map;\",\"uniform float parallaxScale;\",\"uniform float parallaxMinLayers;\",\"uniform float parallaxMaxLayers;\",\"varying vec2 vUv;\",\"varying vec3 vViewPosition;\",\"varying vec3 vNormal;\",\"#ifdef USE_BASIC_PARALLAX\",\"vec2 parallaxMap( in vec3 V ) {\",\"float initialHeight = texture2D( bumpMap, vUv ).r;\",\"vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\",\"return vUv - texCoordOffset;\",\"}\",\"#else\",\"vec2 parallaxMap( in vec3 V ) {\",\"float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\",\"float layerHeight = 1.0 / numLayers;\",\"float currentLayerHeight = 0.0;\",\"vec2 dtex = parallaxScale * V.xy / V.z / numLayers;\",\"vec2 currentTextureCoords = vUv;\",\"float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"for ( int i = 0; i < 30; i += 1 ) {\",\"if ( heightFromTexture <= currentLayerHeight ) {\",\"break;\",\"}\",\"currentLayerHeight += layerHeight;\",\"currentTextureCoords -= dtex;\",\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"}\",\"#ifdef USE_STEEP_PARALLAX\",\"return currentTextureCoords;\",\"#elif defined( USE_RELIEF_PARALLAX )\",\"vec2 deltaTexCoord = dtex / 2.0;\",\"float deltaHeight = layerHeight / 2.0;\",\"currentTextureCoords += deltaTexCoord;\",\"currentLayerHeight -= deltaHeight;\",\"const int numSearches = 5;\",\"for ( int i = 0; i < numSearches; i += 1 ) {\",\"deltaTexCoord /= 2.0;\",\"deltaHeight /= 2.0;\",\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"if( heightFromTexture > currentLayerHeight ) {\",\"currentTextureCoords -= deltaTexCoord;\",\"currentLayerHeight += deltaHeight;\",\"} else {\",\"currentTextureCoords += deltaTexCoord;\",\"currentLayerHeight -= deltaHeight;\",\"}\",\"}\",\"return currentTextureCoords;\",\"#elif defined( USE_OCLUSION_PARALLAX )\",\"vec2 prevTCoords = currentTextureCoords + dtex;\",\"float nextH = heightFromTexture - currentLayerHeight;\",\"float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\"float weight = nextH / ( nextH - prevH );\",\"return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\",\"#else\",\"return vUv;\",\"#endif\",\"}\",\"#endif\",\"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\",\"vec2 texDx = dFdx( vUv );\",\"vec2 texDy = dFdy( vUv );\",\"vec3 vSigmaX = dFdx( surfPosition );\",\"vec3 vSigmaY = dFdy( surfPosition );\",\"vec3 vR1 = cross( vSigmaY, surfNormal );\",\"vec3 vR2 = cross( surfNormal, vSigmaX );\",\"float fDet = dot( vSigmaX, vR1 );\",\"vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\",\"vec3 vProjVtex;\",\"vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\",\"vProjVtex.z = dot( surfNormal, viewPosition );\",\"return parallaxMap( vProjVtex );\",\"}\",\"void main() {\",\"vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\",\"gl_FragColor = texture2D( map, mapUv );\",\"}\"].join(\"\\n\")},t.a=r.ParallaxShader},function(e,t,i){\"use strict\";var r=i(0);r.RGBShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},amount:{type:\"f\",value:.005},angle:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float amount;\",\"uniform float angle;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\"vec4 cr = texture2D(tDiffuse, vUv + offset);\",\"vec4 cga = texture2D(tDiffuse, vUv);\",\"vec4 cb = texture2D(tDiffuse, vUv - offset);\",\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\"}\"].join(\"\\n\")},t.a=r.RGBShiftShader},function(e,t,i){\"use strict\";var r=i(0);r.RenderPass=function(e,t,i,n,a){this.scene=e,this.camera=t,this.overrideMaterial=i,this.clearColor=n,this.clearAlpha=void 0!==a?a:1,this.oldClearColor=new r.m,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1},r.RenderPass.prototype={render:function(e,t,i,r){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),e.render(this.scene,this.camera,i,this.clear),this.clearColor&&e.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}},t.a=r.RenderPass},function(e,t,i){\"use strict\";var r=i(0);r.SSAOShader={uniforms:{tDiffuse:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},size:{type:\"v2\",value:new r._48(512,512)},cameraNear:{type:\"f\",value:1},cameraFar:{type:\"f\",value:100},onlyAO:{type:\"i\",value:0},aoClamp:{type:\"f\",value:.5},lumInfluence:{type:\"f\",value:.5}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float cameraNear;\",\"uniform float cameraFar;\",\"uniform bool onlyAO;\",\"uniform vec2 size;\",\"uniform float aoClamp;\",\"uniform float lumInfluence;\",\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tDepth;\",\"varying vec2 vUv;\",\"#define DL 2.399963229728653\",\"#define EULER 2.718281828459045\",\"const int samples = 8;\",\"const float radius = 5.0;\",\"const bool useNoise = false;\",\"const float noiseAmount = 0.0003;\",\"const float diffArea = 0.4;\",\"const float gDisplace = 0.4;\",\"float unpackDepth( const in vec4 rgba_depth ) {\",\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\"float depth = dot( rgba_depth, bit_shift );\",\"return depth;\",\"}\",\"vec2 rand( const vec2 coord ) {\",\"vec2 noise;\",\"if ( useNoise ) {\",\"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );\",\"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\",\"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\",\"} else {\",\"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\",\"float gg = fract( coord.t * ( size.y / 2.0 ) );\",\"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\",\"}\",\"return ( noise * 2.0  - 1.0 ) * noiseAmount;\",\"}\",\"float readDepth( const in vec2 coord ) {\",\"float cameraFarPlusNear = cameraFar + cameraNear;\",\"float cameraFarMinusNear = cameraFar - cameraNear;\",\"float cameraCoef = 2.0 * cameraNear;\",\"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );\",\"}\",\"float compareDepths( const in float depth1, const in float depth2, inout int far ) {\",\"float garea = 2.0;\",\"float diff = ( depth1 - depth2 ) * 100.0;\",\"if ( diff < gDisplace ) {\",\"garea = diffArea;\",\"} else {\",\"far = 1;\",\"}\",\"float dd = diff - gDisplace;\",\"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );\",\"return gauss;\",\"}\",\"float calcAO( float depth, float dw, float dh ) {\",\"float dd = radius - depth * radius;\",\"vec2 vv = vec2( dw, dh );\",\"vec2 coord1 = vUv + dd * vv;\",\"vec2 coord2 = vUv - dd * vv;\",\"float temp1 = 0.0;\",\"float temp2 = 0.0;\",\"int far = 0;\",\"temp1 = compareDepths( depth, readDepth( coord1 ), far );\",\"if ( far > 0 ) {\",\"temp2 = compareDepths( readDepth( coord2 ), depth, far );\",\"temp1 += ( 1.0 - temp1 ) * temp2;\",\"}\",\"return temp1;\",\"}\",\"void main() {\",\"vec2 noise = rand( vUv );\",\"float depth = readDepth( vUv );\",\"float tt = clamp( depth, aoClamp, 1.0 );\",\"float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );\",\"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\",\"float ao = 0.0;\",\"float dz = 1.0 / float( samples );\",\"float z = 1.0 - dz / 2.0;\",\"float l = 0.0;\",\"for ( int i = 0; i <= samples; i ++ ) {\",\"float r = sqrt( 1.0 - z );\",\"float pw = cos( l ) * r;\",\"float ph = sin( l ) * r;\",\"ao += calcAO( depth, pw * w, ph * h );\",\"z = z - dz;\",\"l = l + DL;\",\"}\",\"ao /= float( samples );\",\"ao = 1.0 - ao;\",\"vec3 color = texture2D( tDiffuse, vUv ).rgb;\",\"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\",\"float lum = dot( color.rgb, lumcoeff );\",\"vec3 luminance = vec3( lum );\",\"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",\"if ( onlyAO ) {\",\"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",\"}\",\"gl_FragColor = vec4( final, 1.0 );\",\"}\"].join(\"\\n\")},t.a=r.SSAOShader},function(e,t,i){\"use strict\";var r=i(0);r.SVGLoader=function(e){this.manager=void 0!==e?e:r.v},r.SVGLoader.prototype={constructor:r.SVGLoader,load:function(e,t,i,n){var a=this,o=new DOMParser;new r._54(a.manager).load(e,function(e){var i=o.parseFromString(e,\"image/svg+xml\");t(i.documentElement)},i,n)}},t.a=r.SVGLoader},function(e,t,i){\"use strict\";var r=i(0);r.SavePass=function(e){void 0===r.CopyShader&&console.error(\"THREE.SavePass relies on THREE.CopyShader\");var t=r.CopyShader;this.textureID=\"tDiffuse\",this.uniforms=r._46.clone(t.uniforms),this.material=new r._35({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),this.renderTarget=e,void 0===this.renderTarget&&(this.renderTargetParameters={minFilter:r.U,magFilter:r.U,format:r._22,stencilBuffer:!1},this.renderTarget=new r._53(window.innerWidth,window.innerHeight,this.renderTargetParameters)),this.enabled=!0,this.needsSwap=!1,this.clear=!1,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.SavePass.prototype={render:function(e,t,i,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i),this.quad.material=this.material,e.render(this.scene,this.camera,this.renderTarget,this.clear)}},t.a=r.SavePass},function(e,t,i){\"use strict\";var r=i(0);r.SepiaShader={uniforms:{tDiffuse:{type:\"t\",value:null},amount:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float amount;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 color = texture2D( tDiffuse, vUv );\",\"vec3 c = color.rgb;\",\"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\",\"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\",\"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\",\"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\",\"}\"].join(\"\\n\")},t.a=r.SepiaShader},function(e,t,i){\"use strict\";var r=i(0);r.ShaderPass=function(e,t){this.textureID=void 0!==t?t:\"tDiffuse\",this.uniforms=r._46.clone(e.uniforms),this.material=new r._35({defines:e.defines||{},uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.ShaderPass.prototype={render:function(e,t,i,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,this.clear)}},t.a=r.ShaderPass},function(e,t,i){\"use strict\";var r=i(0);r.ShaderToon={toon1:{uniforms:{uDirLightPos:{value:new r._49},uDirLightColor:{value:new r.m(15658734)},uAmbientLightColor:{value:new r.m(328965)},uBaseColor:{value:new r.m(16777215)}},vertexShader:[\"varying vec3 vNormal;\",\"varying vec3 vRefract;\",\"void main() {\",\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\"vNormal = normalize( normalMatrix * normal );\",\"vec3 I = worldPosition.xyz - cameraPosition;\",\"vRefract = refract( normalize( I ), worldNormal, 1.02 );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"varying vec3 vRefract;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"float intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\"intensity += length(lightWeighting) * 0.2;\",\"float cameraWeighting = dot( normalize( vNormal ), vRefract );\",\"intensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\"intensity = intensity * 0.2 + 0.3;\",\"if ( intensity < 0.50 ) {\",\"gl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\"} else {\",\"gl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\"}\",\"}\"].join(\"\\n\")},toon2:{uniforms:{uDirLightPos:{value:new r._49},uDirLightColor:{value:new r.m(15658734)},uAmbientLightColor:{value:new r.m(328965)},uBaseColor:{value:new r.m(15658734)},uLineColor1:{value:new r.m(8421504)},uLineColor2:{value:new r.m(0)},uLineColor3:{value:new r.m(0)},uLineColor4:{value:new r.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\"float light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\"gl_FragColor *= vec4( uLineColor1, 1.0 );\",\"}\",\"if ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\"gl_FragColor *= vec4( uLineColor2, 1.0 );\",\"}\",\"}\"].join(\"\\n\")},hatching:{uniforms:{uDirLightPos:{value:new r._49},uDirLightColor:{value:new r.m(15658734)},uAmbientLightColor:{value:new r.m(328965)},uBaseColor:{value:new r.m(16777215)},uLineColor1:{value:new r.m(0)},uLineColor2:{value:new r.m(0)},uLineColor3:{value:new r.m(0)},uLineColor4:{value:new r.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(lightWeighting) < 1.00 ) {\",\"if ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.75 ) {\",\"if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor2, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.50 ) {\",\"if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor3, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.3465 ) {\",\"if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor4, 1.0 );\",\"}\",\"}\",\"}\"].join(\"\\n\")},dotted:{uniforms:{uDirLightPos:{value:new r._49},uDirLightColor:{value:new r.m(15658734)},uAmbientLightColor:{value:new r.m(328965)},uBaseColor:{value:new r.m(16777215)},uLineColor1:{value:new r.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(lightWeighting) < 1.00 ) {\",\"if ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.50 ) {\",\"if ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"}\"].join(\"\\n\")}},t.a=r.ShaderToon},function(e,t,i){\"use strict\";var r=i(0);r.TechnicolorShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\"vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\",\"gl_FragColor = newTex;\",\"}\"].join(\"\\n\")},t.a=r.TechnicolorShader},function(e,t,i){\"use strict\";var r=i(0);r.TexturePass=function(e,t){void 0===r.CopyShader&&console.error(\"THREE.TexturePass relies on THREE.CopyShader\");var i=r.CopyShader;this.uniforms=r._46.clone(i.uniforms),this.uniforms.opacity.value=void 0!==t?t:1,this.uniforms.tDiffuse.value=e,this.material=new r._35({uniforms:this.uniforms,vertexShader:i.vertexShader,fragmentShader:i.fragmentShader}),this.enabled=!0,this.needsSwap=!1,this.camera=new r._14(-1,1,1,-1,0,1),this.scene=new r._31,this.quad=new r._3(new r._17(2,2),null),this.scene.add(this.quad)},r.TexturePass.prototype={render:function(e,t,i,r){this.quad.material=this.material,e.render(this.scene,this.camera,i)}},t.a=r.TexturePass},function(e,t,i){\"use strict\";var r=i(0);r.ToneMapShader={uniforms:{tDiffuse:{type:\"t\",value:null},averageLuminance:{type:\"f\",value:1},luminanceMap:{type:\"t\",value:null},maxLuminance:{type:\"f\",value:16},middleGrey:{type:\"f\",value:.6}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform float middleGrey;\",\"uniform float maxLuminance;\",\"#ifdef ADAPTED_LUMINANCE\",\"uniform sampler2D luminanceMap;\",\"#else\",\"uniform float averageLuminance;\",\"#endif\",\"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);\",\"vec3 ToneMap( vec3 vColor ) {\",\"#ifdef ADAPTED_LUMINANCE\",\"float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\"#else\",\"float fLumAvg = averageLuminance;\",\"#endif\",\"float fLumPixel = dot(vColor, LUM_CONVERT);\",\"float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;\",\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\"return fLumCompressed * vColor;\",\"}\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\"}\"].join(\"\\n\")},t.a=r.ToneMapShader},function(e,t,i){\"use strict\";var r=i(0);r.TriangleBlurShader={uniforms:{texture:{type:\"t\",value:null},delta:{type:\"v2\",value:new r._48(1,1)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#define ITERATIONS 10.0\",\"uniform sampler2D texture;\",\"uniform vec2 delta;\",\"varying vec2 vUv;\",\"float random( vec3 scale, float seed ) {\",\"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\",\"}\",\"void main() {\",\"vec4 color = vec4( 0.0 );\",\"float total = 0.0;\",\"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\",\"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\"float percent = ( t + offset - 0.5 ) / ITERATIONS;\",\"float weight = 1.0 - abs( percent );\",\"color += texture2D( texture, vUv + delta * percent ) * weight;\",\"total += weight;\",\"}\",\"gl_FragColor = color / total;\",\"}\"].join(\"\\n\")},t.a=r.TriangleBlurShader},function(e,t,i){\"use strict\";var r=i(0);r.UnpackDepthRGBAShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"float unpackDepth( const in vec4 rgba_depth ) {\",\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\"float depth = dot( rgba_depth, bit_shift );\",\"return depth;\",\"}\",\"void main() {\",\"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );\",\"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );\",\"}\"].join(\"\\n\")},t.a=r.UnpackDepthRGBAShader},function(e,t,i){\"use strict\";var r=i(0);r.VerticalBlurShader={uniforms:{tDiffuse:{type:\"t\",value:null},v:{type:\"f\",value:1/512}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float v;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=r.VerticalBlurShader},function(e,t,i){\"use strict\";var r=i(0);r.VerticalTiltShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},v:{type:\"f\",value:1/512},r:{type:\"f\",value:.35}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float v;\",\"uniform float r;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"float vv = v * abs( r - vUv.y );\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=r.VerticalTiltShiftShader},function(e,t,i){\"use strict\";var r=i(0);r.VignetteShader={uniforms:{tDiffuse:{type:\"t\",value:null},offset:{type:\"f\",value:1},darkness:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float offset;\",\"uniform float darkness;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\",\"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\"}\"].join(\"\\n\")},t.a=r.VignetteShader},function(e,t,i){\"use strict\";var r=i(0);r.SobelOperatorShader={uniforms:{tDiffuse:{value:null},resolution:{value:new r._48}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\"const mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\",\"const mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\",\"float tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\"float tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\"float tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\"float tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\"float tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\"float tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\"float tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\"float tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\"float tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\"float valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\"Gx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\"Gx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\"float valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\"Gy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\"Gy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\"float G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\"gl_FragColor = vec4( vec3( G ), 1 );\",\"}\"].join(\"\\n\")},t.a=r.SobelOperatorShader}])});","'use strict';\n\n/*\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowErrorTolerant: true,\nthrowError: true, generateStatement: true, peek: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseUnaryExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        FnExprTokens,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        SyntaxTreeDelegate,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        delegate,\n        lookahead,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        RegularExpression: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n    TokenName[Token.RegularExpression] = 'RegularExpression';\n\n    // A function following one of those tokens is an expression.\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n                    'return', 'case', 'delete', 'throw', 'void',\n                    // assignment operators\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n                    '&=', '|=', '^=', ',',\n                    // binary/unary operators\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n                    '<=', '<', '>', '!=', '!=='];\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        // 'const' is specialized as Keyword in V8.\n        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.\n        // Some others are from future reserved words.\n\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\n                (id === 'try') || (id === 'let');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    // 7.4 Comments\n\n    function addComment(type, value, start, end, loc) {\n        var comment, attacher;\n\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (state.lastCommentStart >= start) {\n            return;\n        }\n        state.lastCommentStart = start;\n\n        comment = {\n            type: type,\n            value: value\n        };\n        if (extra.range) {\n            comment.range = [start, end];\n        }\n        if (extra.loc) {\n            comment.loc = loc;\n        }\n        extra.comments.push(comment);\n        if (extra.attachComment) {\n            extra.leadingComments.push(comment);\n            extra.trailingComments.push(comment);\n        }\n    }\n\n    function skipSingleLineComment(offset) {\n        var start, loc, ch, comment;\n\n        start = index - offset;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart - offset\n            }\n        };\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            ++index;\n            if (isLineTerminator(ch)) {\n                if (extra.comments) {\n                    comment = source.slice(start + offset, index - 1);\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    addComment('Line', comment, start, index - 1, loc);\n                }\n                if (ch === 13 && source.charCodeAt(index) === 10) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                return;\n            }\n        }\n\n        if (extra.comments) {\n            comment = source.slice(start + offset, index);\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            addComment('Line', comment, start, index, loc);\n        }\n    }\n\n    function skipMultiLineComment() {\n        var start, loc, ch, comment;\n\n        if (extra.comments) {\n            start = index - 2;\n            loc = {\n                start: {\n                    line: lineNumber,\n                    column: index - lineStart - 2\n                }\n            };\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (isLineTerminator(ch)) {\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                ++index;\n                lineStart = index;\n                if (index >= length) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else if (ch === 0x2A) {\n                // Block comment ends with '*/'.\n                if (source.charCodeAt(index + 1) === 0x2F) {\n                    ++index;\n                    ++index;\n                    if (extra.comments) {\n                        comment = source.slice(start + 2, index - 2);\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        addComment('Block', comment, start, index, loc);\n                    }\n                    return;\n                }\n                ++index;\n            } else {\n                ++index;\n            }\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function skipComment() {\n        var ch, start;\n\n        start = (index === 0);\n        while (index < length) {\n            ch = source.charCodeAt(index);\n\n            if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                start = true;\n            } else if (ch === 0x2F) { // U+002F is '/'\n                ch = source.charCodeAt(index + 1);\n                if (ch === 0x2F) {\n                    ++index;\n                    ++index;\n                    skipSingleLineComment(2);\n                    start = true;\n                } else if (ch === 0x2A) {  // U+002A is '*'\n                    ++index;\n                    ++index;\n                    skipMultiLineComment();\n                } else {\n                    break;\n                }\n            } else if (start && ch === 0x2D) { // U+002D is '-'\n                // U+003E is '>'\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\n                    // '-->' is a single-line comment\n                    index += 3;\n                    skipSingleLineComment(3);\n                } else {\n                    break;\n                }\n            } else if (ch === 0x3C) { // U+003C is '<'\n                if (source.slice(index + 1, index + 4) === '!--') {\n                    ++index; // `<`\n                    ++index; // `!`\n                    ++index; // `-`\n                    ++index; // `-`\n                    skipSingleLineComment(4);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function getEscapedIdentifier() {\n        var ch, id;\n\n        ch = source.charCodeAt(index++);\n        id = String.fromCharCode(ch);\n\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        if (ch === 0x5C) {\n            if (source.charCodeAt(index) !== 0x75) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            ++index;\n            ch = scanHexEscape('u');\n            if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            id = ch;\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            ++index;\n            id += String.fromCharCode(ch);\n\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (ch === 0x5C) {\n                id = id.substr(0, id.length - 1);\n                if (source.charCodeAt(index) !== 0x75) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                ++index;\n                ch = scanHexEscape('u');\n                if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                id += ch;\n            }\n        }\n\n        return id;\n    }\n\n    function getIdentifier() {\n        var start, ch;\n\n        start = index++;\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (ch === 0x5C) {\n                // Blackslash (U+005C) marks Unicode escape sequence.\n                index = start;\n                return getEscapedIdentifier();\n            }\n            if (isIdentifierPart(ch)) {\n                ++index;\n            } else {\n                break;\n            }\n        }\n\n        return source.slice(start, index);\n    }\n\n    function scanIdentifier() {\n        var start, id, type;\n\n        start = index;\n\n        // Backslash (U+005C) starts an escaped character.\n        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            type = Token.Identifier;\n        } else if (isKeyword(id)) {\n            type = Token.Keyword;\n        } else if (id === 'null') {\n            type = Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n            type = Token.BooleanLiteral;\n        } else {\n            type = Token.Identifier;\n        }\n\n        return {\n            type: type,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            code = source.charCodeAt(index),\n            code2,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        switch (code) {\n\n        // Check for most common single-character punctuators.\n        case 0x2E:  // . dot\n        case 0x28:  // ( open bracket\n        case 0x29:  // ) close bracket\n        case 0x3B:  // ; semicolon\n        case 0x2C:  // , comma\n        case 0x7B:  // { open curly brace\n        case 0x7D:  // } close curly brace\n        case 0x5B:  // [\n        case 0x5D:  // ]\n        case 0x3A:  // :\n        case 0x3F:  // ?\n        case 0x7E:  // ~\n            ++index;\n            if (extra.tokenize) {\n                if (code === 0x28) {\n                    extra.openParenToken = extra.tokens.length;\n                } else if (code === 0x7B) {\n                    extra.openCurlyToken = extra.tokens.length;\n                }\n            }\n            return {\n                type: Token.Punctuator,\n                value: String.fromCharCode(code),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n\n        default:\n            code2 = source.charCodeAt(index + 1);\n\n            // '=' (U+003D) marks an assignment or comparison operator.\n            if (code2 === 0x3D) {\n                switch (code) {\n                case 0x2B:  // +\n                case 0x2D:  // -\n                case 0x2F:  // /\n                case 0x3C:  // <\n                case 0x3E:  // >\n                case 0x5E:  // ^\n                case 0x7C:  // |\n                case 0x25:  // %\n                case 0x26:  // &\n                case 0x2A:  // *\n                    index += 2;\n                    return {\n                        type: Token.Punctuator,\n                        value: String.fromCharCode(code) + String.fromCharCode(code2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n\n                case 0x21: // !\n                case 0x3D: // =\n                    index += 2;\n\n                    // !== and ===\n                    if (source.charCodeAt(index) === 0x3D) {\n                        ++index;\n                    }\n                    return {\n                        type: Token.Punctuator,\n                        value: source.slice(start, index),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n                }\n            }\n        }\n\n        // 4-character punctuator: >>>=\n\n        ch4 = source.substr(index, 4);\n\n        if (ch4 === '>>>=') {\n            index += 4;\n            return {\n                type: Token.Punctuator,\n                value: ch4,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        ch3 = ch4.substr(0, 3);\n\n        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: ch3,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // Other 2-character punctuators: ++ -- << >> && ||\n        ch2 = ch3.substr(0, 2);\n\n        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: ch2,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 1-character punctuators: < > = ! + - * % & | ^ /\n        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanHexLiteral(start) {\n        var number = '';\n\n        while (index < length) {\n            if (!isHexDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanOctalLiteral(start) {\n        var number = '0' + source[index++];\n        while (index < length) {\n            if (!isOctalDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: true,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function isImplicitOctalLiteral() {\n        var i, ch;\n\n        // Implicit octal, unless there is a non-octal digit.\n        // (Annex B.1.1 on Numeric Literals)\n        for (i = index + 1; i < length; ++i) {\n            ch = source[i];\n            if (ch === '8' || ch === '9') {\n                return false;\n            }\n            if (!isOctalDigit(ch)) {\n                return true;\n            }\n        }\n\n        return true;\n    }\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    ++index;\n                    return scanHexLiteral(start);\n                }\n                if (isOctalDigit(ch)) {\n                    if (isImplicitOctalLiteral()) {\n                        return scanOctalLiteral(start);\n                    }\n                }\n            }\n\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n            if (isDecimalDigit(source.charCodeAt(index))) {\n                while (isDecimalDigit(source.charCodeAt(index))) {\n                    number += source[index++];\n                }\n            } else {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            startLineNumber: startLineNumber,\n            startLineStart: startLineStart,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function testRegExp(pattern, flags) {\n        var value;\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n        return value;\n    }\n\n    function scanRegExpBody() {\n        var ch, str, classMarker, terminated, body;\n\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        classMarker = false;\n        terminated = false;\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        body = str.substr(1, str.length - 2);\n        return {\n            value: body,\n            literal: str\n        };\n    }\n\n    function scanRegExpFlags() {\n        var ch, str, flags, restore;\n\n        str = '';\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        for (str += '\\\\u'; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                } else {\n                    str += '\\\\';\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        return {\n            value: flags,\n            literal: str\n        };\n    }\n\n    function scanRegExp() {\n        var start, body, flags, pattern, value;\n\n        lookahead = null;\n        skipComment();\n        start = index;\n\n        body = scanRegExpBody();\n        flags = scanRegExpFlags();\n        value = testRegExp(body.value, flags.value);\n\n        if (extra.tokenize) {\n            return {\n                type: Token.RegularExpression,\n                value: value,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        return {\n            literal: body.literal + flags.literal,\n            value: value,\n            start: start,\n            end: index\n        };\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        /* istanbul ignore next */\n        if (!extra.tokenize) {\n            // Pop the previous token, which is likely '/' or '/='\n            if (extra.tokens.length > 0) {\n                token = extra.tokens[extra.tokens.length - 1];\n                if (token.range[0] === pos && token.type === 'Punctuator') {\n                    if (token.value === '/' || token.value === '/=') {\n                        extra.tokens.pop();\n                    }\n                }\n            }\n\n            extra.tokens.push({\n                type: 'RegularExpression',\n                value: regex.literal,\n                range: [pos, index],\n                loc: loc\n            });\n        }\n\n        return regex;\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advanceSlash() {\n        var prevToken,\n            checkToken;\n        // Using the following algorithm:\n        // https://github.com/mozilla/sweet.js/wiki/design\n        prevToken = extra.tokens[extra.tokens.length - 1];\n        if (!prevToken) {\n            // Nothing before that: it cannot be a division.\n            return collectRegex();\n        }\n        if (prevToken.type === 'Punctuator') {\n            if (prevToken.value === ']') {\n                return scanPunctuator();\n            }\n            if (prevToken.value === ')') {\n                checkToken = extra.tokens[extra.openParenToken - 1];\n                if (checkToken &&\n                        checkToken.type === 'Keyword' &&\n                        (checkToken.value === 'if' ||\n                         checkToken.value === 'while' ||\n                         checkToken.value === 'for' ||\n                         checkToken.value === 'with')) {\n                    return collectRegex();\n                }\n                return scanPunctuator();\n            }\n            if (prevToken.value === '}') {\n                // Dividing a function by anything makes little sense,\n                // but we have to check for that.\n                if (extra.tokens[extra.openCurlyToken - 3] &&\n                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {\n                    // Anonymous function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 4];\n                    if (!checkToken) {\n                        return scanPunctuator();\n                    }\n                } else if (extra.tokens[extra.openCurlyToken - 4] &&\n                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {\n                    // Named function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 5];\n                    if (!checkToken) {\n                        return collectRegex();\n                    }\n                } else {\n                    return scanPunctuator();\n                }\n                // checkToken determines whether the function is\n                // a declaration or an expression.\n                if (FnExprTokens.indexOf(checkToken.value) >= 0) {\n                    // It is an expression.\n                    return scanPunctuator();\n                }\n                // It is a declaration.\n                return collectRegex();\n            }\n            return collectRegex();\n        }\n        if (prevToken.type === 'Keyword' && prevToken.value !== 'this') {\n            return collectRegex();\n        }\n        return scanPunctuator();\n    }\n\n    function advance() {\n        var ch;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: index,\n                end: index\n            };\n        }\n\n        ch = source.charCodeAt(index);\n\n        if (isIdentifierStart(ch)) {\n            return scanIdentifier();\n        }\n\n        // Very common: ( and ) and ;\n        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n            return scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (ch === 0x27 || ch === 0x22) {\n            return scanStringLiteral();\n        }\n\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (ch === 0x2E) {\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\n                return scanNumericLiteral();\n            }\n            return scanPunctuator();\n        }\n\n        if (isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        // Slash (/) U+002F can also start a regex.\n        if (extra.tokenize && ch === 0x2F) {\n            return advanceSlash();\n        }\n\n        return scanPunctuator();\n    }\n\n    function collectToken() {\n        var loc, token, range, value;\n\n        skipComment();\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            value = source.slice(token.start, token.end);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: [token.start, token.end],\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function lex() {\n        var token;\n\n        token = lookahead;\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        return token;\n    }\n\n    function peek() {\n        var pos, line, start;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n    }\n\n    function Position(line, column) {\n        this.line = line;\n        this.column = column;\n    }\n\n    function SourceLocation(startLine, startColumn, line, column) {\n        this.start = new Position(startLine, startColumn);\n        this.end = new Position(line, column);\n    }\n\n    SyntaxTreeDelegate = {\n\n        name: 'SyntaxTree',\n\n        processComment: function (node) {\n            var lastChild, trailingComments;\n\n            if (node.type === Syntax.Program) {\n                if (node.body.length > 0) {\n                    return;\n                }\n            }\n\n            if (extra.trailingComments.length > 0) {\n                if (extra.trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.trailingComments;\n                    extra.trailingComments = [];\n                } else {\n                    extra.trailingComments.length = 0;\n                }\n            } else {\n                if (extra.bottomRightStack.length > 0 &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                    delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                }\n            }\n\n            // Eating the stack.\n            while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {\n                lastChild = extra.bottomRightStack.pop();\n            }\n\n            if (lastChild) {\n                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {\n                    node.leadingComments = lastChild.leadingComments;\n                    delete lastChild.leadingComments;\n                }\n            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {\n                node.leadingComments = extra.leadingComments;\n                extra.leadingComments = [];\n            }\n\n\n            if (trailingComments) {\n                node.trailingComments = trailingComments;\n            }\n\n            extra.bottomRightStack.push(node);\n        },\n\n        markEnd: function (node, startToken) {\n            if (extra.range) {\n                node.range = [startToken.start, index];\n            }\n            if (extra.loc) {\n                node.loc = new SourceLocation(\n                    startToken.startLineNumber === undefined ?  startToken.lineNumber : startToken.startLineNumber,\n                    startToken.start - (startToken.startLineStart === undefined ?  startToken.lineStart : startToken.startLineStart),\n                    lineNumber,\n                    index - lineStart\n                );\n                this.postProcess(node);\n            }\n\n            if (extra.attachComment) {\n                this.processComment(node);\n            }\n            return node;\n        },\n\n        postProcess: function (node) {\n            if (extra.source) {\n                node.loc.source = extra.source;\n            }\n            return node;\n        },\n\n        createArrayExpression: function (elements) {\n            return {\n                type: Syntax.ArrayExpression,\n                elements: elements\n            };\n        },\n\n        createAssignmentExpression: function (operator, left, right) {\n            return {\n                type: Syntax.AssignmentExpression,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBinaryExpression: function (operator, left, right) {\n            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :\n                        Syntax.BinaryExpression;\n            return {\n                type: type,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBlockStatement: function (body) {\n            return {\n                type: Syntax.BlockStatement,\n                body: body\n            };\n        },\n\n        createBreakStatement: function (label) {\n            return {\n                type: Syntax.BreakStatement,\n                label: label\n            };\n        },\n\n        createCallExpression: function (callee, args) {\n            return {\n                type: Syntax.CallExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createCatchClause: function (param, body) {\n            return {\n                type: Syntax.CatchClause,\n                param: param,\n                body: body\n            };\n        },\n\n        createConditionalExpression: function (test, consequent, alternate) {\n            return {\n                type: Syntax.ConditionalExpression,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createContinueStatement: function (label) {\n            return {\n                type: Syntax.ContinueStatement,\n                label: label\n            };\n        },\n\n        createDebuggerStatement: function () {\n            return {\n                type: Syntax.DebuggerStatement\n            };\n        },\n\n        createDoWhileStatement: function (body, test) {\n            return {\n                type: Syntax.DoWhileStatement,\n                body: body,\n                test: test\n            };\n        },\n\n        createEmptyStatement: function () {\n            return {\n                type: Syntax.EmptyStatement\n            };\n        },\n\n        createExpressionStatement: function (expression) {\n            return {\n                type: Syntax.ExpressionStatement,\n                expression: expression\n            };\n        },\n\n        createForStatement: function (init, test, update, body) {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        },\n\n        createForInStatement: function (left, right, body) {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        },\n\n        createFunctionDeclaration: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionDeclaration,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createFunctionExpression: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionExpression,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createIdentifier: function (name) {\n            return {\n                type: Syntax.Identifier,\n                name: name\n            };\n        },\n\n        createIfStatement: function (test, consequent, alternate) {\n            return {\n                type: Syntax.IfStatement,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createLabeledStatement: function (label, body) {\n            return {\n                type: Syntax.LabeledStatement,\n                label: label,\n                body: body\n            };\n        },\n\n        createLiteral: function (token) {\n            return {\n                type: Syntax.Literal,\n                value: token.value,\n                raw: source.slice(token.start, token.end)\n            };\n        },\n\n        createMemberExpression: function (accessor, object, property) {\n            return {\n                type: Syntax.MemberExpression,\n                computed: accessor === '[',\n                object: object,\n                property: property\n            };\n        },\n\n        createNewExpression: function (callee, args) {\n            return {\n                type: Syntax.NewExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createObjectExpression: function (properties) {\n            return {\n                type: Syntax.ObjectExpression,\n                properties: properties\n            };\n        },\n\n        createPostfixExpression: function (operator, argument) {\n            return {\n                type: Syntax.UpdateExpression,\n                operator: operator,\n                argument: argument,\n                prefix: false\n            };\n        },\n\n        createProgram: function (body) {\n            return {\n                type: Syntax.Program,\n                body: body\n            };\n        },\n\n        createProperty: function (kind, key, value) {\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: value,\n                kind: kind\n            };\n        },\n\n        createReturnStatement: function (argument) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: argument\n            };\n        },\n\n        createSequenceExpression: function (expressions) {\n            return {\n                type: Syntax.SequenceExpression,\n                expressions: expressions\n            };\n        },\n\n        createSwitchCase: function (test, consequent) {\n            return {\n                type: Syntax.SwitchCase,\n                test: test,\n                consequent: consequent\n            };\n        },\n\n        createSwitchStatement: function (discriminant, cases) {\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        },\n\n        createThisExpression: function () {\n            return {\n                type: Syntax.ThisExpression\n            };\n        },\n\n        createThrowStatement: function (argument) {\n            return {\n                type: Syntax.ThrowStatement,\n                argument: argument\n            };\n        },\n\n        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {\n            return {\n                type: Syntax.TryStatement,\n                block: block,\n                guardedHandlers: guardedHandlers,\n                handlers: handlers,\n                finalizer: finalizer\n            };\n        },\n\n        createUnaryExpression: function (operator, argument) {\n            if (operator === '++' || operator === '--') {\n                return {\n                    type: Syntax.UpdateExpression,\n                    operator: operator,\n                    argument: argument,\n                    prefix: true\n                };\n            }\n            return {\n                type: Syntax.UnaryExpression,\n                operator: operator,\n                argument: argument,\n                prefix: true\n            };\n        },\n\n        createVariableDeclaration: function (declarations, kind) {\n            return {\n                type: Syntax.VariableDeclaration,\n                declarations: declarations,\n                kind: kind\n            };\n        },\n\n        createVariableDeclarator: function (id, init) {\n            return {\n                type: Syntax.VariableDeclarator,\n                id: id,\n                init: init\n            };\n        },\n\n        createWhileStatement: function (test, body) {\n            return {\n                type: Syntax.WhileStatement,\n                test: test,\n                body: body\n            };\n        },\n\n        createWithStatement: function (object, body) {\n            return {\n                type: Syntax.WithStatement,\n                object: object,\n                body: body\n            };\n        }\n    };\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    assert(index < args.length, 'Message reference must be in range');\n                    return args[index];\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.start;\n            error.lineNumber = token.lineNumber;\n            error.column = token.start - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        error.description = msg;\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var op;\n\n        if (lookahead.type !== Token.Punctuator) {\n            return false;\n        }\n        op = lookahead.value;\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var line, oldIndex = index, oldLineNumber = lineNumber,\n            oldLineStart = lineStart, oldLookahead = lookahead;\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B || match(';')) {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            index = oldIndex;\n            lineNumber = oldLineNumber;\n            lineStart = oldLineStart;\n            lookahead = oldLookahead;\n            return;\n        }\n\n        if (lookahead.type !== Token.EOF && !match('}')) {\n            throwUnexpected(lookahead);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [], startToken;\n\n        startToken = lookahead;\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        lex();\n\n        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body, startToken;\n\n        previousStrict = strict;\n        startToken = lookahead;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);\n    }\n\n    function parseObjectPropertyKey() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return delegate.markEnd(delegate.createLiteral(token), startToken);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, value, param, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                value = parsePropertyFunction([]);\n                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);\n            }\n            if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead;\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    value = parsePropertyFunction([]);\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    value = parsePropertyFunction(param, token);\n                }\n                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);\n            }\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);\n        }\n        if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, key, kind, map = {}, toString = String, startToken;\n\n        startToken = lookahead;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n\n            key = '$' + name;\n            if (Object.prototype.hasOwnProperty.call(map, key)) {\n                if (map[key] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[key] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[key] |= kind;\n            } else {\n                map[key] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var type, token, expr, startToken;\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        type = lookahead.type;\n        startToken = lookahead;\n\n        if (type === Token.Identifier) {\n            expr =  delegate.createIdentifier(lex().value);\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && lookahead.octal) {\n                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);\n            }\n            expr = delegate.createLiteral(lex());\n        } else if (type === Token.Keyword) {\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n            if (matchKeyword('this')) {\n                lex();\n                expr = delegate.createThisExpression();\n            } else {\n                throwUnexpected(lex());\n            }\n        } else if (type === Token.BooleanLiteral) {\n            token = lex();\n            token.value = (token.value === 'true');\n            expr = delegate.createLiteral(token);\n        } else if (type === Token.NullLiteral) {\n            token = lex();\n            token.value = null;\n            expr = delegate.createLiteral(token);\n        } else if (match('/') || match('/=')) {\n            if (typeof extra.tokens !== 'undefined') {\n                expr = delegate.createLiteral(collectRegex());\n            } else {\n                expr = delegate.createLiteral(scanRegExp());\n            }\n            peek();\n        } else {\n            throwUnexpected(lex());\n        }\n\n        return delegate.markEnd(expr, startToken);\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var callee, args, startToken;\n\n        startToken = lookahead;\n        expectKeyword('new');\n        callee = parseLeftHandSideExpression();\n        args = match('(') ? parseArguments() : [];\n\n        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr, args, property, startToken, previousAllowIn = state.allowIn;\n\n        startToken = lookahead;\n        state.allowIn = true;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        for (;;) {\n            if (match('.')) {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            } else if (match('(')) {\n                args = parseArguments();\n                expr = delegate.createCallExpression(expr, args);\n            } else if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                break;\n            }\n            delegate.markEnd(expr, startToken);\n        }\n        state.allowIn = previousAllowIn;\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var expr, property, startToken;\n        assert(state.allowIn, 'callee of new expression always allow in keyword.');\n\n        startToken = lookahead;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            }\n            delegate.markEnd(expr, startToken);\n        }\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr, token, startToken = lookahead;\n\n        expr = parseLeftHandSideExpressionAllowCall();\n\n        if (lookahead.type === Token.Punctuator) {\n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n\n                if (!isLeftHandSide(expr)) {\n                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n                }\n\n                token = lex();\n                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr, startToken;\n\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\n            expr = parsePostfixExpression();\n        } else if (match('++') || match('--')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (match('+') || match('-') || match('~') || match('!')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n        } else {\n            expr = parsePostfixExpression();\n        }\n\n        return expr;\n    }\n\n    function binaryPrecedence(token, allowIn) {\n        var prec = 0;\n\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return 0;\n        }\n\n        switch (token.value) {\n        case '||':\n            prec = 1;\n            break;\n\n        case '&&':\n            prec = 2;\n            break;\n\n        case '|':\n            prec = 3;\n            break;\n\n        case '^':\n            prec = 4;\n            break;\n\n        case '&':\n            prec = 5;\n            break;\n\n        case '==':\n        case '!=':\n        case '===':\n        case '!==':\n            prec = 6;\n            break;\n\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n        case 'instanceof':\n            prec = 7;\n            break;\n\n        case 'in':\n            prec = allowIn ? 7 : 0;\n            break;\n\n        case '<<':\n        case '>>':\n        case '>>>':\n            prec = 8;\n            break;\n\n        case '+':\n        case '-':\n            prec = 9;\n            break;\n\n        case '*':\n        case '/':\n        case '%':\n            prec = 11;\n            break;\n\n        default:\n            break;\n        }\n\n        return prec;\n    }\n\n    // 11.5 Multiplicative Operators\n    // 11.6 Additive Operators\n    // 11.7 Bitwise Shift Operators\n    // 11.8 Relational Operators\n    // 11.9 Equality Operators\n    // 11.10 Binary Bitwise Operators\n    // 11.11 Binary Logical Operators\n\n    function parseBinaryExpression() {\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n        marker = lookahead;\n        left = parseUnaryExpression();\n\n        token = lookahead;\n        prec = binaryPrecedence(token, state.allowIn);\n        if (prec === 0) {\n            return left;\n        }\n        token.prec = prec;\n        lex();\n\n        markers = [marker, lookahead];\n        right = parseUnaryExpression();\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\n\n            // Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                expr = delegate.createBinaryExpression(operator, left, right);\n                markers.pop();\n                marker = markers[markers.length - 1];\n                delegate.markEnd(expr, marker);\n                stack.push(expr);\n            }\n\n            // Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(lookahead);\n            expr = parseUnaryExpression();\n            stack.push(expr);\n        }\n\n        // Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        markers.pop();\n        while (i > 1) {\n            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n            marker = markers.pop();\n            delegate.markEnd(expr, marker);\n        }\n\n        return expr;\n    }\n\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent, alternate, startToken;\n\n        startToken = lookahead;\n\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n            alternate = parseAssignmentExpression();\n\n            expr = delegate.createConditionalExpression(expr, consequent, alternate);\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, left, right, node, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        node = left = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(left)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            token = lex();\n            right = parseAssignmentExpression();\n            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);\n        }\n\n        return node;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr, startToken = lookahead;\n\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createBlockStatement(block), startToken);\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseVariableDeclaration(kind) {\n        var init = null, id, startToken;\n\n        startToken = lookahead;\n        id = parseVariableIdentifier();\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return delegate.createVariableDeclaration(declarations, 'var');\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n        return delegate.createEmptyStatement();\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n        consumeSemicolon();\n        return delegate.createExpressionStatement(expr);\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return delegate.createIfStatement(test, consequent, alternate);\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return delegate.createDoWhileStatement(body, test);\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return delegate.createWhileStatement(test, body);\n    }\n\n    function parseForVariableDeclaration() {\n        var token, declarations, startToken;\n\n        startToken = lookahead;\n        token = lex();\n        declarations = parseVariableDeclarationList();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = previousAllowIn;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = previousAllowIn;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return (typeof left === 'undefined') ?\n                delegate.createForStatement(init, test, update, body) :\n                delegate.createForInStatement(left, right, body);\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var label = null, key;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return delegate.createContinueStatement(label);\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var label = null, key;\n\n        expectKeyword('break');\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return delegate.createBreakStatement(label);\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source.charCodeAt(index) === 0x20) {\n            if (isIdentifierStart(source.charCodeAt(index + 1))) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return delegate.createReturnStatement(argument);\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return delegate.createReturnStatement(null);\n        }\n\n        if (!match(';')) {\n            if (!match('}') && lookahead.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return delegate.createReturnStatement(argument);\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            // TODO(ikarienator): Should we update the test cases instead?\n            skipComment();\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return delegate.createWithStatement(object, body);\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test, consequent = [], statement, startToken;\n\n        startToken = lookahead;\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            consequent.push(statement);\n        }\n\n        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return delegate.createSwitchStatement(discriminant, cases);\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return delegate.createSwitchStatement(discriminant, cases);\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return delegate.createThrowStatement(argument);\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param, body, startToken;\n\n        startToken = lookahead;\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead);\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n        body = parseBlock();\n        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return delegate.createTryStatement(block, [], handlers, finalizer);\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return delegate.createDebuggerStatement();\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var type = lookahead.type,\n            expr,\n            labeledBody,\n            key,\n            startToken;\n\n        if (type === Token.EOF) {\n            throwUnexpected(lookahead);\n        }\n\n        if (type === Token.Punctuator && lookahead.value === '{') {\n            return parseBlock();\n        }\n\n        startToken = lookahead;\n\n        if (type === Token.Punctuator) {\n            switch (lookahead.value) {\n            case ';':\n                return delegate.markEnd(parseEmptyStatement(), startToken);\n            case '(':\n                return delegate.markEnd(parseExpressionStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        if (type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'break':\n                return delegate.markEnd(parseBreakStatement(), startToken);\n            case 'continue':\n                return delegate.markEnd(parseContinueStatement(), startToken);\n            case 'debugger':\n                return delegate.markEnd(parseDebuggerStatement(), startToken);\n            case 'do':\n                return delegate.markEnd(parseDoWhileStatement(), startToken);\n            case 'for':\n                return delegate.markEnd(parseForStatement(), startToken);\n            case 'function':\n                return delegate.markEnd(parseFunctionDeclaration(), startToken);\n            case 'if':\n                return delegate.markEnd(parseIfStatement(), startToken);\n            case 'return':\n                return delegate.markEnd(parseReturnStatement(), startToken);\n            case 'switch':\n                return delegate.markEnd(parseSwitchStatement(), startToken);\n            case 'throw':\n                return delegate.markEnd(parseThrowStatement(), startToken);\n            case 'try':\n                return delegate.markEnd(parseTryStatement(), startToken);\n            case 'var':\n                return delegate.markEnd(parseVariableStatement(), startToken);\n            case 'while':\n                return delegate.markEnd(parseWhileStatement(), startToken);\n            case 'with':\n                return delegate.markEnd(parseWithStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            key = '$' + expr.name;\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[key] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[key];\n            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);\n        }\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        while (index < length) {\n            if (lookahead.type !== Token.StringLiteral) {\n                break;\n            }\n            token = lookahead;\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);\n    }\n\n    function parseParams(firstRestricted) {\n        var param, params = [], token, stricted, paramSet, key, message;\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead;\n                param = parseVariableIdentifier();\n                key = '$' + token.value;\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[key] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return {\n            params: params,\n            stricted: stricted,\n            firstRestricted: firstRestricted,\n            message: message\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword('function');\n        token = lookahead;\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;\n\n        startToken = lookahead;\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead;\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        if (lookahead.type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(lookahead.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (lookahead.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead;\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            /* istanbul ignore if */\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var body, startToken;\n\n        skipComment();\n        peek();\n        startToken = lookahead;\n        strict = false;\n\n        body = parseSourceElements();\n        return delegate.markEnd(delegate.createProgram(body), startToken);\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function tokenize(code, options) {\n        var toString,\n            token,\n            tokens;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n\n        // Options matching.\n        options = options || {};\n\n        // Of course we collect tokens here.\n        options.tokens = true;\n        extra.tokens = [];\n        extra.tokenize = true;\n        // The following two fields are necessary to compute the Regex tokens.\n        extra.openParenToken = -1;\n        extra.openCurlyToken = -1;\n\n        extra.range = (typeof options.range === 'boolean') && options.range;\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\n\n        if (typeof options.comment === 'boolean' && options.comment) {\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\n            extra.errors = [];\n        }\n\n        try {\n            peek();\n            if (lookahead.type === Token.EOF) {\n                return extra.tokens;\n            }\n\n            token = lex();\n            while (lookahead.type !== Token.EOF) {\n                try {\n                    token = lex();\n                } catch (lexError) {\n                    token = lookahead;\n                    if (extra.errors) {\n                        extra.errors.push(lexError);\n                        // We have to break on the first error\n                        // to avoid infinite loops.\n                        break;\n                    } else {\n                        throw lexError;\n                    }\n                }\n            }\n\n            filterTokenLocation();\n            tokens = extra.tokens;\n            if (typeof extra.comments !== 'undefined') {\n                tokens.comments = extra.comments;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                tokens.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n        return tokens;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\n\n            if (extra.loc && options.source !== null && options.source !== undefined) {\n                extra.source = toString(options.source);\n            }\n\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n            if (extra.attachComment) {\n                extra.range = true;\n                extra.comments = [];\n                extra.bottomRightStack = [];\n                extra.trailingComments = [];\n                extra.leadingComments = [];\n            }\n        }\n\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with *.json manifests.\n    exports.version = '1.2.5';\n\n    exports.tokenize = tokenize;\n\n    exports.parse = parse;\n\n    // Deep copy.\n   /* istanbul ignore next */\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","'use strict';\n\n\"use strict\"\n\nvar esprima = require(\"esprima\")\nvar uniq = require(\"uniq\")\n\nvar PREFIX_COUNTER = 0\n\nfunction CompiledArgument(name, lvalue, rvalue) {\n  this.name = name\n  this.lvalue = lvalue\n  this.rvalue = rvalue\n  this.count = 0\n}\n\nfunction CompiledRoutine(body, args, thisVars, localVars) {\n  this.body = body\n  this.args = args\n  this.thisVars = thisVars\n  this.localVars = localVars\n}\n\nfunction isGlobal(identifier) {\n  if(identifier === \"eval\") {\n    throw new Error(\"cwise-parser: eval() not allowed\")\n  }\n  if(typeof window !== \"undefined\") {\n    return identifier in window\n  } else if(typeof global !== \"undefined\") {\n    return identifier in global\n  } else if(typeof self !== \"undefined\") {\n    return identifier in self\n  } else {\n    return false\n  }\n}\n\nfunction getArgNames(ast) {\n  var params = ast.body[0].expression.callee.params\n  var names = new Array(params.length)\n  for(var i=0; i<params.length; ++i) {\n    names[i] = params[i].name\n  }\n  return names\n}\n\nfunction preprocess(func) {\n  var src = [\"(\", func, \")()\"].join(\"\")\n  var ast = esprima.parse(src, { range: true })\n  \n  //Compute new prefix\n  var prefix = \"_inline_\" + (PREFIX_COUNTER++) + \"_\"\n  \n  //Parse out arguments\n  var argNames = getArgNames(ast)\n  var compiledArgs = new Array(argNames.length)\n  for(var i=0; i<argNames.length; ++i) {\n    compiledArgs[i] = new CompiledArgument([prefix, \"arg\", i, \"_\"].join(\"\"), false, false)\n  }\n  \n  //Create temporary data structure for source rewriting\n  var exploded = new Array(src.length)\n  for(var i=0, n=src.length; i<n; ++i) {\n    exploded[i] = src.charAt(i)\n  }\n  \n  //Local variables\n  var localVars = []\n  var thisVars = []\n  var computedThis = false\n  \n  //Retrieves a local variable\n  function createLocal(id) {\n    var nstr = prefix + id.replace(/\\_/g, \"__\")\n    localVars.push(nstr)\n    return nstr\n  }\n  \n  //Creates a this variable\n  function createThisVar(id) {\n    var nstr = \"this_\" + id.replace(/\\_/g, \"__\")\n    thisVars.push(nstr)\n    return nstr\n  }\n  \n  //Rewrites an ast node\n  function rewrite(node, nstr) {\n    var lo = node.range[0], hi = node.range[1]\n    for(var i=lo+1; i<hi; ++i) {\n      exploded[i] = \"\"\n    }\n    exploded[lo] = nstr\n  }\n  \n  //Remove any underscores\n  function escapeString(str) {\n    return \"'\"+(str.replace(/\\_/g, \"\\\\_\").replace(/\\'/g, \"\\'\"))+\"'\"\n  }\n  \n  //Returns the source of an identifier\n  function source(node) {\n    return exploded.slice(node.range[0], node.range[1]).join(\"\")\n  }\n  \n  //Computes the usage of a node\n  var LVALUE = 1\n  var RVALUE = 2\n  function getUsage(node) {\n    if(node.parent.type === \"AssignmentExpression\") {\n      if(node.parent.left === node) {\n        if(node.parent.operator === \"=\") {\n          return LVALUE\n        }\n        return LVALUE|RVALUE\n      }\n    }\n    if(node.parent.type === \"UpdateExpression\") {\n      return LVALUE|RVALUE\n    }\n    return RVALUE\n  }\n  \n  //Handle visiting a node\n  (function visit(node, parent) {\n    node.parent = parent\n    if(node.type === \"MemberExpression\") {\n      //Handle member expression\n      if(node.computed) {\n        visit(node.object, node)\n        visit(node.property, node)\n      } else if(node.object.type === \"ThisExpression\") {\n        rewrite(node, createThisVar(node.property.name))\n      } else {\n        visit(node.object, node)\n      }\n    } else if(node.type === \"ThisExpression\") {\n      throw new Error(\"cwise-parser: Computed this is not allowed\")\n    } else if(node.type === \"Identifier\") {\n      //Handle identifier\n      var name = node.name\n      var argNo = argNames.indexOf(name)\n      if(argNo >= 0) {\n        var carg = compiledArgs[argNo]\n        var usage = getUsage(node)\n        if(usage & LVALUE) {\n          carg.lvalue = true\n        }\n        if(usage & RVALUE) {\n          carg.rvalue = true\n        }\n        ++carg.count\n        rewrite(node, carg.name)\n      } else if(isGlobal(name)) {\n        //Don't rewrite globals\n      } else {\n        rewrite(node, createLocal(name))\n      }\n    } else if(node.type === \"Literal\") {\n      if(typeof node.value === \"string\") {\n        rewrite(node, escapeString(node.value))\n      }\n    } else if(node.type === \"WithStatement\") {\n      throw new Error(\"cwise-parser: with() statements not allowed\")\n    } else {\n      //Visit all children\n      var keys = Object.keys(node)\n      for(var i=0, n=keys.length; i<n; ++i) {\n        if(keys[i] === \"parent\") {\n          continue\n        }\n        var value = node[keys[i]]\n        if(value) {\n          if(value instanceof Array) {\n            for(var j=0; j<value.length; ++j) {\n              if(value[j] && typeof value[j].type === \"string\") {\n                visit(value[j], node)\n              }\n            }\n          } else if(typeof value.type === \"string\") {\n            visit(value, node)\n          }\n        }\n      }\n    }\n  })(ast.body[0].expression.callee.body, undefined)\n  \n  //Remove duplicate variables\n  uniq(localVars)\n  uniq(thisVars)\n  \n  //Return body\n  var routine = new CompiledRoutine(source(ast.body[0].expression.callee.body), compiledArgs, thisVars, localVars)\n  return routine\n}\n\nmodule.exports = preprocess","'use strict';\n\n\"use strict\"\n\nvar parse   = require(\"cwise-parser\")\nvar compile = require(\"cwise-compiler\")\n\nvar REQUIRED_FIELDS = [ \"args\", \"body\" ]\nvar OPTIONAL_FIELDS = [ \"pre\", \"post\", \"printCode\", \"funcName\", \"blockSize\" ]\n\nfunction createCWise(user_args) {\n  //Check parameters\n  for(var id in user_args) {\n    if(REQUIRED_FIELDS.indexOf(id) < 0 &&\n       OPTIONAL_FIELDS.indexOf(id) < 0) {\n      console.warn(\"cwise: Unknown argument '\"+id+\"' passed to expression compiler\")\n    }\n  }\n  for(var i=0; i<REQUIRED_FIELDS.length; ++i) {\n    if(!user_args[REQUIRED_FIELDS[i]]) {\n      throw new Error(\"cwise: Missing argument: \" + REQUIRED_FIELDS[i])\n    }\n  }\n  \n  //Parse blocks\n  return compile({\n    args:       user_args.args,\n    pre:        parse(user_args.pre || function(){}),\n    body:       parse(user_args.body),\n    post:       parse(user_args.post || function(){}),\n    debug:      !!user_args.printCode,\n    funcName:   user_args.funcName || user_args.body.name || \"cwise\",\n    blockSize:  user_args.blockSize || 64\n  })\n}\n\nmodule.exports = createCWise\n","'use strict';\n\nvar bits = require('bit-twiddle')\r\n\r\nfunction fft(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {\r\n  dir |= 0\r\n  nrows |= 0\r\n  ncols |= 0\r\n  x_ptr |= 0\r\n  y_ptr |= 0\r\n  if(bits.isPow2(ncols)) {\r\n    fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr)\r\n  } else {\r\n    fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr)\r\n  }\r\n}\r\nmodule.exports = fft\r\n\r\nfunction scratchMemory(n) {\r\n  if(bits.isPow2(n)) {\r\n    return 0\r\n  }\r\n  return 2 * n + 4 * bits.nextPow2(2*n + 1)\r\n}\r\nmodule.exports.scratchMemory = scratchMemory\r\n\r\n\r\n//Radix 2 FFT Adapted from Paul Bourke's C Implementation\r\nfunction fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr) {\r\n  dir |= 0\r\n  nrows |= 0\r\n  ncols |= 0\r\n  x_ptr |= 0\r\n  y_ptr |= 0\r\n  var nn,m,i,i1,j,k,i2,l,l1,l2\r\n  var c1,c2,t,t1,t2,u1,u2,z,row,a,b,c,d,k1,k2,k3\r\n  \r\n  // Calculate the number of points\r\n  nn = ncols\r\n  m = bits.log2(nn)\r\n  \r\n  for(row=0; row<nrows; ++row) {  \r\n    // Do the bit reversal\r\n    i2 = nn >> 1;\r\n    j = 0;\r\n    for(i=0;i<nn-1;i++) {\r\n      if(i < j) {\r\n        t = buffer[x_ptr+i]\r\n        buffer[x_ptr+i] = buffer[x_ptr+j]\r\n        buffer[x_ptr+j] = t\r\n        t = buffer[y_ptr+i]\r\n        buffer[y_ptr+i] = buffer[y_ptr+j]\r\n        buffer[y_ptr+j] = t\r\n      }\r\n      k = i2\r\n      while(k <= j) {\r\n        j -= k\r\n        k >>= 1\r\n      }\r\n      j += k\r\n    }\r\n    \r\n    // Compute the FFT\r\n    c1 = -1.0\r\n    c2 = 0.0\r\n    l2 = 1\r\n    for(l=0;l<m;l++) {\r\n      l1 = l2\r\n      l2 <<= 1\r\n      u1 = 1.0\r\n      u2 = 0.0\r\n      for(j=0;j<l1;j++) {\r\n        for(i=j;i<nn;i+=l2) {\r\n          i1 = i + l1\r\n          a = buffer[x_ptr+i1]\r\n          b = buffer[y_ptr+i1]\r\n          c = buffer[x_ptr+i]\r\n          d = buffer[y_ptr+i]\r\n          k1 = u1 * (a + b)\r\n          k2 = a * (u2 - u1)\r\n          k3 = b * (u1 + u2)\r\n          t1 = k1 - k3\r\n          t2 = k1 + k2\r\n          buffer[x_ptr+i1] = c - t1\r\n          buffer[y_ptr+i1] = d - t2\r\n          buffer[x_ptr+i] += t1\r\n          buffer[y_ptr+i] += t2\r\n        }\r\n        k1 = c1 * (u1 + u2)\r\n        k2 = u1 * (c2 - c1)\r\n        k3 = u2 * (c1 + c2)\r\n        u1 = k1 - k3\r\n        u2 = k1 + k2\r\n      }\r\n      c2 = Math.sqrt((1.0 - c1) / 2.0)\r\n      if(dir < 0) {\r\n        c2 = -c2\r\n      }\r\n      c1 = Math.sqrt((1.0 + c1) / 2.0)\r\n    }\r\n    \r\n    // Scaling for inverse transform\r\n    if(dir < 0) {\r\n      var scale_f = 1.0 / nn\r\n      for(i=0;i<nn;i++) {\r\n        buffer[x_ptr+i] *= scale_f\r\n        buffer[y_ptr+i] *= scale_f\r\n      }\r\n    }\r\n    \r\n    // Advance pointers\r\n    x_ptr += ncols\r\n    y_ptr += ncols\r\n  }\r\n}\r\n\r\n// Use Bluestein algorithm for npot FFTs\r\n// Scratch memory required:  2 * ncols + 4 * bits.nextPow2(2*ncols + 1)\r\nfunction fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {\r\n  dir |= 0\r\n  nrows |= 0\r\n  ncols |= 0\r\n  x_ptr |= 0\r\n  y_ptr |= 0\r\n  scratch_ptr |= 0\r\n\r\n  // Initialize tables\r\n  var m = bits.nextPow2(2 * ncols + 1)\r\n    , cos_ptr = scratch_ptr\r\n    , sin_ptr = cos_ptr + ncols\r\n    , xs_ptr  = sin_ptr + ncols\r\n    , ys_ptr  = xs_ptr  + m\r\n    , cft_ptr = ys_ptr  + m\r\n    , sft_ptr = cft_ptr + m\r\n    , w = -dir * Math.PI / ncols\r\n    , row, a, b, c, d, k1, k2, k3\r\n    , i\r\n  for(i=0; i<ncols; ++i) {\r\n    a = w * ((i * i) % (ncols * 2))\r\n    c = Math.cos(a)\r\n    d = Math.sin(a)\r\n    buffer[cft_ptr+(m-i)] = buffer[cft_ptr+i] = buffer[cos_ptr+i] = c\r\n    buffer[sft_ptr+(m-i)] = buffer[sft_ptr+i] = buffer[sin_ptr+i] = d\r\n  }\r\n  for(i=ncols; i<=m-ncols; ++i) {\r\n    buffer[cft_ptr+i] = 0.0\r\n  }\r\n  for(i=ncols; i<=m-ncols; ++i) {\r\n    buffer[sft_ptr+i] = 0.0\r\n  }\r\n\r\n  fftRadix2(1, 1, m, buffer, cft_ptr, sft_ptr)\r\n  \r\n  //Compute scale factor\r\n  if(dir < 0) {\r\n    w = 1.0 / ncols\r\n  } else {\r\n    w = 1.0\r\n  }\r\n  \r\n  //Handle direction\r\n  for(row=0; row<nrows; ++row) {\r\n  \r\n    // Copy row into scratch memory, multiply weights\r\n    for(i=0; i<ncols; ++i) {\r\n      a = buffer[x_ptr+i]\r\n      b = buffer[y_ptr+i]\r\n      c = buffer[cos_ptr+i]\r\n      d = -buffer[sin_ptr+i]\r\n      k1 = c * (a + b)\r\n      k2 = a * (d - c)\r\n      k3 = b * (c + d)\r\n      buffer[xs_ptr+i] = k1 - k3\r\n      buffer[ys_ptr+i] = k1 + k2\r\n    }\r\n    //Zero out the rest\r\n    for(i=ncols; i<m; ++i) {\r\n      buffer[xs_ptr+i] = 0.0\r\n    }\r\n    for(i=ncols; i<m; ++i) {\r\n      buffer[ys_ptr+i] = 0.0\r\n    }\r\n    \r\n    // FFT buffer\r\n    fftRadix2(1, 1, m, buffer, xs_ptr, ys_ptr)\r\n    \r\n    // Apply multiplier\r\n    for(i=0; i<m; ++i) {\r\n      a = buffer[xs_ptr+i]\r\n      b = buffer[ys_ptr+i]\r\n      c = buffer[cft_ptr+i]\r\n      d = buffer[sft_ptr+i]\r\n      k1 = c * (a + b)\r\n      k2 = a * (d - c)\r\n      k3 = b * (c + d)\r\n      buffer[xs_ptr+i] = k1 - k3\r\n      buffer[ys_ptr+i] = k1 + k2\r\n    }\r\n    \r\n    // Inverse FFT buffer\r\n    fftRadix2(-1, 1, m, buffer, xs_ptr, ys_ptr)\r\n    \r\n    // Copy result back into x/y\r\n    for(i=0; i<ncols; ++i) {\r\n      a = buffer[xs_ptr+i]\r\n      b = buffer[ys_ptr+i]\r\n      c = buffer[cos_ptr+i]\r\n      d = -buffer[sin_ptr+i]\r\n      k1 = c * (a + b)\r\n      k2 = a * (d - c)\r\n      k3 = b * (c + d)\r\n      buffer[x_ptr+i] = w * (k1 - k3)\r\n      buffer[y_ptr+i] = w * (k1 + k2)\r\n    }\r\n    \r\n    x_ptr += ncols\r\n    y_ptr += ncols\r\n  }\r\n}\r\n","'use strict';\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict';\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","'use strict';\n\n'use strict'\r\n\r\nvar ops = require('ndarray-ops')\r\nvar ndarray = require('ndarray')\r\nvar pool = require('typedarray-pool')\r\nvar fftm = require('./lib/fft-matrix.js')\r\n\r\nfunction ndfft(dir, x, y) {\r\n  var shape = x.shape\r\n    , d = shape.length\r\n    , size = 1\r\n    , stride = new Array(d)\r\n    , pad = 0\r\n    , i, j\r\n  for(i=d-1; i>=0; --i) {\r\n    stride[i] = size\r\n    size *= shape[i]\r\n    pad = Math.max(pad, fftm.scratchMemory(shape[i]))\r\n    if(x.shape[i] !== y.shape[i]) {\r\n      throw new Error('Shape mismatch, real and imaginary arrays must have same size')\r\n    }\r\n  }\r\n  var buf_size = 4 * size + pad\r\n  var buffer\r\n  if( x.dtype === 'array' ||\r\n      x.dtype === 'float64' ||\r\n      x.dtype === 'custom' ) {\r\n    buffer = pool.mallocDouble(buf_size)\r\n  } else {\r\n    buffer = pool.mallocFloat(buf_size)\r\n  }\r\n  var x1 = ndarray(buffer, shape.slice(0), stride, 0)\r\n    , y1 = ndarray(buffer, shape.slice(0), stride.slice(0), size)\r\n    , x2 = ndarray(buffer, shape.slice(0), stride.slice(0), 2*size)\r\n    , y2 = ndarray(buffer, shape.slice(0), stride.slice(0), 3*size)\r\n    , tmp, n, s1, s2\r\n    , scratch_ptr = 4 * size\r\n  \r\n  //Copy into x1/y1\r\n  ops.assign(x1, x)\r\n  ops.assign(y1, y)\r\n  \r\n  for(i=d-1; i>=0; --i) {\r\n    fftm(dir, size/shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr)\r\n    if(i === 0) {\r\n      break\r\n    }\r\n    \r\n    //Compute new stride for x2/y2\r\n    n = 1\r\n    s1 = x2.stride\r\n    s2 = y2.stride\r\n    for(j=i-1; j<d; ++j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    for(j=i-2; j>=0; --j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    \r\n    //Transpose\r\n    ops.assign(x2, x1)\r\n    ops.assign(y2, y1)\r\n    \r\n    //Swap buffers\r\n    tmp = x1\r\n    x1 = x2\r\n    x2 = tmp\r\n    tmp = y1\r\n    y1 = y2\r\n    y2 = tmp\r\n  }\r\n  \r\n  //Copy result back into x\r\n  ops.assign(x, x1)\r\n  ops.assign(y, y1)\r\n  \r\n  pool.free(buffer)\r\n}\r\n\r\nmodule.exports = ndfft","'use strict';\n\n\"use strict\"\n\nvar uniq = require(\"uniq\")\n\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , has_index = proc.indexArgs.length>0\n    , code = []\n    , vars = []\n    , idx=0, pidx=0, i, j\n  for(i=0; i<dimension; ++i) { // Iteration variables\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\n  }\n  //Compute scan deltas\n  for(j=0; j<nargs; ++j) {\n    for(i=0; i<dimension; ++i) {\n      pidx = idx\n      idx = order[i]\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\n      }\n    }\n  }\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }  \n  //Scan loop\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\n    idx = order[i]\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\n  }\n  //Push body of inner loop\n  code.push(body)\n  //Advance scan pointers\n  for(i=0; i<dimension; ++i) {\n    pidx = idx\n    idx = order[i]\n    for(j=0; j<nargs; ++j) {\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\n    }\n    if(has_index) {\n      if(i > 0) {\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\n      }\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\n    }\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , blockSize = proc.blockSize\n    , has_index = proc.indexArgs.length > 0\n    , code = []\n  for(var i=0; i<nargs; ++i) {\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\n  }\n  //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n  for(var i=matched; i<dimension; ++i) {\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\n    code.push([\"j\",i,\"=0\"].join(\"\"))\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\n    if(has_index) {\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\n    }\n  }\n  for(var i=0; i<nargs; ++i) {\n    var indexStr = [\"offset\"+i]\n    for(var j=matched; j<dimension; ++j) {\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\n    }\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\n  }\n  code.push(innerFill(order, proc, body))\n  for(var i=matched; i<dimension; ++i) {\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n  var matched = 0, dimension = orders[0].length\n  while(matched < dimension) {\n    for(var j=1; j<orders.length; ++j) {\n      if(orders[j][matched] !== orders[0][matched]) {\n        return matched\n      }\n    }\n    ++matched\n  }\n  return matched\n}\n\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body\n  var pre = []\n  var post = []\n  for(var i=0; i<block.args.length; ++i) {\n    var carg = block.args[i]\n    if(carg.count <= 0) {\n      continue\n    }\n    var re = new RegExp(carg.name, \"g\")\n    var ptrStr = \"\"\n    var arrNum = proc.arrayArgs.indexOf(i)\n    switch(proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\n        var offArg = proc.offsetArgs[offArgIndex]\n        arrNum = offArg.array\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr\n        var localStr = \"l\" + i\n        var arrStr = \"a\" + arrNum\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\n          if(carg.count === 1) { // Argument/array used only once(?)\n            if(dtypes[arrNum] === \"generic\") {\n              if(carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                code = code.replace(re, localStr)\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n            }\n          } else if(dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\n            }\n          }\n        } else { // Argument to body is a \"block\"\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n          }\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\n          ptrStr = ptrStrArr.join(\"+\")\n          if(dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n          }\n        }\n      break\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\n      break\n      case \"index\":\n        code = code.replace(re, \"index\")\n      break\n      case \"shape\":\n        code = code.replace(re, \"shape\")\n      break\n    }\n  }\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length)\n  var allEqual = true\n  for(var i=0; i<dtypes.length; ++i) {\n    var t = dtypes[i]\n    var digits = t.match(/\\d+/)\n    if(!digits) {\n      digits = \"\"\n    } else {\n      digits = digits[0]\n    }\n    if(t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits\n    } else {\n      summary[i] = t.charAt(0) + digits\n    }\n    if(i > 0) {\n      allEqual = allEqual && summary[i] === summary[i-1]\n    }\n  }\n  if(allEqual) {\n    return summary[0]\n  }\n  return summary.join(\"\")\n}\n\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\n  var orders = new Array(proc.arrayArgs.length)\n  var dtypes = new Array(proc.arrayArgs.length)\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2*i]\n    orders[i] = typesig[2*i+1]\n  }\n  \n  //Determine where block and loop indices start and end\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\n  var loopOrders = [] // orders restricted to the loop indices\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i]<0) {\n      loopBegin.push(0)\n      loopEnd.push(dimension)\n      blockBegin.push(dimension)\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\n      blockBegin.push(0)\n      blockEnd.push(proc.arrayBlockIndices[i])\n    }\n    var newOrder = []\n    for(var j=0; j<orders[i].length; j++) {\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n    loopOrders.push(newOrder)\n  }\n\n  //First create arguments for procedure\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\n  var code = [\"'use strict'\"]\n  var vars = []\n  \n  for(var j=0; j<dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\"+i) // Actual data array\n    arglist.push(\"t\"+i) // Strides\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\n    \n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\n    }\n    \n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\n    }\n  }\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i)\n  }\n  if(proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n  if(proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension)\n    for(var i=0; i<dimension; ++i) {\n      zeros[i] = \"0\"\n    }\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\n  }\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i]\n    var init_string = []\n    for(var j=0; j<off_arg.offset.length; ++j) {\n      if(off_arg.offset[j] === 0) {\n        continue\n      } else if(off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\n      }\n    }\n    if(init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\")\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\n    }\n  }\n\n  //Prepare this variables\n  var thisVars = uniq([].concat(proc.pre.thisVars)\n                      .concat(proc.body.thisVars)\n                      .concat(proc.post.thisVars))\n  vars = vars.concat(thisVars)\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    code.push(\"p\"+i+\"|=0\")\n  }\n  \n  //Inline prelude\n  if(proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes))\n  }\n\n  //Process body\n  var body = processBlock(proc.body, proc, dtypes)\n  var matched = countMatches(loopOrders)\n  if(matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body))\n  }\n\n  //Inline epilog\n  if(proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes))\n  }\n  \n  if(proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\n  return f()\n}\nmodule.exports = generateCWiseOp\n","'use strict';\n\n\"use strict\"\n\n// The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\n\nvar compile = require(\"./compile.js\")\n\nfunction createThunk(proc) {\n  var code = [\"'use strict'\", \"var CACHED={}\"]\n  var vars = []\n  var thunkName = proc.funcName + \"_cwise_thunk\"\n  \n  //Build thunk\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\n  var typesig = []\n  var string_typesig = []\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\n  var shapeLengthConditions = [], shapeConditions = []\n  // Process array arguments\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    var j = proc.arrayArgs[i]\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\n    typesig.push(\"t\" + j)\n    typesig.push(\"r\" + j)\n    string_typesig.push(\"t\"+j)\n    string_typesig.push(\"r\"+j+\".join()\")\n    proc_args.push(\"array\" + j + \".data\")\n    proc_args.push(\"array\" + j + \".stride\")\n    proc_args.push(\"array\" + j + \".offset|0\")\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\n    }\n  }\n  // Check for shape equality\n  if (proc.arrayArgs.length > 1) {\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\n    code.push(\"}\")\n  }\n  // Process scalar arguments\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\n  }\n  // Check for cached function (and if not present, generate it)\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\n  vars.push(\"proc=CACHED[type]\")\n  code.push(\"var \" + vars.join(\",\"))\n  \n  code.push([\"if(!proc){\",\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\n\n  if(proc.debug) {\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  //Compile thunk\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\n  return thunk(compile.bind(undefined, proc))\n}\n\nmodule.exports = createThunk\n","'use strict';\n\nmodule.exports = function(v) {\n  v += v === 0\n  --v\n  v |= v >>> 1\n  v |= v >>> 2\n  v |= v >>> 4\n  v |= v >>> 8\n  v |= v >>> 16\n  return v + 1\n}\n","'use strict';\n\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\n\n\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota"],"sourceRoot":""}